// koffee 1.14.0

/*
000   000  000  000   000  0000000     0000000   000   000  
000 0 000  000  0000  000  000   000  000   000  000 0 000  
000000000  000  000 0 000  000   000  000   000  000000000  
000   000  000  000  0000  000   000  000   000  000   000  
00     00  000  000   000  0000000     0000000   00     00
 */
var $, Brain, History, Tabs, Wheel, _, childp, clamp, defaultFontSize, electron, empty, getFontSize, kerror, keyinfo, klog, koSend, onContext, onMove, onWheel, open, openFile, os, post, prefs, ref, reloadWin, resetFontSize, saveStash, setEditor, setFontSize, slash, stash, stopEvent, tabs, term, udp, w, win;

ref = require('kxk'), $ = ref.$, _ = ref._, childp = ref.childp, clamp = ref.clamp, empty = ref.empty, kerror = ref.kerror, keyinfo = ref.keyinfo, klog = ref.klog, open = ref.open, os = ref.os, post = ref.post, prefs = ref.prefs, slash = ref.slash, stash = ref.stash, stopEvent = ref.stopEvent, udp = ref.udp, win = ref.win;

Tabs = require('./tabs');

Brain = require('./brain');

Wheel = require('./tools/wheel');

History = require('./history');

electron = require('electron');

w = new win({
    dir: __dirname,
    pkg: require('../package.json'),
    menu: '../coffee/menu.noon',
    icon: '../img/menu@2x.png',
    prefsSeperator: 'â–¸',
    context: function(items) {
        return onContext(items);
    }
});

window.stash = new stash("win/" + window.winID);

saveStash = function() {
    post.emit('stash');
    window.stash.save();
    return post.toMain('stashSaved');
};

window.tabs = tabs = new Tabs($("#titlebar"));

window.brain = new Brain;

window.wheel = new Wheel;

History.init();

term = function() {
    var ref1;
    return ((ref1 = tabs.activeTab()) != null ? ref1 : tabs.tabs[0]).term;
};

onMove = function() {
    return window.stash.set('bounds', window.win.getBounds());
};

window.onload = function() {};

reloadWin = function() {
    saveStash();
    return clearListeners();
};

koSend = null;

openFile = function(f) {
    var atom, bat, file, line, ref1;
    ref1 = slash.splitFileLine(f), file = ref1[0], line = ref1[1];
    switch (prefs.get('editor', 'Visual Studio')) {
        case 'VS Code':
            return open("vscode://file/" + slash.resolve(f));
        case 'Visual Studio':
            file = slash.unslash(slash.resolve(file));
            bat = slash.unslash(slash.resolve(slash.join(__dirname, '../bin/openFile/openVS.bat')));
            return childp.exec("\"" + bat + "\" \"" + file + "\" " + line + " 0", {
                cwd: slash.dir(bat)
            }, function(err) {
                if (!empty(err)) {
                    return kerror('vb', err);
                }
            });
        case 'Atom':
            file = slash.unslash(slash.resolve(file));
            atom = slash.unslash(slash.untilde('~/AppData/Local/atom/bin/atom'));
            return childp.exec("\"" + atom + "\" \"" + file + ":" + line + "\"", {
                cwd: slash.dir(file)
            }, function(err) {
                if (!empty(err)) {
                    return kerror('atom', err);
                }
            });
        default:
            if (!koSend) {
                koSend = new udp({
                    port: 9779
                });
            }
            return koSend.send(slash.resolve(f));
    }
};

post.on('openFile', openFile);

post.on('saveStash', function() {
    return saveStash();
});

defaultFontSize = 18;

getFontSize = function() {
    return prefs.get('fontSize', defaultFontSize);
};

setFontSize = function(s) {
    if (!_.isFinite(s)) {
        s = getFontSize();
    }
    s = parseInt(clamp(8, 88, s));
    prefs.set('fontSize', s);
    return post.emit('fontSize', s);
};

window.setFontSize = setFontSize;

resetFontSize = function() {
    return setFontSize(defaultFontSize);
};

onWheel = function(event) {
    var combo, key, mod, ref1, s;
    ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo;
    if (mod === (os.platform() === 'darwin' && 'command' || 'ctrl')) {
        post.emit('stopWheel');
        s = getFontSize();
        if (event.deltaY < 0) {
            setFontSize(s + 1);
        } else {
            setFontSize(s - 1);
        }
    } else {
        window.wheel.onWheel(event);
    }
    return stopEvent(event);
};

post.on('scrollBy', function(delta) {
    return term().scrollBy(delta);
});

window.document.addEventListener('wheel', onWheel, true);

setEditor = function(editor) {
    prefs.set('editor', editor);
    return klog("editor: " + (prefs.get('editor')));
};

post.on('menuAction', function(action) {
    switch (action) {
        case 'Close Tab':
            return tabs.closeTab();
        case 'Close Other Tabs':
            return tabs.closeOtherTabs();
        case 'Previous Tab':
            return tabs.navigate('left');
        case 'Next Tab':
            return tabs.navigate('right');
        case 'New Window':
            return post.toMain('newWindow');
        case 'New Tab':
            return tabs.addTab();
        case 'Increase':
            return setFontSize(getFontSize() + 1);
        case 'Decrease':
            return setFontSize(getFontSize() - 1);
        case 'Reset':
            return resetFontSize();
        case 'Clear':
            term().clear();
            return term().pwd();
        case 'Copy':
            return term().editor.copy();
        case 'Paste':
            return term().editor.paste();
        case 'Visual Studio':
        case 'VS Code':
        case 'Atom':
        case 'ko':
            return setEditor(action);
    }
});

onContext = function(items) {
    return [
        {
            text: 'Clear',
            combo: 'command+k',
            accel: 'alt+ctrl+k'
        }, {
            text: ''
        }
    ].concat(items);
};

process.chdir(slash.untilde(prefs.get('cwd', '~')));

post.emit('restore');

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/window.coffee