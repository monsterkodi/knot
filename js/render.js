
/*
00000000   00000000  000   000  0000000    00000000  00000000 
000   000  000       0000  000  000   000  000       000   000
0000000    0000000   000 0 000  000   000  0000000   0000000  
000   000  000       000  0000  000   000  000       000   000
000   000  00000000  000   000  0000000    00000000  000   000
 */
var Render, colors, empty, log, ref;

ref = require('kxk'), empty = ref.empty, log = ref.log;

log = console.log;

colors = require('./colors');

Render = (function() {
  function Render() {}

  Render.line = function(line, buffer) {
    var attr, bg, ch, defAttr, fg, flags, i, j, lastAttr, numCols, out, ref1;
    if (empty(line)) {
      return '<span> </span>';
    }
    out = '';
    defAttr = (257 << 9) | 256;
    lastAttr = null;
    numCols = Math.min(buffer.cols, line.length);
    if (numCols === 0) {
      return '<span> </span>';
    }
    for (i = j = 0, ref1 = numCols; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
      attr = line[i][0];
      ch = line[i][1];
      if (attr !== lastAttr) {
        if (lastAttr) {
          out += '</span>';
        }
        out += '<span style="';
        bg = attr & 0x1ff;
        fg = (attr >> 9) & 0x1ff;
        flags = attr >> 18;
        if (flags & 1) {
          out += 'font-weight:bold;';
          if (fg === 257) {
            fg = 15;
          } else if (fg < 8) {
            fg += 8;
          }
        }
        if (flags & 32) {
          if (fg < 8) {
            fg += 259;
          }
        }
        if (flags & 2) {
          out += 'text-decoration:underline;';
        }
        if (flags & 4) {
          if (flags & 2) {
            out = out.slice(0, -1);
            out += ' blink;';
          } else {
            out += 'text-decoration:blink;';
          }
        }
        if (flags & 8) {
          bg = (attr >> 9) & 0x1ff;
          fg = attr & 0x1ff;
          if ((flags & 1) && fg < 8) {
            fg += 8;
          }
        }
        if (flags & 16) {
          out += 'visibility:hidden;';
        }
        if (bg !== 256) {
          if (!colors[bg]) {
            log("bgcolor " + bg);
          }
          out += "background-color:" + colors[bg] + ";";
        }
        if (!colors[fg]) {
          log("fgcolor " + fg);
        }
        out += "color:" + colors[fg] + ";\">";
      }
      switch (ch) {
        case '&':
          out += '&amp;';
          break;
        case '<':
          out += '&lt;';
          break;
        case '>':
          out += '&gt;';
          break;
        default:
          if (ch <= ' ') {
            out += ' ';
          } else {
            out += ch;
          }
      }
      lastAttr = attr;
    }
    out += '</span>';
    return out;
  };

  return Render;

})();

module.exports = Render;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLE1BQWlCLE9BQUEsQ0FBUSxLQUFSLENBQWpCLEVBQUUsaUJBQUYsRUFBUzs7QUFFVCxHQUFBLEdBQU0sT0FBTyxDQUFDOztBQUNkLE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjs7QUFFSDs7O0VBRUYsTUFBQyxDQUFBLElBQUQsR0FBTyxTQUFDLElBQUQsRUFBTyxNQUFQO0FBRUgsUUFBQTtJQUFBLElBQUcsS0FBQSxDQUFNLElBQU4sQ0FBSDtBQUNJLGFBQU8saUJBRFg7O0lBR0EsR0FBQSxHQUFNO0lBRU4sT0FBQSxHQUFVLENBQUMsR0FBQSxJQUFPLENBQVIsQ0FBQSxHQUFhO0lBRXZCLFFBQUEsR0FBVztJQUVYLE9BQUEsR0FBVSxJQUFJLENBQUMsR0FBTCxDQUFTLE1BQU0sQ0FBQyxJQUFoQixFQUFzQixJQUFJLENBQUMsTUFBM0I7SUFDVixJQUFHLE9BQUEsS0FBVyxDQUFkO0FBQ0ksYUFBTyxpQkFEWDs7QUFHQSxTQUFTLHFGQUFUO01BRUksSUFBQSxHQUFPLElBQUssQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBO01BQ2YsRUFBQSxHQUFPLElBQUssQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBO01BRWYsSUFBRyxJQUFBLEtBQVEsUUFBWDtRQUVJLElBQUcsUUFBSDtVQUNJLEdBQUEsSUFBTyxVQURYOztRQUdBLEdBQUEsSUFBTztRQUVQLEVBQUEsR0FBSyxJQUFBLEdBQU87UUFDWixFQUFBLEdBQUssQ0FBQyxJQUFBLElBQVEsQ0FBVCxDQUFBLEdBQWM7UUFDbkIsS0FBQSxHQUFRLElBQUEsSUFBUTtRQUVoQixJQUFJLEtBQUEsR0FBUSxDQUFaO1VBQ0ksR0FBQSxJQUFPO1VBQ1AsSUFBRyxFQUFBLEtBQU0sR0FBVDtZQUNJLEVBQUEsR0FBSyxHQURUO1dBQUEsTUFFSyxJQUFHLEVBQUEsR0FBSyxDQUFSO1lBQ0QsRUFBQSxJQUFNLEVBREw7V0FKVDs7UUFPQSxJQUFJLEtBQUEsR0FBUSxFQUFaO1VBQ0ksSUFBRyxFQUFBLEdBQUssQ0FBUjtZQUNJLEVBQUEsSUFBTSxJQURWO1dBREo7O1FBSUEsSUFBSSxLQUFBLEdBQVEsQ0FBWjtVQUNJLEdBQUEsSUFBTyw2QkFEWDs7UUFHQSxJQUFJLEtBQUEsR0FBUSxDQUFaO1VBQ0ksSUFBSSxLQUFBLEdBQVEsQ0FBWjtZQUNJLEdBQUEsR0FBTSxHQUFHLENBQUMsS0FBSixDQUFVLENBQVYsRUFBYSxDQUFDLENBQWQ7WUFDTixHQUFBLElBQU8sVUFGWDtXQUFBLE1BQUE7WUFJSSxHQUFBLElBQU8seUJBSlg7V0FESjs7UUFPQSxJQUFJLEtBQUEsR0FBUSxDQUFaO1VBQ0ksRUFBQSxHQUFLLENBQUMsSUFBQSxJQUFRLENBQVQsQ0FBQSxHQUFjO1VBQ25CLEVBQUEsR0FBSyxJQUFBLEdBQU87VUFDWixJQUFHLENBQUMsS0FBQSxHQUFRLENBQVQsQ0FBQSxJQUFnQixFQUFBLEdBQUssQ0FBeEI7WUFBK0IsRUFBQSxJQUFNLEVBQXJDO1dBSEo7O1FBS0EsSUFBSSxLQUFBLEdBQVEsRUFBWjtVQUNJLEdBQUEsSUFBTyxxQkFEWDs7UUFHQSxJQUFHLEVBQUEsS0FBTSxHQUFUO1VBQ0ksSUFBRyxDQUFJLE1BQU8sQ0FBQSxFQUFBLENBQWQ7WUFDSSxHQUFBLENBQUksVUFBQSxHQUFXLEVBQWYsRUFESjs7VUFFQSxHQUFBLElBQU8sbUJBQUEsR0FBb0IsTUFBTyxDQUFBLEVBQUEsQ0FBM0IsR0FBK0IsSUFIMUM7O1FBS0EsSUFBRyxDQUFJLE1BQU8sQ0FBQSxFQUFBLENBQWQ7VUFDSSxHQUFBLENBQUksVUFBQSxHQUFXLEVBQWYsRUFESjs7UUFFQSxHQUFBLElBQU8sUUFBQSxHQUFTLE1BQU8sQ0FBQSxFQUFBLENBQWhCLEdBQW9CLE9BL0MvQjs7QUFpREEsY0FBUSxFQUFSO0FBQUEsYUFDUyxHQURUO1VBQ2tCLEdBQUEsSUFBTztBQUFoQjtBQURULGFBRVMsR0FGVDtVQUVrQixHQUFBLElBQU87QUFBaEI7QUFGVCxhQUdTLEdBSFQ7VUFHa0IsR0FBQSxJQUFPO0FBQWhCO0FBSFQ7VUFLUSxJQUFHLEVBQUEsSUFBTSxHQUFUO1lBQ0ksR0FBQSxJQUFPLElBRFg7V0FBQSxNQUFBO1lBR0ksR0FBQSxJQUFPLEdBSFg7O0FBTFI7TUFVQSxRQUFBLEdBQVc7QUFoRWY7SUFrRUEsR0FBQSxJQUFPO1dBRVA7RUFuRkc7Ozs7OztBQXFGWCxNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAwMDAwMCBcbjAwMCAgIDAwMCAgMDAwICAgICAgIDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwXG4wMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgIFxuMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAwMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDBcbjAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwMCAgMDAwICAgMDAwXG4jIyNcblxueyBlbXB0eSwgbG9nIH0gPSByZXF1aXJlICdreGsnXG5cbmxvZyA9IGNvbnNvbGUubG9nXG5jb2xvcnMgPSByZXF1aXJlICcuL2NvbG9ycydcbiAgICBcbmNsYXNzIFJlbmRlclxuXG4gICAgQGxpbmU6IChsaW5lLCBidWZmZXIpIC0+XG5cbiAgICAgICAgaWYgZW1wdHkgbGluZVxuICAgICAgICAgICAgcmV0dXJuICc8c3Bhbj4gPC9zcGFuPidcbiAgICAgICAgXG4gICAgICAgIG91dCA9ICcnXG4gICAgICAgIFxuICAgICAgICBkZWZBdHRyID0gKDI1NyA8PCA5KSB8IDI1NlxuXG4gICAgICAgIGxhc3RBdHRyID0gbnVsbFxuICAgICAgICBcbiAgICAgICAgbnVtQ29scyA9IE1hdGgubWluIGJ1ZmZlci5jb2xzLCBsaW5lLmxlbmd0aFxuICAgICAgICBpZiBudW1Db2xzID09IDBcbiAgICAgICAgICAgIHJldHVybiAnPHNwYW4+IDwvc3Bhbj4nXG4gICAgICAgIFxuICAgICAgICBmb3IgaSBpbiBbMC4uLm51bUNvbHNdXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGF0dHIgPSBsaW5lW2ldWzBdXG4gICAgICAgICAgICBjaCAgID0gbGluZVtpXVsxXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBhdHRyICE9IGxhc3RBdHRyXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgbGFzdEF0dHJcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICc8L3NwYW4+J1xuXG4gICAgICAgICAgICAgICAgb3V0ICs9ICc8c3BhbiBzdHlsZT1cIidcbiAgICBcbiAgICAgICAgICAgICAgICBiZyA9IGF0dHIgJiAweDFmZlxuICAgICAgICAgICAgICAgIGZnID0gKGF0dHIgPj4gOSkgJiAweDFmZlxuICAgICAgICAgICAgICAgIGZsYWdzID0gYXR0ciA+PiAxOFxuICAgIFxuICAgICAgICAgICAgICAgIGlmIChmbGFncyAmIDEpICMgYm9sZFxuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gJ2ZvbnQtd2VpZ2h0OmJvbGQ7J1xuICAgICAgICAgICAgICAgICAgICBpZiBmZyA9PSAyNTdcbiAgICAgICAgICAgICAgICAgICAgICAgIGZnID0gMTVcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiBmZyA8IDggXG4gICAgICAgICAgICAgICAgICAgICAgICBmZyArPSA4XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGZsYWdzICYgMzIpICMgZGltXG4gICAgICAgICAgICAgICAgICAgIGlmIGZnIDwgOCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZnICs9IDI1OVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGZsYWdzICYgMikgIyB1bmRlcmxpbmVcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICd0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lOydcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoZmxhZ3MgJiA0KSAjIGJsaW5rXG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGFncyAmIDIpXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgPSBvdXQuc2xpY2UoMCwgLTEpXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gJyBibGluazsnXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dCArPSAndGV4dC1kZWNvcmF0aW9uOmJsaW5rOydcblxuICAgICAgICAgICAgICAgIGlmIChmbGFncyAmIDgpICMgaW52ZXJzZVxuICAgICAgICAgICAgICAgICAgICBiZyA9IChhdHRyID4+IDkpICYgMHgxZmZcbiAgICAgICAgICAgICAgICAgICAgZmcgPSBhdHRyICYgMHgxZmZcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWdzICYgMSkgYW5kIGZnIDwgOCB0aGVuIGZnICs9IDhcblxuICAgICAgICAgICAgICAgIGlmIChmbGFncyAmIDE2KSAjIGhpZGRlblxuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gJ3Zpc2liaWxpdHk6aGlkZGVuOydcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgYmcgIT0gMjU2XG4gICAgICAgICAgICAgICAgICAgIGlmIG5vdCBjb2xvcnNbYmddXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cgXCJiZ2NvbG9yICN7Ymd9XCJcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IFwiYmFja2dyb3VuZC1jb2xvcjoje2NvbG9yc1tiZ119O1wiXG4gICAgXG4gICAgICAgICAgICAgICAgaWYgbm90IGNvbG9yc1tmZ11cbiAgICAgICAgICAgICAgICAgICAgbG9nIFwiZmdjb2xvciAje2ZnfVwiXG4gICAgICAgICAgICAgICAgb3V0ICs9IFwiY29sb3I6I3tjb2xvcnNbZmddfTtcXFwiPlwiXG4gICAgXG4gICAgICAgICAgICBzd2l0Y2ggKGNoKSBcbiAgICAgICAgICAgICAgICB3aGVuICcmJyB0aGVuIG91dCArPSAnJmFtcDsnXG4gICAgICAgICAgICAgICAgd2hlbiAnPCcgdGhlbiBvdXQgKz0gJyZsdDsnXG4gICAgICAgICAgICAgICAgd2hlbiAnPicgdGhlbiBvdXQgKz0gJyZndDsnXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpZiBjaCA8PSAnICdcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dCArPSAnICcgIyAnJm5ic3A7J1xuICAgICAgICAgICAgICAgICAgICBlbHNlIFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9IGNoXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgbGFzdEF0dHIgPSBhdHRyXG4gICAgXG4gICAgICAgIG91dCArPSAnPC9zcGFuPidcbiAgICBcbiAgICAgICAgb3V0ICAgICAgICAgICAgXG5cbm1vZHVsZS5leHBvcnRzID0gUmVuZGVyXG4iXX0=
//# sourceURL=../coffee/render.coffee