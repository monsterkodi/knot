// koffee 1.12.0

/*
000000000   0000000   0000000     0000000
   000     000   000  000   000  000     
   000     000000000  0000000    0000000 
   000     000   000  000   000       000
   000     000   000  0000000    0000000
 */
var $, Tab, Tabs, Term, _, drag, elem, empty, kpos, popup, post, ref, slash, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), $ = ref.$, _ = ref._, drag = ref.drag, elem = ref.elem, empty = ref.empty, kpos = ref.kpos, popup = ref.popup, post = ref.post, slash = ref.slash, stopEvent = ref.stopEvent;

Tab = require('./tab');

Term = require('./term');

Tabs = (function() {
    function Tabs(titlebar) {
        this.showContextMenu = bind(this.showContextMenu, this);
        this.onContextMenu = bind(this.onContextMenu, this);
        this.closeTabs = bind(this.closeTabs, this);
        this.onDragStop = bind(this.onDragStop, this);
        this.onDragMove = bind(this.onDragMove, this);
        this.onDragStart = bind(this.onDragStart, this);
        this.onClick = bind(this.onClick, this);
        this.restore = bind(this.restore, this);
        this.stash = bind(this.stash, this);
        this.tabs = [];
        this.div = elem({
            "class": 'tabs'
        });
        titlebar.insertBefore(this.div, $('.minimize'));
        this.div.addEventListener('click', this.onClick);
        this.div.addEventListener('contextmenu', this.onContextMenu);
        post.on('stash', this.stash);
        post.on('restore', this.restore);
        this.drag = new drag({
            target: this.div,
            onStart: this.onDragStart,
            onMove: this.onDragMove,
            onStop: this.onDragStop
        });
    }

    Tabs.prototype.stash = function() {
        var paths, ref1, tab;
        paths = (function() {
            var i, len, ref1, results;
            ref1 = this.tabs;
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
                tab = ref1[i];
                results.push(tab.text);
            }
            return results;
        }).call(this);
        return window.stash.set('tabs', {
            paths: paths,
            active: Math.min((ref1 = this.activeTab()) != null ? ref1.index() : void 0, paths.length - 1)
        });
    };

    Tabs.prototype.restore = function() {
        var active, paths, ref1;
        active = window.stash.get('tabs:active', 0);
        paths = window.stash.get('tabs:paths');
        if (empty(paths)) {
            this.addTab(slash.tilde(process.cwd()));
            return;
        }
        while (paths.length) {
            this.addTab(paths.shift());
        }
        return (ref1 = this.tabs[active]) != null ? ref1.activate() : void 0;
    };

    Tabs.prototype.onClick = function(event) {
        var tab;
        if (tab = this.tab(event.target)) {
            if (event.target.classList.contains('dot')) {
                this.closeTab(tab);
            } else {
                tab.activate();
            }
        }
        return true;
    };

    Tabs.prototype.onDragStart = function(d, e) {
        var br;
        this.dragTab = this.tab(e.target);
        if (!this.dragTab) {
            return 'skip';
        }
        if (event.button !== 1) {
            return 'skip';
        }
        this.dragDiv = this.dragTab.div.cloneNode(true);
        this.dragTab.div.style.opacity = '0';
        br = this.dragTab.div.getBoundingClientRect();
        this.dragDiv.style.position = 'absolute';
        this.dragDiv.style.top = br.top + "px";
        this.dragDiv.style.left = br.left + "px";
        this.dragDiv.style.width = (br.width - 12) + "px";
        this.dragDiv.style.height = (br.height - 3) + "px";
        this.dragDiv.style.flex = 'unset';
        this.dragDiv.style.pointerEvents = 'none';
        return document.body.appendChild(this.dragDiv);
    };

    Tabs.prototype.onDragMove = function(d, e) {
        var tab;
        this.dragDiv.style.transform = "translateX(" + d.deltaSum.x + "px)";
        if (tab = this.tabAtX(d.pos.x)) {
            if (tab.index() !== this.dragTab.index()) {
                return this.swap(tab, this.dragTab);
            }
        }
    };

    Tabs.prototype.onDragStop = function(d, e) {
        this.dragTab.div.style.opacity = '';
        return this.dragDiv.remove();
    };

    Tabs.prototype.tab = function(id) {
        if (_.isNumber(id)) {
            return this.tabs[id];
        }
        if (_.isElement(id)) {
            return _.find(this.tabs, function(t) {
                return t.div.contains(id);
            });
        }
        if (_.isString(id)) {
            return _.find(this.tabs, function(t) {
                return t.info.text === id;
            });
        }
    };

    Tabs.prototype.activeTab = function() {
        return _.find(this.tabs, function(t) {
            return t.isActive();
        });
    };

    Tabs.prototype.numTabs = function() {
        return this.tabs.length;
    };

    Tabs.prototype.tabAtX = function(x) {
        return _.find(this.tabs, function(t) {
            var br;
            br = t.div.getBoundingClientRect();
            return (br.left <= x && x <= br.left + br.width);
        });
    };

    Tabs.prototype.resized = function() {
        var i, len, ref1, results, tab;
        ref1 = this.tabs;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
            tab = ref1[i];
            results.push(tab.term.resized());
        }
        return results;
    };

    Tabs.prototype.addTab = function(text) {
        var tab;
        tab = new Tab(this, new Term);
        tab.term.tab = tab;
        if (text) {
            tab.update(text);
        }
        this.tabs.push(tab);
        tab.activate();
        post.emit('menuAction', 'Clear');
        return tab;
    };

    Tabs.prototype.closeTab = function(tab) {
        var ref1;
        if (tab == null) {
            tab = this.activeTab();
        }
        if (tab == null) {
            return;
        }
        if (this.tabs.length > 1) {
            if (tab === this.activeTab()) {
                if ((ref1 = tab.nextOrPrev()) != null) {
                    ref1.activate();
                }
            }
        }
        tab.close();
        _.pull(this.tabs, tab);
        if (empty(this.tabs)) {
            post.emit('menuAction', 'Close');
        }
        return this;
    };

    Tabs.prototype.closeOtherTabs = function() {
        var keep;
        if (!this.activeTab()) {
            return;
        }
        keep = _.pullAt(this.tabs, this.activeTab().index());
        while (this.numTabs()) {
            this.tabs.pop().close();
        }
        return this.tabs = keep;
    };

    Tabs.prototype.closeTabs = function() {
        var results;
        results = [];
        while (this.numTabs()) {
            results.push(this.tabs.pop().close());
        }
        return results;
    };

    Tabs.prototype.navigate = function(key) {
        var index;
        index = this.activeTab().index();
        index += (function() {
            switch (key) {
                case 'left':
                    return -1;
                case 'right':
                    return +1;
            }
        })();
        index = (this.numTabs() + index) % this.numTabs();
        return this.tabs[index].activate();
    };

    Tabs.prototype.swap = function(ta, tb) {
        var ref1;
        if ((ta == null) || (tb == null)) {
            return;
        }
        if (ta.index() > tb.index()) {
            ref1 = [tb, ta], ta = ref1[0], tb = ref1[1];
        }
        this.tabs[ta.index()] = tb;
        this.tabs[tb.index() + 1] = ta;
        return this.div.insertBefore(tb.div, ta.div);
    };

    Tabs.prototype.move = function(key) {
        var tab;
        tab = this.activeTab();
        switch (key) {
            case 'left':
                return this.swap(tab, tab.prev());
            case 'right':
                return this.swap(tab, tab.next());
        }
    };

    Tabs.prototype.onContextMenu = function(event) {
        return stopEvent(event, this.showContextMenu(kpos(event)));
    };

    Tabs.prototype.showContextMenu = function(absPos) {
        var opt, tab;
        if (tab = this.tab(event.target)) {
            tab.activate();
        }
        if (absPos == null) {
            absPos = kpos(this.view.getBoundingClientRect().left, this.view.getBoundingClientRect().top);
        }
        opt = {
            items: [
                {
                    text: 'Close Other Tabs',
                    combo: 'ctrl+shift+w'
                }
            ]
        };
        opt.x = absPos.x;
        opt.y = absPos.y;
        return popup.menu(opt);
    };

    return Tabs;

})();

module.exports = Tabs;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/tabs.coffee