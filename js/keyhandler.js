// koffee 1.3.0

/*
000   000  00000000  000   000  000   000   0000000   000   000  0000000    000      00000000  00000000 
000  000   000        000 000   000   000  000   000  0000  000  000   000  000      000       000   000
0000000    0000000     00000    000000000  000000000  000 0 000  000   000  000      0000000   0000000  
000  000   000          000     000   000  000   000  000  0000  000   000  000      000       000   000
000   000  00000000     000     000   000  000   000  000   000  0000000    0000000  00000000  000   000
 */
var $, ESC, KeyHandler, electron, empty, klog, post, ref, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf;

ref = require('kxk'), post = ref.post, stopEvent = ref.stopEvent, empty = ref.empty, klog = ref.klog, $ = ref.$;

ESC = '\x1b';

electron = require('electron');

KeyHandler = (function() {
    function KeyHandler(term) {
        this.term = term;
        this.onCombo = bind(this.onCombo, this);
        this.write = bind(this.write, this);
        post.on('combo', this.onCombo);
    }

    KeyHandler.prototype.write = function(data) {
        return this.term.shell.write(data);
    };

    KeyHandler.prototype.onCombo = function(combo, info) {
        var event, modifiers, ref1;
        switch (combo) {
            case 'enter':
                return this.write('\x0d');
        }
        event = info.event;
        if (info.char && ((ref1 = event.keyCode) !== 9)) {
            return this.write(info.char);
        } else {
            modifiers = (event.shiftKey && 1 || 0) | (event.altKey && 2 || 0) | (event.ctrlKey && 4 || 0) | (event.metaKey && 8 || 0);
            return this.onKeyCode(event.keyCode, modifiers, info);
        }
    };

    KeyHandler.prototype.onKeyCode = function(keyCode, modifiers, info) {
        var writeMod;
        if (info.mod === 'ctrl') {
            if (keyCode >= 65 && keyCode <= 90) {
                if (keyCode !== 86) {
                    this.write(String.fromCharCode(keyCode - 64));
                }
                switch (keyCode) {
                    case 86:
                    case 67:
                        break;
                    default:
                        stopEvent(info.event);
                }
                return;
            }
        }
        writeMod = (function(_this) {
            return function(mpre, mpost, pure, square) {
                if (square == null) {
                    square = true;
                }
                if (modifiers) {
                    return _this.write(ESC + '[' + mpre + ';' + (modifiers + 1) + mpost);
                } else {
                    if (square) {
                        return _this.write(ESC + '[' + pure);
                    } else {
                        return _this.write(ESC + pure);
                    }
                }
            };
        })(this);
        switch (keyCode) {
            case 27:
                return this.write(ESC);
            case 9:
                if (indexOf.call(info.mod, 'shift') >= 0) {
                    return this.write(ESC + '[Z');
                } else {
                    stopEvent(info.event);
                    return this.write('\t');
                }
                break;
            case 37:
                return stopEvent(event, writeMod('1', 'D', 'D'));
            case 39:
                return stopEvent(event, writeMod('1', 'C', 'C'));
            case 38:
                return stopEvent(event, writeMod('1', 'A', 'A'));
            case 40:
                return stopEvent(event, writeMod('1', 'B', 'B'));
            case 33:
                return stopEvent(event, writeMod('5', '~', '5~'));
            case 34:
                return stopEvent(event, writeMod('6', '~', '6~'));
            case 35:
                return stopEvent(event, writeMod('1', 'F', 'F'));
            case 36:
                return stopEvent(event, writeMod('1', 'H', 'H'));
            default:
                return console.log("keyhandler.keyCode " + keyCode);
        }
    };

    return KeyHandler;

})();

module.exports = KeyHandler;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/keyhandler.coffee