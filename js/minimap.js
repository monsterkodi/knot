// koffee 1.3.0

/*
00     00  000  000   000  000  00     00   0000000   00000000
000   000  000  0000  000  000  000   000  000   000  000   000
000000000  000  000 0 000  000  000000000  000000000  00000000
000 0 000  000  000  0000  000  000 0 000  000   000  000
000   000  000  000   000  000  000   000  000   000  000
 */
var $, MapScroll, Minimap, clamp, colors, drag, elem, empty, getStyle, klog, kstr, post, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), post = ref.post, getStyle = ref.getStyle, empty = ref.empty, clamp = ref.clamp, elem = ref.elem, drag = ref.drag, kstr = ref.kstr, klog = ref.klog, $ = ref.$;

MapScroll = require('./mapscroll');

colors = require('./colors');

Minimap = (function() {
    function Minimap(term) {
        var main, minimapWidth;
        this.term = term;
        this.clearAll = bind(this.clearAll, this);
        this.onScroll = bind(this.onScroll, this);
        this.onEditorScroll = bind(this.onEditorScroll, this);
        this.onStart = bind(this.onStart, this);
        this.onDrag = bind(this.onDrag, this);
        this.onChanged = bind(this.onChanged, this);
        this.onVanishLines = bind(this.onVanishLines, this);
        this.onExposeLines = bind(this.onExposeLines, this);
        this.exposeLine = bind(this.exposeLine, this);
        this.drawTopBot = bind(this.drawTopBot, this);
        minimapWidth = parseInt(getStyle('.minimap', 'width'));
        this.colors = {};
        this.width = 2 * minimapWidth;
        this.height = 8192;
        this.offsetLeft = 6;
        this.elem = elem({
            "class": 'minimap',
            id: 'minimap'
        });
        this.topbot = elem({
            "class": 'topbot'
        });
        this.lines = elem('canvas', {
            "class": 'minimapLines',
            width: this.width,
            height: this.height
        });
        this.elem.appendChild(this.topbot);
        this.elem.appendChild(this.lines);
        main = $('#main');
        main.appendChild(this.elem);
        post.on('clearLines', this.onEditorScroll);
        post.on('scroll', this.onEditorScroll);
        this.scroll = new MapScroll({
            exposeMax: this.height / 4,
            lineHeight: 4,
            viewHeight: 2 * main.clientHeight
        });
        this.scroll.name = "minimap";
        this.drag = new drag({
            target: this.elem,
            onStart: this.onStart,
            onMove: this.onDrag,
            cursor: 'pointer'
        });
        this.scroll.on('clearLines', this.clearAll);
        this.scroll.on('scroll', this.onScroll);
        this.scroll.on('exposeLines', this.onExposeLines);
        this.scroll.on('vanishLines', this.onVanishLines);
        this.scroll.on('exposeLine', this.exposeLine);
        this.onScroll();
        this.drawLines();
        this.drawTopBot();
    }

    Minimap.prototype.drawLine = function(index) {
        return this.drawLines(index, index);
    };

    Minimap.prototype.drawLines = function(top, bot) {
        var attr, charData, ctx, fg, fgColor, i, j, li, line, ref1, ref2, results, y;
        if (top == null) {
            top = this.scroll.exposeTop;
        }
        if (bot == null) {
            bot = this.scroll.exposeBot;
        }
        ctx = this.lines.getContext('2d');
        y = parseInt((top - this.scroll.exposeTop) * this.scroll.lineHeight);
        ctx.clearRect(0, y, this.width, ((bot - this.scroll.exposeTop) - (top - this.scroll.exposeTop) + 1) * this.scroll.lineHeight);
        if (this.scroll.exposeBot < 0) {
            return;
        }
        if (bot < top) {
            return;
        }
        results = [];
        for (li = j = ref1 = top, ref2 = bot; ref1 <= ref2 ? j <= ref2 : j >= ref2; li = ref1 <= ref2 ? ++j : --j) {
            y = parseInt((li - this.scroll.exposeTop) * this.scroll.lineHeight);
            line = this.term.bufferLines().get(li);
            results.push((function() {
                var k, ref3, results1;
                results1 = [];
                for (i = k = 0, ref3 = line.length; 0 <= ref3 ? k < ref3 : k > ref3; i = 0 <= ref3 ? ++k : --k) {
                    if (2 * i >= this.width) {
                        break;
                    }
                    charData = line.get(i);
                    fgColor = line.getFg(i);
                    if (charData[3] !== 0 && charData[3] !== 32) {
                        attr = charData[0];
                        fg = fgColor & 0x1ff;
                        ctx.fillStyle = colors[fg];
                        results1.push(ctx.fillRect(this.offsetLeft + 2 * i, y, 2, this.scroll.lineHeight));
                    } else {
                        results1.push(void 0);
                    }
                }
                return results1;
            }).call(this));
        }
        return results;
    };

    Minimap.prototype.drawTopBot = function() {
        var lh, th, ty;
        if (this.scroll.exposeBot < 0) {
            return;
        }
        lh = this.scroll.lineHeight / 2;
        th = (this.term.scroll.bot - this.term.scroll.top + 1) * lh;
        ty = 0;
        if (this.term.scroll.scrollMax) {
            ty = (Math.min(0.5 * this.scroll.viewHeight, this.scroll.numLines * 2) - th) * this.term.scroll.scroll / this.term.scroll.scrollMax;
        }
        this.topbot.style.height = th + "px";
        return this.topbot.style.top = ty + "px";
    };

    Minimap.prototype.exposeLine = function(li) {
        return this.drawLines(li, li);
    };

    Minimap.prototype.onExposeLines = function(e) {
        return this.drawLines(this.scroll.exposeTop, this.scroll.exposeBot);
    };

    Minimap.prototype.onVanishLines = function(e) {
        if (e.top != null) {
            return this.drawLines(this.scroll.exposeTop, this.scroll.exposeBot);
        } else {
            return this.clearRange(this.scroll.exposeBot, this.scroll.exposeBot + this.scroll.numLines);
        }
    };

    Minimap.prototype.onChanged = function(changeInfo) {
        var change, j, len, li, ref1, ref2;
        if (changeInfo.selects) {
            this.drawSelections();
        }
        if (changeInfo.cursors) {
            this.drawCursors();
        }
        if (!changeInfo.changes.length) {
            return;
        }
        this.scroll.setNumLines(this.term.numLines());
        ref1 = changeInfo.changes;
        for (j = 0, len = ref1.length; j < len; j++) {
            change = ref1[j];
            li = change.oldIndex;
            if ((ref2 = !change.change) === 'deleted' || ref2 === 'inserted') {
                break;
            }
            this.drawLines(li, li);
        }
        if (li <= this.scroll.exposeBot) {
            return this.drawLines(li, this.scroll.exposeBot);
        }
    };

    Minimap.prototype.onDrag = function(drag, event) {
        var br, li, pc, ry;
        if (this.scroll.fullHeight > this.scroll.viewHeight) {
            br = this.elem.getBoundingClientRect();
            ry = event.clientY - br.top;
            pc = 2 * ry / this.scroll.viewHeight;
            li = parseInt(pc * this.term.scroll.numLines);
            return this.jumpToLine(li, event);
        } else {
            return this.jumpToLine(this.lineIndexForEvent(event), event);
        }
    };

    Minimap.prototype.onStart = function(drag, event) {
        return this.jumpToLine(this.lineIndexForEvent(event), event);
    };

    Minimap.prototype.jumpToLine = function(li, event) {
        this.term.scroll.to((li - 5) * this.term.scroll.lineHeight);
        return this.onEditorScroll();
    };

    Minimap.prototype.lineIndexForEvent = function(event) {
        var br, li, ly, py, st;
        st = this.elem.scrollTop;
        br = this.elem.getBoundingClientRect();
        ly = clamp(0, this.elem.offsetHeight, event.clientY - br.top);
        py = parseInt(Math.floor(2 * ly / this.scroll.lineHeight)) + this.scroll.top;
        li = parseInt(Math.min(this.scroll.numLines - 1, py));
        return li;
    };

    Minimap.prototype.onEditorScroll = function(scrollValue, editorScroll) {
        var pc, tp;
        if (editorScroll != null) {
            editorScroll;
        } else {
            editorScroll = this.term.scroll;
        }
        if (this.scroll.viewHeight !== 2 * editorScroll.viewHeight) {
            this.scroll.setViewHeight(2 * editorScroll.viewHeight);
            this.onScroll();
        }
        if (this.scroll.numLines !== editorScroll.numLines) {
            this.scroll.setNumLines(editorScroll.numLines);
        }
        if (this.scroll.fullHeight > this.scroll.viewHeight) {
            pc = editorScroll.scroll / editorScroll.scrollMax;
            tp = parseInt(pc * this.scroll.scrollMax);
            this.scroll.to(tp);
        }
        return this.drawTopBot();
    };

    Minimap.prototype.onScroll = function() {
        var t, x, y;
        y = parseInt(-this.height / 4 - this.scroll.offsetTop / 2);
        x = parseInt(this.width / 4);
        t = "translate3d(" + x + "px, " + y + "px, 0px) scale3d(0.5, 0.5, 1)";
        return this.lines.style.transform = t;
    };

    Minimap.prototype.clearRange = function(top, bot) {
        var ctx;
        ctx = this.lines.getContext('2d');
        return ctx.clearRect(0, (top - this.scroll.exposeTop) * this.scroll.lineHeight, 2 * this.width, (bot - top) * this.scroll.lineHeight);
    };

    Minimap.prototype.clearAll = function() {
        var ctx;
        ctx = this.lines.getContext('2d');
        ctx.clearRect(0, 0, this.lines.width, this.lines.height);
        this.topbot.width = this.topbot.width;
        this.lines.width = this.lines.width;
        return this.topbot.style.height = '0';
    };

    return Minimap;

})();

module.exports = Minimap;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/minimap.coffee