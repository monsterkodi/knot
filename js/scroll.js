// koffee 1.3.0

/*
 0000000   0000000  00000000    0000000   000      000      
000       000       000   000  000   000  000      000      
0000000   000       0000000    000   000  000      000      
     000  000       000   000  000   000  000      000      
0000000    0000000  000   000   0000000   0000000  0000000
 */
var Scroll, Wheel, clamp, post, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), post = ref.post, clamp = ref.clamp;

Wheel = require('./wheel');

Scroll = (function() {
    function Scroll(view) {
        this.view = view;
        this.setLineHeight = bind(this.setLineHeight, this);
        this.setViewHeight = bind(this.setViewHeight, this);
        this.setNumLines = bind(this.setNumLines, this);
        this.by = bind(this.by, this);
        this.to = bind(this.to, this);
        this.onScrollBy = bind(this.onScrollBy, this);
        this.onCombo = bind(this.onCombo, this);
        this.reset = bind(this.reset, this);
        post.on('combo', this.onCombo);
        post.on('scrollBy', this.onScrollBy);
        this.resetSize();
        this.resetLines();
        this.wheel = new Wheel(this);
    }

    Scroll.prototype.resetSize = function() {
        this.lineHeight = 0;
        this.viewHeight = -1;
        this.fullLines = -1;
        this.viewLines = -1;
        return this.scrollMax = -1;
    };

    Scroll.prototype.resetLines = function() {
        this.top = -1;
        this.bot = -1;
        this.fullHeight = 0;
        this.scroll = 0;
        this.offsetTop = 0;
        return this.numLines = 0;
    };

    Scroll.prototype.data = function() {
        return {
            lineHeight: this.lineHeight,
            viewHeight: this.viewHeight,
            fullHeight: this.fullHeight,
            scrollMax: this.scrollMax,
            fullLines: this.fullLines,
            viewLines: this.viewLines,
            scroll: this.scroll,
            offsetTop: this.offsetTop,
            numLines: this.numLines,
            top: this.top,
            bot: this.bot
        };
    };

    Scroll.prototype.restore = function(data) {
        if (!data) {
            this.resetSize();
            this.resetLines();
            return;
        }
        this.lineHeight = data.lineHeight;
        this.viewHeight = data.viewHeight;
        this.fullHeight = data.fullHeight;
        this.scrollMax = data.scrollMax;
        this.fullLines = data.fullLines;
        this.viewLines = data.viewLines;
        this.scroll = data.scroll;
        this.offsetTop = data.offsetTop;
        this.numLines = data.numLines;
        this.top = data.top;
        this.bot = data.bot;
        return post.emit('scroll', this.scroll, this);
    };

    Scroll.prototype.reset = function() {
        this.resetLines();
        post.emit('clearLines');
        return this.updateOffset();
    };

    Scroll.prototype.info = function() {
        return {
            topbot: this.top + " .. " + this.bot + " = " + (this.bot - this.top) + " / " + this.numLines + " lines",
            scroll: this.scroll + " offsetTop " + this.offsetTop + " viewHeight " + this.viewHeight + " lineHeight " + this.lineHeight + " scrollMax " + this.scrollMax + " fullLines " + this.fullLines + " viewLines " + this.viewLines
        };
    };

    Scroll.prototype.calc = function() {
        if (this.viewHeight <= 0) {
            return;
        }
        this.scrollMax = Math.max(0, this.fullHeight - this.viewHeight);
        this.fullLines = Math.floor(this.viewHeight / this.lineHeight);
        this.viewLines = Math.ceil(this.viewHeight / this.lineHeight) + 1;
        this.by(0);
        return post.emit('scroll', this.scroll, this);
    };

    Scroll.prototype.onCombo = function(combo) {
        switch (combo) {
            case 'page up':
                return this.by(-this.lineHeight * this.viewLines);
            case 'page down':
                return this.by(this.lineHeight * this.viewLines);
            case 'up':
                return this.by(-this.lineHeight);
            case 'down':
                return this.by(this.lineHeight);
            case 'home':
                return this.to(0);
            case 'end':
                return this.to(this.scrollMax);
        }
    };

    Scroll.prototype.onScrollBy = function(delta) {
        return this.by(delta);
    };

    Scroll.prototype.to = function(p) {
        return this.by(p - this.scroll);
    };

    Scroll.prototype.by = function(delta, x) {
        var offset, oldBot, oldTop, scroll, top;
        if (this.viewLines < 0) {
            return;
        }
        oldTop = this.top;
        oldBot = this.bot;
        scroll = this.scroll;
        if (Number.isNaN(delta)) {
            delta = 0;
        }
        this.scroll = parseInt(clamp(0, this.scrollMax, this.scroll + delta));
        top = parseInt(this.scroll / this.lineHeight);
        this.top = Math.max(0, top);
        this.bot = Math.min(this.top + this.viewLines - 1);
        offset = this.scroll - this.top * this.lineHeight;
        if (offset !== this.offsetTop || scroll !== this.scroll) {
            this.offsetTop = offset;
            this.updateOffset();
            return post.emit('scroll', this.scroll, this);
        }
    };

    Scroll.prototype.updateOffset = function() {};

    Scroll.prototype.toBottom = function() {
        console.log("toBottom " + this.scroll + " " + this.scrollMax);
        this.to(this.scrollMax);
        console.log("toBottom emit " + this.scroll);
        return post.emit('scroll', this.scroll, this);
    };

    Scroll.prototype.setNumLines = function(n) {
        if (this.numLines !== n) {
            this.fullHeight = n * this.lineHeight;
            if (n) {
                this.numLines = n;
                return this.calc();
            } else {
                return this.reset();
            }
        }
    };

    Scroll.prototype.setViewHeight = function(h) {
        if (this.viewHeight !== h) {
            this.viewHeight = h;
            return this.calc();
        }
    };

    Scroll.prototype.setLineHeight = function(h) {
        if (this.lineHeight !== h) {
            this.lineHeight = h;
            this.fullHeight = this.numLines * this.lineHeight;
            this.calc();
            post.emit('clearLines');
            return post.emit('showLines', this.top, this.bot, this.bot - this.top + 1);
        }
    };

    return Scroll;

})();

module.exports = Scroll;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/scroll.coffee