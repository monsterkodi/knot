// koffee 1.4.0

/*
000000000   0000000   0000000  
   000     000   000  000   000
   000     000000000  0000000  
   000     000   000  000   000
   000     000   000  0000000
 */
var Tab, elem, klog, kpos, post, prefs, ref, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), slash = ref.slash, prefs = ref.prefs, post = ref.post, klog = ref.klog, kpos = ref.kpos, elem = ref.elem;

Tab = (function() {
    function Tab(tabs, term) {
        this.tabs = tabs;
        this.term = term;
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.div = elem({
            "class": 'tab'
        });
        this.update(slash.tilde(process.cwd()));
        this.tabs.div.appendChild(this.div);
        this.div.addEventListener('mousedown', this.onMouseDown);
        this.div.addEventListener('mouseup', this.onMouseUp);
    }

    Tab.prototype.onMouseDown = function(event) {
        return this.downPos = kpos(window.win.getBounds());
    };

    Tab.prototype.onMouseUp = function(event) {
        var upPos;
        if (!this.downPos) {
            return;
        }
        upPos = kpos(window.win.getBounds());
        if (upPos.to(this.downPos).length() > 0) {
            delete this.downPos;
            return;
        }
        if (event.target.id) {
            this.activate();
            if (!slash.samePath(process.cwd(), event.target.id)) {
                this.term.shell.cd(event.target.id);
            }
        }
        return delete this.downPos;
    };

    Tab.prototype.update = function(text) {
        var i, j, ref1, ref2, s, split;
        this.text = text;
        this.div.innerHTML = '';
        this.div.appendChild(elem('span', {
            "class": 'dot',
            text: '‚óè'
        }));
        if ((ref1 = this.text) === '/' || ref1 === '') {
            this.div.appendChild(elem('span', {
                "class": 'path top',
                text: '/'
            }));
        } else {
            split = slash.split(this.text);
            for (i = j = 0, ref2 = split.length - 1; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
                s = split[i];
                this.div.appendChild(elem('span', {
                    "class": 'path',
                    text: s,
                    id: split.slice(0, +i + 1 || 9e9).join('/')
                }));
                this.div.appendChild(elem('span', {
                    "class": 'path sep',
                    text: '/'
                }));
            }
            this.div.appendChild(elem('span', {
                "class": 'path top',
                text: split.slice(-1)[0],
                id: this.text
            }));
        }
        return this;
    };

    Tab.prototype.index = function() {
        return this.tabs.tabs.indexOf(this);
    };

    Tab.prototype.prev = function() {
        if (this.index() > 0) {
            return this.tabs.tab(this.index() - 1);
        }
    };

    Tab.prototype.next = function() {
        if (this.index() < this.tabs.numTabs() - 1) {
            return this.tabs.tab(this.index() + 1);
        }
    };

    Tab.prototype.nextOrPrev = function() {
        var ref1;
        return (ref1 = this.next()) != null ? ref1 : this.prev();
    };

    Tab.prototype.close = function() {
        return this.div.remove();
    };

    Tab.prototype.activate = function() {
        return this.setActive();
    };

    Tab.prototype.isActive = function() {
        return this.div.classList.contains('active');
    };

    Tab.prototype.setActive = function() {
        var ref1;
        if (!this.isActive()) {
            if ((ref1 = this.tabs.activeTab()) != null) {
                ref1.clearActive();
            }
            this.div.classList.add('active');
            this.term.div.style.zIndex = '10';
            this.term.editor.focus();
        }
        if (!slash.samePath(this.text, process.cwd())) {
            prefs.set('cwd', this.text);
            return process.chdir(slash.untilde(this.text));
        }
    };

    Tab.prototype.clearActive = function() {
        this.div.classList.remove('active');
        return this.term.div.style.zIndex = '0';
    };

    return Tab;

})();

module.exports = Tab;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/tab.coffee