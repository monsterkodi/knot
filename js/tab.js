// koffee 1.12.0

/*
000000000   0000000   0000000  
   000     000   000  000   000
   000     000000000  0000000  
   000     000   000  000   000
   000     000   000  0000000
 */
var Tab, elem, kpos, prefs, ref, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), slash = ref.slash, prefs = ref.prefs, elem = ref.elem, kpos = ref.kpos;

Tab = (function() {
    function Tab(tabs, term) {
        this.tabs = tabs;
        this.term = term;
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.div = elem({
            "class": 'tab'
        });
        this.update(slash.tilde(process.cwd()));
        this.tabs.div.appendChild(this.div);
        this.div.addEventListener('mousedown', this.onMouseDown);
        this.div.addEventListener('mouseup', this.onMouseUp);
    }

    Tab.prototype.onMouseDown = function(event) {
        return this.downPos = kpos(window.win.getBounds());
    };

    Tab.prototype.onMouseUp = function(event) {
        var upPos;
        if (!this.downPos) {
            return;
        }
        upPos = kpos(window.win.getBounds());
        if (upPos.to(this.downPos).length() < 4) {
            if (event.target.id) {
                this.activate();
                if (!slash.samePath(process.cwd(), event.target.id)) {
                    this.term.shell.cd(event.target.id);
                }
            }
        }
        this.term.editor.focus();
        return delete this.downPos;
    };

    Tab.prototype.update = function(text) {
        var i, j, ref1, ref2, s, split;
        this.text = text;
        this.div.innerHTML = '';
        this.div.appendChild(elem('span', {
            "class": 'dot',
            text: '●'
        }));
        if ((ref1 = this.text) === '/' || ref1 === '') {
            this.div.appendChild(elem('span', {
                "class": 'path top',
                text: '/'
            }));
        } else {
            split = slash.split(this.text);
            for (i = j = 0, ref2 = split.length - 1; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
                s = split[i];
                this.div.appendChild(elem('span', {
                    "class": 'path',
                    text: s,
                    id: split.slice(0, +i + 1 || 9e9).join('/')
                }));
                this.div.appendChild(elem('span', {
                    "class": 'path sep',
                    text: '/'
                }));
            }
            this.div.appendChild(elem('span', {
                "class": 'path top',
                text: split.slice(-1)[0],
                id: this.text
            }));
        }
        return this;
    };

    Tab.prototype.index = function() {
        return this.tabs.tabs.indexOf(this);
    };

    Tab.prototype.prev = function() {
        if (this.index() > 0) {
            return this.tabs.tab(this.index() - 1);
        }
    };

    Tab.prototype.next = function() {
        if (this.index() < this.tabs.numTabs() - 1) {
            return this.tabs.tab(this.index() + 1);
        }
    };

    Tab.prototype.nextOrPrev = function() {
        var ref1;
        return (ref1 = this.next()) != null ? ref1 : this.prev();
    };

    Tab.prototype.close = function() {
        return this.div.remove();
    };

    Tab.prototype.activate = function() {
        return this.setActive();
    };

    Tab.prototype.isActive = function() {
        return this.div.classList.contains('active');
    };

    Tab.prototype.setActive = function() {
        var ref1;
        if (!this.isActive()) {
            if ((ref1 = this.tabs.activeTab()) != null) {
                ref1.clearActive();
            }
            this.div.classList.add('active');
            this.term.div.style.zIndex = '10';
            this.term.editor.focus();
        }
        if (!slash.samePath(this.text, process.cwd())) {
            prefs.set('cwd', this.text);
            return process.chdir(slash.untilde(this.text));
        }
    };

    Tab.prototype.clearActive = function() {
        this.div.classList.remove('active');
        return this.term.div.style.zIndex = '0';
    };

    return Tab;

})();

module.exports = Tab;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmpzIiwic291cmNlUm9vdCI6Ii4uL2NvZmZlZSIsInNvdXJjZXMiOlsidGFiLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSxrQ0FBQTtJQUFBOztBQVFBLE1BQStCLE9BQUEsQ0FBUSxLQUFSLENBQS9CLEVBQUUsaUJBQUYsRUFBUyxpQkFBVCxFQUFnQixlQUFoQixFQUFzQjs7QUFFaEI7SUFFQyxhQUFDLElBQUQsRUFBUSxJQUFSO1FBQUMsSUFBQyxDQUFBLE9BQUQ7UUFBTyxJQUFDLENBQUEsT0FBRDs7O1FBRVAsSUFBQyxDQUFBLEdBQUQsR0FBUSxJQUFBLENBQUs7WUFBQSxDQUFBLEtBQUEsQ0FBQSxFQUFNLEtBQU47U0FBTDtRQUNSLElBQUMsQ0FBQSxNQUFELENBQVEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxPQUFPLENBQUMsR0FBUixDQUFBLENBQVosQ0FBUjtRQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVYsQ0FBc0IsSUFBQyxDQUFBLEdBQXZCO1FBRUEsSUFBQyxDQUFBLEdBQUcsQ0FBQyxnQkFBTCxDQUFzQixXQUF0QixFQUFrQyxJQUFDLENBQUEsV0FBbkM7UUFDQSxJQUFDLENBQUEsR0FBRyxDQUFDLGdCQUFMLENBQXNCLFNBQXRCLEVBQWtDLElBQUMsQ0FBQSxTQUFuQztJQVBEOztrQkFlSCxXQUFBLEdBQWEsU0FBQyxLQUFEO2VBRVQsSUFBQyxDQUFBLE9BQUQsR0FBVyxJQUFBLENBQUssTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFYLENBQUEsQ0FBTDtJQUZGOztrQkFJYixTQUFBLEdBQVcsU0FBQyxLQUFEO0FBRVAsWUFBQTtRQUFBLElBQVUsQ0FBSSxJQUFDLENBQUEsT0FBZjtBQUFBLG1CQUFBOztRQUVBLEtBQUEsR0FBUSxJQUFBLENBQUssTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFYLENBQUEsQ0FBTDtRQUVSLElBQUcsS0FBSyxDQUFDLEVBQU4sQ0FBUyxJQUFDLENBQUEsT0FBVixDQUFrQixDQUFDLE1BQW5CLENBQUEsQ0FBQSxHQUE4QixDQUFqQztZQUVJLElBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFoQjtnQkFDSSxJQUFDLENBQUEsUUFBRCxDQUFBO2dCQUNBLElBQUcsQ0FBSSxLQUFLLENBQUMsUUFBTixDQUFlLE9BQU8sQ0FBQyxHQUFSLENBQUEsQ0FBZixFQUE4QixLQUFLLENBQUMsTUFBTSxDQUFDLEVBQTNDLENBQVA7b0JBQ0ksSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBWixDQUFlLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBNUIsRUFESjtpQkFGSjthQUZKOztRQU9BLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQWIsQ0FBQTtlQUNBLE9BQU8sSUFBQyxDQUFBO0lBZEQ7O2tCQXNCWCxNQUFBLEdBQVEsU0FBQyxJQUFEO0FBRUosWUFBQTtRQUZLLElBQUMsQ0FBQSxPQUFEO1FBRUwsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFMLEdBQWlCO1FBQ2pCLElBQUMsQ0FBQSxHQUFHLENBQUMsV0FBTCxDQUFpQixJQUFBLENBQUssTUFBTCxFQUFZO1lBQUEsQ0FBQSxLQUFBLENBQUEsRUFBTSxLQUFOO1lBQVksSUFBQSxFQUFLLEdBQWpCO1NBQVosQ0FBakI7UUFFQSxZQUFHLElBQUMsQ0FBQSxLQUFELEtBQVUsR0FBVixJQUFBLElBQUEsS0FBYyxFQUFqQjtZQUNJLElBQUMsQ0FBQSxHQUFHLENBQUMsV0FBTCxDQUFpQixJQUFBLENBQUssTUFBTCxFQUFZO2dCQUFBLENBQUEsS0FBQSxDQUFBLEVBQU0sVUFBTjtnQkFBaUIsSUFBQSxFQUFLLEdBQXRCO2FBQVosQ0FBakIsRUFESjtTQUFBLE1BQUE7WUFHSSxLQUFBLEdBQVEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFDLENBQUEsSUFBYjtBQUNSLGlCQUFTLDhGQUFUO2dCQUNJLENBQUEsR0FBSSxLQUFNLENBQUEsQ0FBQTtnQkFDVixJQUFDLENBQUEsR0FBRyxDQUFDLFdBQUwsQ0FBaUIsSUFBQSxDQUFLLE1BQUwsRUFBWTtvQkFBQSxDQUFBLEtBQUEsQ0FBQSxFQUFNLE1BQU47b0JBQWEsSUFBQSxFQUFLLENBQWxCO29CQUFxQixFQUFBLEVBQUcsS0FBTSx3QkFBSyxDQUFDLElBQVosQ0FBaUIsR0FBakIsQ0FBeEI7aUJBQVosQ0FBakI7Z0JBQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxXQUFMLENBQWlCLElBQUEsQ0FBSyxNQUFMLEVBQVk7b0JBQUEsQ0FBQSxLQUFBLENBQUEsRUFBTSxVQUFOO29CQUFpQixJQUFBLEVBQUssR0FBdEI7aUJBQVosQ0FBakI7QUFISjtZQUlBLElBQUMsQ0FBQSxHQUFHLENBQUMsV0FBTCxDQUFpQixJQUFBLENBQUssTUFBTCxFQUFZO2dCQUFBLENBQUEsS0FBQSxDQUFBLEVBQU0sVUFBTjtnQkFBaUIsSUFBQSxFQUFLLEtBQU0sVUFBRSxDQUFBLENBQUEsQ0FBOUI7Z0JBQWlDLEVBQUEsRUFBRyxJQUFDLENBQUEsSUFBckM7YUFBWixDQUFqQixFQVJKOztlQVNBO0lBZEk7O2tCQWdCUixLQUFBLEdBQU8sU0FBQTtlQUFHLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQVgsQ0FBbUIsSUFBbkI7SUFBSDs7a0JBQ1AsSUFBQSxHQUFPLFNBQUE7UUFBRyxJQUF3QixJQUFDLENBQUEsS0FBRCxDQUFBLENBQUEsR0FBVyxDQUFuQzttQkFBQSxJQUFDLENBQUEsSUFBSSxDQUFDLEdBQU4sQ0FBVSxJQUFDLENBQUEsS0FBRCxDQUFBLENBQUEsR0FBUyxDQUFuQixFQUFBOztJQUFIOztrQkFDUCxJQUFBLEdBQU8sU0FBQTtRQUFHLElBQXdCLElBQUMsQ0FBQSxLQUFELENBQUEsQ0FBQSxHQUFXLElBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTixDQUFBLENBQUEsR0FBZ0IsQ0FBbkQ7bUJBQUEsSUFBQyxDQUFBLElBQUksQ0FBQyxHQUFOLENBQVUsSUFBQyxDQUFBLEtBQUQsQ0FBQSxDQUFBLEdBQVMsQ0FBbkIsRUFBQTs7SUFBSDs7a0JBQ1AsVUFBQSxHQUFZLFNBQUE7QUFBRyxZQUFBO3FEQUFVLElBQUMsQ0FBQSxJQUFELENBQUE7SUFBYjs7a0JBRVosS0FBQSxHQUFPLFNBQUE7ZUFBRyxJQUFDLENBQUEsR0FBRyxDQUFDLE1BQUwsQ0FBQTtJQUFIOztrQkFRUCxRQUFBLEdBQVUsU0FBQTtlQUVOLElBQUMsQ0FBQSxTQUFELENBQUE7SUFGTTs7a0JBSVYsUUFBQSxHQUFVLFNBQUE7ZUFBRyxJQUFDLENBQUEsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFmLENBQXdCLFFBQXhCO0lBQUg7O2tCQUVWLFNBQUEsR0FBVyxTQUFBO0FBRVAsWUFBQTtRQUFBLElBQUcsQ0FBSSxJQUFDLENBQUEsUUFBRCxDQUFBLENBQVA7O29CQUNxQixDQUFFLFdBQW5CLENBQUE7O1lBQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBZixDQUFtQixRQUFuQjtZQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFoQixHQUF5QjtZQUN6QixJQUFDLENBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFiLENBQUEsRUFKSjs7UUFNQSxJQUFHLENBQUksS0FBSyxDQUFDLFFBQU4sQ0FBZSxJQUFDLENBQUEsSUFBaEIsRUFBc0IsT0FBTyxDQUFDLEdBQVIsQ0FBQSxDQUF0QixDQUFQO1lBQ0ksS0FBSyxDQUFDLEdBQU4sQ0FBVSxLQUFWLEVBQWdCLElBQUMsQ0FBQSxJQUFqQjttQkFDQSxPQUFPLENBQUMsS0FBUixDQUFjLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBQyxDQUFBLElBQWYsQ0FBZCxFQUZKOztJQVJPOztrQkFZWCxXQUFBLEdBQWEsU0FBQTtRQUVULElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQWYsQ0FBc0IsUUFBdEI7ZUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBaEIsR0FBeUI7SUFIaEI7Ozs7OztBQUtqQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgIFxuICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgMDAwICAgICAwMDAwMDAwMDAgIDAwMDAwMDAgIFxuICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgMDAwICAgICAwMDAgICAwMDAgIDAwMDAwMDAgIFxuIyMjXG5cbnsgc2xhc2gsIHByZWZzLCBlbGVtLCBrcG9zIH0gPSByZXF1aXJlICdreGsnXG5cbmNsYXNzIFRhYlxuICAgIFxuICAgIEA6IChAdGFicywgQHRlcm0pIC0+XG4gICAgICAgIFxuICAgICAgICBAZGl2ICA9IGVsZW0gY2xhc3M6J3RhYicgXG4gICAgICAgIEB1cGRhdGUgc2xhc2gudGlsZGUgcHJvY2Vzcy5jd2QoKVxuICAgICAgICBAdGFicy5kaXYuYXBwZW5kQ2hpbGQgQGRpdlxuXG4gICAgICAgIEBkaXYuYWRkRXZlbnRMaXN0ZW5lciAnbW91c2Vkb3duJyBAb25Nb3VzZURvd25cbiAgICAgICAgQGRpdi5hZGRFdmVudExpc3RlbmVyICdtb3VzZXVwJyAgIEBvbk1vdXNlVXBcblxuICAgICMgMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgIFxuICAgICMgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgXG4gICAgXG4gICAgb25Nb3VzZURvd246IChldmVudCkgPT5cbiAgICAgICAgXG4gICAgICAgIEBkb3duUG9zID0ga3BvcyB3aW5kb3cud2luLmdldEJvdW5kcygpXG4gICAgICAgICAgICBcbiAgICBvbk1vdXNlVXA6IChldmVudCkgPT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgQGRvd25Qb3NcbiAgICAgICAgXG4gICAgICAgIHVwUG9zID0ga3BvcyB3aW5kb3cud2luLmdldEJvdW5kcygpXG4gICAgICAgIFxuICAgICAgICBpZiB1cFBvcy50byhAZG93blBvcykubGVuZ3RoKCkgPCA0XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgZXZlbnQudGFyZ2V0LmlkXG4gICAgICAgICAgICAgICAgQGFjdGl2YXRlKClcbiAgICAgICAgICAgICAgICBpZiBub3Qgc2xhc2guc2FtZVBhdGggcHJvY2Vzcy5jd2QoKSwgZXZlbnQudGFyZ2V0LmlkXG4gICAgICAgICAgICAgICAgICAgIEB0ZXJtLnNoZWxsLmNkIGV2ZW50LnRhcmdldC5pZFxuICAgICAgICAgICAgICAgIFxuICAgICAgICBAdGVybS5lZGl0b3IuZm9jdXMoKVxuICAgICAgICBkZWxldGUgQGRvd25Qb3NcbiAgICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAgICAgICAgIDAwMDAwMDAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICBcbiAgICBcbiAgICB1cGRhdGU6IChAdGV4dCkgLT5cbiAgICAgICAgICAgIFxuICAgICAgICBAZGl2LmlubmVySFRNTCA9ICcnXG4gICAgICAgIEBkaXYuYXBwZW5kQ2hpbGQgZWxlbSAnc3BhbicgY2xhc3M6J2RvdCcgdGV4dDon4pePJ1xuICAgICAgICBcbiAgICAgICAgaWYgQHRleHQgaW4gWycvJyAnJ11cbiAgICAgICAgICAgIEBkaXYuYXBwZW5kQ2hpbGQgZWxlbSAnc3BhbicgY2xhc3M6J3BhdGggdG9wJyB0ZXh0OicvJ1xuICAgICAgICBlbHNlICAgICAgICAgICAgXG4gICAgICAgICAgICBzcGxpdCA9IHNsYXNoLnNwbGl0IEB0ZXh0XG4gICAgICAgICAgICBmb3IgaSBpbiBbMC4uLnNwbGl0Lmxlbmd0aC0xXVxuICAgICAgICAgICAgICAgIHMgPSBzcGxpdFtpXVxuICAgICAgICAgICAgICAgIEBkaXYuYXBwZW5kQ2hpbGQgZWxlbSAnc3BhbicgY2xhc3M6J3BhdGgnIHRleHQ6cywgaWQ6c3BsaXRbMC4uaV0uam9pbiAnLydcbiAgICAgICAgICAgICAgICBAZGl2LmFwcGVuZENoaWxkIGVsZW0gJ3NwYW4nIGNsYXNzOidwYXRoIHNlcCcgdGV4dDonLydcbiAgICAgICAgICAgIEBkaXYuYXBwZW5kQ2hpbGQgZWxlbSAnc3BhbicgY2xhc3M6J3BhdGggdG9wJyB0ZXh0OnNwbGl0Wy0xXSwgaWQ6QHRleHRcbiAgICAgICAgQFxuXG4gICAgaW5kZXg6IC0+IEB0YWJzLnRhYnMuaW5kZXhPZiBAXG4gICAgcHJldjogIC0+IEB0YWJzLnRhYiBAaW5kZXgoKS0xIGlmIEBpbmRleCgpID4gMFxuICAgIG5leHQ6ICAtPiBAdGFicy50YWIgQGluZGV4KCkrMSBpZiBAaW5kZXgoKSA8IEB0YWJzLm51bVRhYnMoKS0xXG4gICAgbmV4dE9yUHJldjogLT4gQG5leHQoKSA/IEBwcmV2KClcbiAgICBcbiAgICBjbG9zZTogLT4gQGRpdi5yZW1vdmUoKVxuICAgIFxuICAgICMgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAwMDAgICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgMCAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMCAgXG4gICAgXG4gICAgYWN0aXZhdGU6IC0+XG4gICAgICAgIFxuICAgICAgICBAc2V0QWN0aXZlKClcblxuICAgIGlzQWN0aXZlOiAtPiBAZGl2LmNsYXNzTGlzdC5jb250YWlucyAnYWN0aXZlJ1xuICAgIFxuICAgIHNldEFjdGl2ZTogLT4gXG4gICAgICAgIFxuICAgICAgICBpZiBub3QgQGlzQWN0aXZlKClcbiAgICAgICAgICAgIEB0YWJzLmFjdGl2ZVRhYigpPy5jbGVhckFjdGl2ZSgpXG4gICAgICAgICAgICBAZGl2LmNsYXNzTGlzdC5hZGQgJ2FjdGl2ZSdcbiAgICAgICAgICAgIEB0ZXJtLmRpdi5zdHlsZS56SW5kZXggPSAnMTAnXG4gICAgICAgICAgICBAdGVybS5lZGl0b3IuZm9jdXMoKVxuICAgICAgICAgICAgXG4gICAgICAgIGlmIG5vdCBzbGFzaC5zYW1lUGF0aCBAdGV4dCwgcHJvY2Vzcy5jd2QoKVxuICAgICAgICAgICAgcHJlZnMuc2V0ICdjd2QnIEB0ZXh0XG4gICAgICAgICAgICBwcm9jZXNzLmNoZGlyIHNsYXNoLnVudGlsZGUgQHRleHRcbiAgICAgICAgICAgIFxuICAgIGNsZWFyQWN0aXZlOiAtPlxuICAgICAgICBcbiAgICAgICAgQGRpdi5jbGFzc0xpc3QucmVtb3ZlICdhY3RpdmUnXG4gICAgICAgIEB0ZXJtLmRpdi5zdHlsZS56SW5kZXggPSAnMCdcbiAgICAgICAgXG5tb2R1bGUuZXhwb3J0cyA9IFRhYlxuIl19
//# sourceURL=../coffee/tab.coffee