
/*
00000000    0000000   00000000    0000000  00000000
000   000  000   000  000   000  000       000     
00000000   000000000  0000000    0000000   0000000 
000        000   000  000   000       000  000     
000        000   000  000   000  0000000   00000000
 */
var Attr, Mode, Parse, clamp, defAttr, empty, log, ref, slash, str, valid,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ref = require('kxk'), clamp = ref.clamp, empty = ref.empty, valid = ref.valid, slash = ref.slash, str = ref.str, log = ref.log;

Attr = require('./attr');

Mode = require('./mode');

defAttr = (257 << 9) | 256;

Parse = (function() {
  function Parse(buffer1) {
    this.buffer = buffer1;
  }

  Parse.parse = function(data, buffer) {
    var parser;
    parser = new Parse(buffer);
    parser.parseData(data);
    return buffer;
  };

  Parse.prototype.parseData = function(data) {
    var ch, col, i, j, k, l, m, p, ref1, ref2, ref3, ref4, ref5, ref6, row;
    if (empty(data)) {
      return;
    }
    this.buffer.changed = new Set();
    ch = null;
    for (i = k = 0, ref1 = data.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
      this.buffer.lch = ch;
      ch = data[i];
      switch (this.buffer.state) {
        case 0:
          switch (ch) {
            case '\n':
            case '\x0b':
            case '\x0c':
              if (this.buffer.ignoreNextNewline) {
                delete this.buffer.ignoreNextNewline;
                continue;
              }
              this.buffer.y += 1;
              if (this.buffer.y >= this.buffer.lines.length) {
                this.buffer.lines.push([]);
                this.buffer.changed.add(this.buffer.y);
              }
              this.buffer.x = 0;
              break;
            case '\r':
              this.buffer.x = 0;
              break;
            case '\x1b':
              this.buffer.state = 1;
              break;
            case '\x08':
              if (this.buffer.x > 0) {
                this.buffer.x--;
              }
              break;
            case '\x07':
              log('bell!');
              break;
            case '\t':
              this.buffer.x = this.nextStop();
              break;
            default:
              if (ch === '⏎') {
                if (slash.win()) {
                  this.buffer.ignoreNextNewline = true;
                }
              }
              if (this.buffer.x >= this.buffer.cols) {
                this.buffer.x = 0;
                this.buffer.y++;
                if (this.buffer.y >= this.buffer.lines.length) {
                  this.buffer.lines.push([]);
                }
              }
              if (!this.buffer.lines[this.buffer.y]) {
                log("dafuk? ch:" + ch + " y:" + this.buffer.y + " lines:" + this.buffer.lines.length);
                return;
              }
              if (this.buffer.x <= this.buffer.lines[this.buffer.y].length - 1) {
                this.buffer.lines[this.buffer.y][this.buffer.x] = [this.buffer.attr, ch];
              } else {
                this.buffer.lines[this.buffer.y].push([this.buffer.attr, ch]);
              }
              this.buffer.changed.add(this.buffer.y);
              this.buffer.x++;
          }
          break;
        case 1:
          switch (ch) {
            case '[':
              this.buffer.currentParam = 0;
              this.buffer.params = [];
              this.buffer.state = 2;
              break;
            case ']':
              this.buffer.params = [];
              this.buffer.currentParam = 0;
              this.buffer.state = 3;
              break;
            case 'c':
              this.buffer.reset();
              break;
            case '7':
              this.buffer.saveCursor();
              this.buffer.state = 0;
              break;
            case '8':
              this.buffer.restoreCursor();
              this.buffer.state = 0;
              break;
            default:
              log("unhandled ESC '" + ch + "' ");
          }
          break;
        case 2:
          if (indexOf.call('?>!', ch) >= 0) {
            this.buffer.prefix = ch;
          } else if (('0' <= ch && ch <= '9')) {
            this.buffer.currentParam = this.buffer.currentParam * 10 + ch.charCodeAt(0) - 48;
          } else if (indexOf.call('$" \'', ch) >= 0) {
            this.buffer.postfix = ch;
          } else {
            this.buffer.params.push(this.buffer.currentParam);
            this.buffer.currentParam = 0;
            if (ch !== ';') {
              this.buffer.state = 0;
            }
            switch (ch) {
              case 'A':
                this.buffer.y = clamp(0, this.buffer.rows - 1, this.buffer.y - Math.max(1, this.buffer.params[0]));
                break;
              case 'B':
                this.buffer.y = clamp(0, this.buffer.rows - 1, this.buffer.y + Math.max(1, this.buffer.params[0]));
                break;
              case 'C':
                this.buffer.x = clamp(0, this.buffer.cols - 1, this.buffer.x + Math.max(1, this.buffer.params[0]));
                break;
              case 'D':
                this.buffer.x = clamp(0, this.buffer.cols - 1, this.buffer.x - Math.max(1, this.buffer.params[0]));
                break;
              case 'E':
                this.buffer.y = this.buffer.y = clamp(0, this.buffer.rows - 1, this.buffer.y + Math.max(1, this.buffer.params[0]));
                this.buffer.x = 0;
                break;
              case 'F':
                this.buffer.y = this.buffer.y = clamp(0, this.buffer.rows - 1, this.buffer.y - Math.max(1, this.buffer.params[0]));
                this.buffer.x = 0;
                break;
              case 'G':
                this.buffer.x = Math.max(0, this.buffer.params[0] - 1);
                break;
              case 'H':
                row = this.buffer.params[0] - 1;
                if (this.buffer.params.length >= 2) {
                  col = this.buffer.params[1] - 1;
                } else {
                  col = 0;
                }
                col = clamp(0, this.buffer.cols - 1, col);
                row = clamp(0, this.buffer.rows - 1, row);
                this.buffer.x = col;
                this.buffer.y = row;
                while (this.buffer.y >= this.buffer.lines.length) {
                  this.buffer.lines.push([]);
                }
                break;
              case 'J':
                switch (this.buffer.params[0]) {
                  case 0:
                    this.eraseRight(this.buffer.x, this.buffer.y);
                    for (j = l = ref2 = this.buffer.y + 1, ref3 = this.buffer.rows; ref2 <= ref3 ? l < ref3 : l > ref3; j = ref2 <= ref3 ? ++l : --l) {
                      this.eraseLine(j);
                    }
                    break;
                  case 1:
                    this.eraseLeft(this.buffer.x, this.buffer.y);
                    for (j = m = ref4 = this.buffer.y - 1; ref4 <= 0 ? m <= 0 : m >= 0; j = ref4 <= 0 ? ++m : --m) {
                      this.eraseLine(j);
                    }
                    break;
                  case 2:
                    log('CLEAR SCREEN');
                    this.buffer.reset();
                }
                break;
              case 'K':
                switch (this.buffer.params[0]) {
                  case 0:
                    this.eraseRight(this.buffer.x, this.buffer.y);
                    break;
                  case 1:
                    this.eraseLeft(this.buffer.x, this.buffer.y);
                    break;
                  case 2:
                    this.eraseLine(this.buffer.y);
                }
                break;
              case 'M':
                p = this.buffer.params[0];
                if (p < 1) {
                  p = 1;
                }
                row = this.buffer.y + this.buffer.ybase;
                j = this.buffer.rows - 1 - this.buffer.scrollBottom;
                j = this.buffer.rows - 1 + this.buffer.ybase - j;
                while (p--) {
                  this.buffer.lines.splice(j + 1, 0, this.blankLine(true));
                  this.buffer.lines.splice(row, 1);
                }
                this.buffer.updateRange(this.buffer.y);
                this.buffer.updateRange(this.buffer.scrollBottom);
                break;
              case 'P':
                p = this.buffer.params[0];
                if (p < 1) {
                  p = 1;
                }
                row = this.buffer.y + this.buffer.ybase;
                ch = [this.eraseAttr(), ' '];
                while (p--) {
                  this.buffer.lines[row].splice(this.buffer.x, 1);
                  this.buffer.lines[row].push(ch);
                }
                break;
              case 'X':
                p = this.buffer.params[0];
                if (p < 1) {
                  p = 1;
                }
                row = this.buffer.y + this.buffer.ybase;
                j = this.buffer.x;
                ch = [this.eraseAttr(), ' '];
                while (p-- && j < this.buffer.cols) {
                  this.buffer.lines[row][j++] = ch;
                }
                break;
              case 'c':
                this.sendDeviceAttributes();
                break;
              case 'm':
                if (empty(this.buffer.prefix)) {
                  this.buffer.attr = Attr.set(this.buffer.params, this.buffer.attr);
                }
                break;
              case 'h':
                Mode.set(this.buffer, this.buffer.params);
                break;
              case 'l':
                Mode.reset(this.buffer, this.buffer.params);
                break;
              case 'n':
                if (!this.buffer.prefix) {
                  switch (this.buffer.params[0]) {
                    case 5:
                      this.send('\x1b[0n');
                      break;
                    case 6:
                      log('cursor', this.buffer.y + 1, this.buffer.x + 1);
                      this.send('\x1b[' + (this.buffer.y + 1) + ';' + (this.buffer.x + 1) + 'R');
                      break;
                    default:
                      log("unhandled CSI status report: '" + this.buffer.params[0] + "'");
                  }
                } else {
                  log("unhandled CSI status report with prefix: '" + this.buffer.prefix + "'");
                }
                break;
              case '@':
                this.insertChars(this.buffer.params);
                break;
              case 'r':
                if (empty(this.buffer.prefix)) {
                  this.buffer.top = ((ref5 = this.buffer.params[0]) != null ? ref5 : 1) - 1;
                  this.buffer.bot = ((ref6 = this.buffer.params[1]) != null ? ref6 : this.buffer.rows) - 1;
                  log("scroll region " + this.buffer.top + " " + this.buffer.bot);
                  this.buffer.x = 0;
                  this.buffer.y = 0;
                }
                break;
              case ';':
                break;
              default:
                log("unhandled CSI character: '" + ch + "'");
            }
          }
          this.buffer.prefix = '';
          this.buffer.postfix = '';
          break;
        case 3:
          if ((this.buffer.lch === '\x1b' && ch === '\\') || ch === '\x07') {
            if (this.buffer.lch === '\x1b') {
              if (typeof this.buffer.currentParam === 'string') {
                this.buffer.currentParam = this.buffer.currentParam.slice(0, -1);
              } else if (typeof this.buffer.currentParam === 'number') {
                this.buffer.currentParam = (this.buffer.currentParam - ('\x1b'.charCodeAt(0) - 48)) / 10;
              }
            }
            this.buffer.params.push(this.buffer.currentParam);
            if (this.buffer.params[0] === 0 && valid(this.buffer.params[1])) {
              if (!process.env.HOME) {
                process.env.HOME = slash.path(process.env.HOMEDRIVE + process.env.HOMEPATH);
              }
              this.buffer.title = slash.tilde(this.buffer.params[1].replace('/c/', 'C:/'));
            }
            this.buffer.params = [];
            this.buffer.currentParam = 0;
            this.buffer.state = 0;
          } else {
            if (empty(this.buffer.params)) {
              if (('0' <= ch && ch <= '9')) {
                this.buffer.currentParam = this.buffer.currentParam * 10 + ch.charCodeAt(0) - 48;
              } else if (ch === ';') {
                this.buffer.params.push(this.buffer.currentParam);
                this.buffer.currentParam = '';
              } else {
                this.buffer.currentParam += ch;
              }
            } else {
              this.buffer.currentParam += ch;
            }
          }
      }
    }
  };

  Parse.prototype.eraseAttr = function() {
    return (defAttr & ~0x1ff) | (this.buffer.attr & 0x1ff);
  };

  Parse.prototype.eraseLine = function(y) {
    return this.eraseRight(0, y);
  };

  Parse.prototype.eraseRight = function(x, y) {
    var line;
    line = this.buffer.lines[y];
    if (line != null) {
      this.buffer.changed.add(y);
      return line.splice(x, line.length);
    }
  };

  Parse.prototype.eraseLeft = function(x, y) {
    var ch, i, k, line, ref1, results;
    log("erase ---- left " + y + " from col " + x);
    line = this.buffer.lines[y];
    ch = [this.eraseAttr(), ' '];
    this.buffer.x++;
    this.buffer.changed.add(y);
    results = [];
    for (i = k = ref1 = x; ref1 <= 0 ? k <= 0 : k >= 0; i = ref1 <= 0 ? ++k : --k) {
      results.push(line[x] = ch);
    }
    return results;
  };

  Parse.prototype.nextStop = function() {
    while (this.buffer.x % 4 !== 0) {
      this.buffer.x += 1;
    }
    return clamp(0, this.buffer.cols - 1, this.buffer.x);
  };

  Parse.prototype.send = function(data) {
    return window.term.shell.write(data);
  };

  Parse.prototype.sendDeviceAttributes = function() {
    log("device attributes " + this.buffer.params[0]);
    if (this.buffer.params[0] > 0) {
      return;
    }
    if (empty(this.buffer.prefix)) {
      return this.send('\x1b[?1;2c');
    } else if (this.buffer.prefix === '>') {
      return this.send('\x1b[>0;276;0c');
    }
  };

  Parse.prototype.blankLine = function(cur) {
    var attr, ch, i, k, line, ref1;
    attr = cur && this.eraseAttr() || defAttr;
    ch = [attr, ' '];
    line = [];
    for (i = k = 0, ref1 = this.buffer.cols; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
      line[i] = ch;
    }
    return line;
  };

  Parse.prototype.dump = function(msg) {
    return log('---------------', msg, this.buffer, "\nprefix '" + this.buffer.prefix + "' postfix '" + this.buffer.postfix + "'", "\nparam " + this.buffer.currentParam + " params " + this.buffer.params.length, this.buffer.params, '\n---------------');
  };

  return Parse;

})();

module.exports = Parse.parse;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/parse.coffee