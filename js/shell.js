// koffee 1.4.0

/*
 0000000  000   000  00000000  000      000    
000       000   000  000       000      000    
0000000   000000000  0000000   000      000    
     000  000   000  000       000      000    
0000000   000   000  00000000  0000000  0000000
 */
var Alias, Chdir, History, Shell, _, args, childp, empty, history, klog, os, post, psTree, ref, slash, valid, wxw,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf;

ref = require('kxk'), post = ref.post, history = ref.history, childp = ref.childp, slash = ref.slash, valid = ref.valid, empty = ref.empty, args = ref.args, os = ref.os, klog = ref.klog, _ = ref._;

History = require('./history');

Alias = require('./alias');

Chdir = require('./chdir');

psTree = require('ps-tree');

wxw = require('wxw');

Shell = (function() {
    function Shell(term) {
        this.term = term;
        this.onStdErr = bind(this.onStdErr, this);
        this.onStdOut = bind(this.onStdOut, this);
        this.dequeue = bind(this.dequeue, this);
        this.onDone = bind(this.onDone, this);
        this.onExit = bind(this.onExit, this);
        this.shellCmd = bind(this.shellCmd, this);
        this.executeCmd = bind(this.executeCmd, this);
        this.execute = bind(this.execute, this);
        this.cd = bind(this.cd, this);
        this.editor = this.term.editor;
        this.alias = new Alias(this);
        this.chdir = new Chdir(this);
        this.queue = [];
        this.inputQueue = [];
        this.initPath();
    }

    Shell.prototype.initPath = function() {
        var a, binDir, exeDir, f, j, k, len, len1, pth, ref1, ref2, sep;
        sep = ';';
        if (os.platform() !== 'win32') {
            sep = ':';
        }
        pth = process.env.PATH.split(sep).map(function(s) {
            return slash.path(s);
        });
        ref1 = ['node_modules/.bin', 'bin', '.'];
        for (j = 0, len = ref1.length; j < len; j++) {
            a = ref1[j];
            if (indexOf.call(pth, a) < 0) {
                pth.unshift(a);
            }
        }
        if (slash.isDir('~/s')) {
            ref2 = slash.list('~/s');
            for (k = 0, len1 = ref2.length; k < len1; k++) {
                f = ref2[k];
                if (f.type === 'dir') {
                    exeDir = slash.join(f.file, f.name + "-" + process.platform + "-" + process.arch);
                    if (slash.isDir(exeDir)) {
                        pth.unshift(exeDir);
                        continue;
                    }
                    binDir = slash.join(f.file, "bin");
                    if (slash.isDir(binDir)) {
                        pth.unshift(binDir);
                    }
                }
            }
        }
        return process.env.PATH = pth.map(function(s) {
            return slash.unslash(s);
        }).join(sep);
    };

    Shell.prototype.cd = function(dir) {
        if (!slash.samePath(dir, process.cwd())) {
            this.executeCmd('cd ' + dir);
            return this.editor.focus();
        }
    };

    Shell.prototype.substitute = function(cmd) {
        cmd = this.alias.substitute(cmd);
        cmd = cmd.replace(/\~/g, slash.home());
        return cmd;
    };

    Shell.prototype.execute = function(arg1) {
        var fallback, hsub, ref1, ref2;
        this.cmd = (ref1 = arg1.cmd) != null ? ref1 : null, fallback = (ref2 = arg1.fallback) != null ? ref2 : null;
        if (this.cmd != null) {
            this.cmd;
        } else {
            this.cmd = this.editor.lastLine();
        }
        this.cmd = this.cmd.trim();
        if (this.cmd === '.' && valid(fallback)) {
            this.cmd = fallback;
        }
        if (this.child) {
            this.inputQueue.push(this.cmd);
            this.editor.setInputText('');
            return;
        }
        this.errorText = '';
        if (this.cmd !== (hsub = History.substitute(this.cmd))) {
            this.cmd = hsub;
            this.editor.setInputText(this.cmd);
        }
        this.editor.appendText('');
        this.editor.singleCursorAtEnd();
        if (empty(this.cmd)) {
            this.term.moveInputMeta();
            return;
        }
        this.term.history.shellCmd(this.cmd);
        this.last = {
            cmd: this.cmd,
            cwd: slash.tilde(process.cwd()),
            meta: this.term.insertCmdMeta(this.editor.numLines() - 2, this.cmd)
        };
        if (fallback) {
            this.last.fallback = fallback;
        }
        return this.executeCmd(this.substitute(this.cmd));
    };

    Shell.prototype.executeCmd = function(cmd1) {
        var split;
        this.cmd = cmd1;
        split = this.cmd.split('&&');
        if (split.length > 1) {
            this.cmd = split[0].trim();
            this.queue = this.queue.concat(split.slice(1));
        } else {
            this.cmd = this.cmd.trim();
        }
        if (empty(this.cmd)) {
            this.dequeue();
            return true;
        }
        if (this.alias.onCommand(this.cmd)) {
            this.dequeue();
            return true;
        }
        if (this.chdir.onCommand(this.cmd)) {
            this.dequeue();
            return true;
        }
        return this.shellCmd(this.cmd);
    };

    Shell.prototype.shellCmd = function(cmd1) {
        this.cmd = cmd1;
        process.env.LINES = this.editor.scroll.fullLines;
        process.env.COLUMNS = parseInt(this.editor.layersWidth / this.editor.size.charWidth);
        this.child = childp.exec(this.cmd, {
            shell: 'bash',
            env: process.env,
            cwd: process.cwd()
        });
        this.child.stdout.on('data', this.onStdOut);
        this.child.stderr.on('data', this.onStdErr);
        this.child.on('close', this.onExit);
        return true;
    };

    Shell.prototype.handleCancel = function() {
        this.queue = [];
        this.inputQueue = [];
        if (!this.child) {
            return 'unhandled';
        }
        psTree(this.child.pid, (function(_this) {
            return function(err, children) {
                var arg, j, len, results;
                args = children.map(function(p) {
                    return p.PID;
                });
                args.unshift(_this.child.pid);
                args.reverse();
                _this.child.kill();
                results = [];
                for (j = 0, len = args.length; j < len; j++) {
                    arg = args[j];
                    results.push(wxw('terminate', arg));
                }
                return results;
            };
        })(this));
        return true;
    };

    Shell.prototype.onExit = function(code) {
        var killed;
        killed = this.child.killed;
        delete this.child;
        if (code === 0 || killed) {
            return setImmediate(this.onDone);
        } else if (this.fallback()) {
            return this.dequeue();
        } else {
            this.term.failMeta(this.last.meta);
            if (!/is not recognized/.test(this.errorText)) {
                this.editor.appendOutput('\n' + this.errorText);
            }
            return this.dequeue('fail');
        }
    };

    Shell.prototype.fallback = function() {
        if (this.last.fallback) {
            klog('fallback', this.last.fallback);
            this.enqueue({
                cmd: this.last.fallback,
                update: true
            });
            delete this.last.fallback;
            return true;
        }
    };

    Shell.prototype.onDone = function(lastCode) {
        var info, ref1;
        if (lastCode !== 'fail') {
            if (((ref1 = this.last) != null ? ref1.meta : void 0) != null) {
                info = _.clone(this.last);
                delete info.meta;
                post.emit('cmd', info);
                this.term.succMeta(this.last.meta);
            }
        }
        if (empty(this.queue) && empty(this.inputQueue)) {
            return this.term.pwd();
        } else {
            return this.dequeue();
        }
    };

    Shell.prototype.enqueue = function(arg1) {
        var alias, cmd, front, ref1, ref2, ref3, ref4, update;
        cmd = (ref1 = arg1.cmd) != null ? ref1 : '', front = (ref2 = arg1.front) != null ? ref2 : false, update = (ref3 = arg1.update) != null ? ref3 : false, alias = (ref4 = arg1.alias) != null ? ref4 : false;
        if (update) {
            this.last.orig = this.last.cmd;
            this.last.cmd = cmd;
            if (this.last.meta) {
                this.editor.replaceTextInLine(this.last.meta[0], cmd);
                this.editor.meta.update(this.last.meta);
            }
        }
        if (alias) {
            this.last.alias = cmd;
        }
        cmd = cmd.replace(/\~/g, slash.home());
        if (front) {
            this.queue.unshift(cmd);
        } else {
            this.queue.push(cmd);
        }
        return cmd;
    };

    Shell.prototype.dequeue = function(lastCode) {
        var cmd;
        if (this.queue.length) {
            return this.executeCmd(this.queue.shift());
        } else if (this.inputQueue.length) {
            cmd = this.inputQueue.shift();
            this.editor.setInputText(cmd);
            return this.execute(cmd);
        } else {
            return this.onDone(lastCode);
        }
    };

    Shell.prototype.onStdOut = function(data) {
        if (data.slice(-1)[0] === '\n') {
            data = data.slice(0, +(data.length - 2) + 1 || 9e9);
        }
        this.editor.appendOutput(data);
        return this.editor.singleCursorAtEnd();
    };

    Shell.prototype.onStdErr = function(data) {
        var c, i, path;
        if (data.startsWith('\x1b]0;')) {
            klog('bash prompt');
            data = data.slice(4);
            i = 0;
            c = data[0];
            path = '';
            while (c !== '\x07') {
                path += c;
                c = data[i++];
            }
            klog('path', path);
            return this.editor.appendOutput(data.slice(i));
        } else {
            return this.errorText += data;
        }
    };

    return Shell;

})();

module.exports = Shell;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/shell.coffee