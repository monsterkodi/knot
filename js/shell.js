// koffee 1.4.0

/*
 0000000  000   000  00000000  000      000    
000       000   000  000       000      000    
0000000   000000000  0000000   000      000    
     000  000   000  000       000      000    
0000000   000   000  00000000  0000000  0000000
 */
var Alias, Chdir, History, Paths, Shell, _, args, childp, empty, history, klog, post, psTree, ref, slash, valid, wxw,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), _ = ref._, args = ref.args, childp = ref.childp, empty = ref.empty, history = ref.history, klog = ref.klog, post = ref.post, slash = ref.slash, valid = ref.valid;

History = require('./history');

Alias = require('./alias');

Chdir = require('./chdir');

Paths = require('./paths');

psTree = require('ps-tree');

wxw = require('wxw');

Shell = (function() {
    function Shell(term) {
        this.term = term;
        this.onStdErr = bind(this.onStdErr, this);
        this.onStdOut = bind(this.onStdOut, this);
        this.dequeue = bind(this.dequeue, this);
        this.onDone = bind(this.onDone, this);
        this.onExit = bind(this.onExit, this);
        this.shellCmd = bind(this.shellCmd, this);
        this.executeCmd = bind(this.executeCmd, this);
        this.execute = bind(this.execute, this);
        this.cd = bind(this.cd, this);
        this.shellPath = 'C:/msys64/usr/bin/bash.exe';
        if (!slash.fileExists(this.shellPath)) {
            this.shellPath = true;
        }
        this.editor = this.term.editor;
        this.alias = new Alias(this);
        this.chdir = new Chdir(this);
        this.paths = new Paths(this);
        this.queue = [];
        this.inputQueue = [];
        this.paths.init();
    }

    Shell.prototype.cd = function(dir) {
        if (!slash.samePath(dir, process.cwd())) {
            this.executeCmd('cd ' + dir);
            return this.editor.focus();
        }
    };

    Shell.prototype.substitute = function(cmd) {
        cmd = this.alias.substitute(cmd);
        cmd = cmd.replace(/\~/g, slash.home());
        return cmd;
    };

    Shell.prototype.execute = function(arg1) {
        var fallback, hsub, ref1, ref2;
        this.cmd = (ref1 = arg1.cmd) != null ? ref1 : null, fallback = (ref2 = arg1.fallback) != null ? ref2 : null;
        if (this.cmd != null) {
            this.cmd;
        } else {
            this.cmd = this.editor.lastLine();
        }
        this.cmd = this.cmd.trim();
        if (this.cmd === '.' && valid(fallback)) {
            this.cmd = fallback;
        }
        if (this.child) {
            this.inputQueue.push(this.cmd);
            this.editor.setInputText('');
            return;
        }
        this.errorText = '';
        if (this.cmd !== (hsub = History.substitute(this.cmd))) {
            this.cmd = hsub;
            this.editor.setInputText(this.cmd);
        }
        this.editor.appendText('');
        this.editor.singleCursorAtEnd();
        if (empty(this.cmd)) {
            this.term.moveInputMeta();
            return;
        }
        this.term.history.shellCmd(this.cmd);
        this.last = {
            cmd: this.cmd,
            cwd: slash.tilde(process.cwd()),
            meta: this.term.insertCmdMeta(this.editor.numLines() - 2, this.cmd)
        };
        if (fallback) {
            this.last.fallback = fallback;
        }
        return this.executeCmd(this.substitute(this.cmd));
    };

    Shell.prototype.executeCmd = function(cmd1) {
        var split;
        this.cmd = cmd1;
        split = this.cmd.split('&&');
        if (split.length > 1) {
            this.cmd = split[0].trim();
            this.queue = this.queue.concat(split.slice(1));
        } else {
            this.cmd = this.cmd.trim();
        }
        if (empty(this.cmd)) {
            this.dequeue();
            return true;
        }
        if (this.alias.onCommand(this.cmd)) {
            this.dequeue();
            return true;
        }
        if (this.chdir.onCommand(this.cmd)) {
            this.dequeue();
            return true;
        }
        return this.shellCmd(this.cmd);
    };

    Shell.prototype.seperateCmdArgs = function(cmd) {
        var exe, i, n, next;
        next = function(c, s) {
            var n;
            n = cmd.indexOf(c, s + 1);
            if (n < 0) {
                n = cmd.length;
            }
            return n;
        };
        i = next(' ', 0);
        n = next('"', -1);
        if (n < i) {
            i = 1 + next('"', n);
        }
        exe = cmd.slice(0, i);
        args = [];
        while (i++ < cmd.length) {
            if (cmd[i] !== ' ') {
                if (cmd[i] === '"') {
                    n = next('"', i);
                    args.push(cmd.slice(i, n));
                } else {
                    n = next(' ', i);
                    args.push(cmd.slice(i, n));
                }
                i = n;
            }
        }
        return [exe, args];
    };

    Shell.prototype.shellCmd = function(cmd1) {
        var cmd, ref1;
        this.cmd = cmd1;
        process.env.LINES = this.editor.scroll.fullLines;
        process.env.COLUMNS = parseInt(this.editor.layersWidth / this.editor.size.charWidth);
        process.env.ADBLOCK = true;
        if (this.cmd.endsWith('&')) {
            ref1 = this.seperateCmdArgs(this.cmd.slice(0, this.cmd.length - 1)), cmd = ref1[0], args = ref1[1];
            this.spawn = childp.spawn(cmd, args, {
                detached: true,
                shell: this.shellPath,
                env: process.env,
                cwd: process.cwd()
            });
            this.last.meta.pid = this.spawn.pid;
            this.spawn.on('close', ((function(_this) {
                return function(pid) {
                    return function(code) {
                        var j, len, meta, ref2, results;
                        klog('spawn exit', code, pid);
                        ref2 = _this.editor.meta.metasOfClass('succ');
                        results = [];
                        for (j = 0, len = ref2.length; j < len; j++) {
                            meta = ref2[j];
                            if (meta.pid === pid) {
                                meta[2].number.text = 'â–¶';
                                meta[2].number.clss = 'succ';
                                _this.editor.meta.update(meta);
                                break;
                            } else {
                                results.push(void 0);
                            }
                        }
                        return results;
                    };
                };
            })(this))(this.spawn.pid));
            this.onDone('busy');
        } else {
            this.child = childp.exec(this.cmd, {
                shell: this.shellPath,
                env: process.env,
                cwd: process.cwd()
            });
            this.child.stdout.on('data', this.onStdOut);
            this.child.stderr.on('data', this.onStdErr);
            this.child.on('close', this.onExit);
        }
        return true;
    };

    Shell.prototype.handleCancel = function() {
        this.queue = [];
        this.inputQueue = [];
        if (!this.child) {
            klog('no child?');
            return 'unhandled';
        }
        psTree(this.child.pid, (function(_this) {
            return function(err, children) {
                var arg, j, len, results;
                args = children.map(function(p) {
                    return p.PID;
                });
                args.unshift(_this.child.pid);
                args.reverse();
                _this.child.kill();
                results = [];
                for (j = 0, len = args.length; j < len; j++) {
                    arg = args[j];
                    results.push(wxw('terminate', arg));
                }
                return results;
            };
        })(this));
        return true;
    };

    Shell.prototype.onExit = function(code) {
        var killed;
        killed = this.child.killed;
        delete this.child;
        if (code === 0 || killed) {
            return setImmediate(this.onDone);
        } else if (this.fallback()) {
            return this.dequeue();
        } else {
            this.term.failMeta(this.last.meta);
            if (!/is not recognized/.test(this.errorText)) {
                this.editor.appendOutput('\n' + this.errorText);
            }
            return this.dequeue('fail');
        }
    };

    Shell.prototype.fallback = function() {
        if (this.last.fallback) {
            klog('fallback', this.last.fallback);
            this.enqueue({
                cmd: this.last.fallback,
                update: true
            });
            delete this.last.fallback;
            return true;
        }
    };

    Shell.prototype.onDone = function(lastCode) {
        var info, ref1;
        info = _.clone(this.last);
        delete info.meta;
        post.emit('cmd', info);
        if (lastCode !== 'fail') {
            if (((ref1 = this.last) != null ? ref1.meta : void 0) != null) {
                this.term.succMeta(this.last.meta, lastCode);
            }
        }
        if (empty(this.queue) && empty(this.inputQueue)) {
            return this.term.pwd();
        } else {
            return this.dequeue();
        }
    };

    Shell.prototype.enqueue = function(arg1) {
        var alias, cmd, front, ref1, ref2, ref3, ref4, update;
        cmd = (ref1 = arg1.cmd) != null ? ref1 : '', front = (ref2 = arg1.front) != null ? ref2 : false, update = (ref3 = arg1.update) != null ? ref3 : false, alias = (ref4 = arg1.alias) != null ? ref4 : false;
        if (update) {
            this.last.orig = this.last.cmd;
            this.last.cmd = cmd;
            if (this.last.meta) {
                this.editor.replaceTextInLine(this.last.meta[0], cmd);
                this.editor.meta.update(this.last.meta);
            }
        }
        if (alias) {
            this.last.alias = cmd;
        }
        cmd = cmd.replace(/\~/g, slash.home());
        if (front) {
            this.queue.unshift(cmd);
        } else {
            this.queue.push(cmd);
        }
        return cmd;
    };

    Shell.prototype.dequeue = function(lastCode) {
        var cmd;
        if (this.queue.length) {
            return this.executeCmd(this.queue.shift());
        } else if (this.inputQueue.length) {
            cmd = this.inputQueue.shift();
            this.editor.setInputText(cmd);
            return this.execute(cmd);
        } else {
            return this.onDone(lastCode);
        }
    };

    Shell.prototype.onStdOut = function(data) {
        if (data.slice(-1)[0] === '\n') {
            data = data.slice(0, +(data.length - 2) + 1 || 9e9);
        }
        this.editor.appendOutput(data);
        return this.editor.singleCursorAtEnd();
    };

    Shell.prototype.onStdErr = function(data) {
        var c, i, path;
        if (data.startsWith('\x1b]0;')) {
            klog('bash prompt');
            data = data.slice(4);
            i = 0;
            c = data[0];
            path = '';
            while (c !== '\x07') {
                path += c;
                c = data[i++];
            }
            klog('path', path);
            return this.editor.appendOutput(data.slice(i));
        } else {
            return this.errorText += data;
        }
    };

    return Shell;

})();

module.exports = Shell;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/shell.coffee