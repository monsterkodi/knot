
/*
 0000000   000000000  000000000  00000000 
000   000     000        000     000   000
000000000     000        000     0000000  
000   000     000        000     000   000
000   000     000        000     000   000
 */
var Attr, cache, colorDistance, colors, defAttr, log, matchColor, ref, valid;

ref = require('kxk'), valid = ref.valid, log = ref.log;

colors = require('./colors');

defAttr = (257 << 9) | 256;

cache = {};

colorDistance = function(r1, g1, b1, r2, g2, b2) {
  return Math.pow(30 * (r1 - r2), 2) + Math.pow(59 * (g1 - g2), 2) + Math.pow(11 * (b1 - b2), 2);
};

matchColor = function(r1, g1, b1) {
  var b2, c, diff, g2, hash, i, j, ldiff, li, r2, ref1;
  hash = (r1 << 16) | (g1 << 8) | b1;
  if (valid(cache[hash])) {
    return cache[hash];
  }
  ldiff = 2e308;
  li = -1;
  for (i = j = 0, ref1 = colors[258].length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
    c = colors[258][i];
    r2 = c[0];
    g2 = c[1];
    b2 = c[2];
    diff = colorDistance(r1, g1, b1, r2, g2, b2);
    if (diff === 0) {
      li = i;
      break;
    }
    if (diff < ldiff) {
      ldiff = diff;
      li = i;
    }
  }
  cache[hash] = li;
  return cache[hash];
};

Attr = (function() {
  function Attr() {}

  Attr.set = function(params, curAttr) {
    var bg, fg, flags, i, p;
    if (params.length === 1 && params[0] === 0) {
      return defAttr;
    }
    flags = curAttr >> 18;
    fg = (curAttr >> 9) & 0x1ff;
    bg = curAttr & 0x1ff;
    i = 0;
    while (i < params.length) {
      p = params[i];
      switch (p) {
        case 0:
          flags = defAttr >> 18;
          fg = (defAttr >> 9) & 0x1ff;
          bg = defAttr & 0x1ff;
          break;
        case 1:
          flags &= ~32;
          flags |= 1;
          break;
        case 2:
          flags &= ~1;
          flags |= 32;
          break;
        case 4:
          flags |= 2;
          break;
        case 5:
          flags |= 4;
          break;
        case 7:
          flags |= 8;
          break;
        case 8:
          flags |= 16;
          break;
        case 22:
          flags &= ~1;
          flags &= ~32;
          break;
        case 24:
          flags &= ~2;
          break;
        case 25:
          flags &= ~4;
          break;
        case 27:
          flags &= ~8;
          break;
        case 28:
          flags &= ~16;
          break;
        case 39:
          fg = (defAttr >> 9) & 0x1ff;
          break;
        case 49:
          bg = defAttr & 0x1ff;
          break;
        case 38:
          if (params[i + 1] === 2) {
            i += 2;
            fg = matchColor(params[i] & 0xff, params[i + 1] & 0xff, params[i + 2] & 0xff);
            if (fg === -1) {
              fg = 0x1ff;
            }
            i += 2;
          } else if (params[i + 1] === 5) {
            fg = params[i + 2] & 0xff;
            i += 2;
          }
          break;
        case 48:
          if (params[i + 1] === 2) {
            i += 2;
            bg = matchColor(params[i] & 0xff, params[i + 1] & 0xff, params[i + 2] & 0xff);
            if (bg === -1) {
              bg = 0x1ff;
            }
            i += 2;
          } else if (params[i + 1] === 5) {
            bg = params[i + 2] & 0xff;
            i += 2;
          }
          break;
        default:
          if (p >= 30 && p <= 37) {
            fg = p - 30;
          } else if (p >= 40 && p <= 47) {
            bg = p - 40;
          } else if (p >= 90 && p <= 97) {
            fg = p - 90 + 8;
          } else if (p >= 100 && p <= 107) {
            bg = p - 100 + 8;
          } else {
            log("unhandled attr " + p);
          }
      }
      i += 1;
    }
    return (flags << 18) | (fg << 9) | bg;
  };

  return Attr;

})();

module.exports = Attr;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/attr.coffee