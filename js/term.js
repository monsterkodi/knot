// koffee 1.4.0

/*
000000000  00000000  00000000   00     00  
   000     000       000   000  000   000  
   000     0000000   0000000    000000000  
   000     000       000   000  000 0 000  
   000     00000000  000   000  000   000
 */
var $, BaseEditor, History, Shell, Term, TextEditor, elem, kerror, klog, kpos, post, ref, render, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), post = ref.post, kerror = ref.kerror, slash = ref.slash, elem = ref.elem, klog = ref.klog, kpos = ref.kpos, $ = ref.$;

BaseEditor = require('./editor/editor');

TextEditor = require('./editor/texteditor');

render = require('./editor/render');

History = require('./history');

Shell = require('./shell');

Term = (function() {
    function Term() {
        this.scrollBy = bind(this.scrollBy, this);
        this.resized = bind(this.resized, this);
        this.onFontSize = bind(this.onFontSize, this);
        var main;
        main = $('#main');
        this.div = elem({
            "class": 'term'
        });
        main.appendChild(this.div);
        this.num = 0;
        this.rows = 0;
        this.cols = 0;
        this.size = {
            charWidth: 0,
            lineHeight: 0
        };
        this.editor = new TextEditor(this, {
            features: ['Scrollbar', 'Minimap', 'Meta', 'Numbers', 'Autocomplete', 'Brackets', 'Strings', 'CursorLine']
        });
        this.editor.setText('');
        this.shell = new Shell(this);
        this.history = new History(this);
        this.autocomplete = this.editor.autocomplete;
        post.on('fontSize', this.onFontSize);
    }

    Term.prototype.failMeta = function(meta) {
        klog('fail', this.editor.line(meta[0]));
        meta[2].number = {
            text: '✖',
            clss: 'fail'
        };
        meta[2].clss = 'fail';
        this.editor.minimap.drawLines(meta[0], meta[0]);
        return this.editor.meta.update(meta);
    };

    Term.prototype.succMeta = function(meta) {
        meta[2].number = {
            text: '▶',
            clss: 'succ'
        };
        meta[2].clss = 'succ';
        this.editor.minimap.drawLines(meta[0], meta[0]);
        return this.editor.meta.update(meta);
    };

    Term.prototype.insertCmdMeta = function(li, cmd) {
        return this.editor.meta.add({
            line: li,
            clss: 'cmd',
            number: {
                text: '▶',
                clss: 'cmd'
            },
            end: cmd.length + 1,
            click: (function(_this) {
                return function(meta, event) {
                    _this.editor.singleCursorAtEnd();
                    _this.editor.setInputText(_this.editor.line(meta[0]));
                    return _this.shell.execute({
                        cmd: _this.editor.line(meta[0])
                    });
                };
            })(this)
        });
    };

    Term.prototype.moveInputMeta = function() {
        if (this.editor.numLines() - 1 > this.inputMeta[0]) {
            return this.editor.meta.moveLineMeta(this.inputMeta, this.editor.numLines() - 1 - this.inputMeta[0]);
        } else {
            if (this.inputMeta[0] !== this.editor.numLines() - 1) {
                return kerror('input meta not at end?', this.inputMeta[0], this.editor.numLines() - 1);
            }
        }
    };

    Term.prototype.clear = function() {
        var ref1;
        if ((ref1 = this.shell.last) != null) {
            delete ref1.meta;
        }
        this.editor.clear();
        this.inputMeta = this.editor.meta.add({
            line: 0,
            clss: 'input',
            number: {
                text: '▶'
            },
            click: (function(_this) {
                return function(meta, event) {
                    var pos;
                    pos = kpos(event);
                    if (pos.x < 40) {
                        return klog('input number');
                    } else {
                        return klog('input text?');
                    }
                };
            })(this)
        });
        return true;
    };

    Term.prototype.onFontSize = function(size) {
        this.editor.setFontSize(size);
        return this.editor.singleCursorAtEnd();
    };

    Term.prototype.resized = function() {
        return this.editor.resized();
    };

    Term.prototype.scrollBy = function(delta) {
        var ref1;
        if (this.autocomplete.list) {
            this.autocomplete.close();
        }
        this.editor.scroll.by(delta);
        if (!((0 < (ref1 = this.editor.scroll.scroll) && ref1 < this.editor.scroll.scrollMax - 1))) {
            return post.emit('stopWheel');
        }
    };

    Term.prototype.pwd = function() {
        var dir;
        dir = slash.tilde(process.cwd());
        this.editor.appendOutput(dir);
        this.editor.meta.add({
            line: Math.max(0, this.editor.numLines() - 2),
            clss: 'pwd',
            number: {
                text: ' ',
                clss: 'pwd'
            },
            end: dir.length + 1,
            click: (function(_this) {
                return function(meta, event) {
                    var i, index, j, next, pos, ref1, ref2;
                    pos = kpos(event);
                    if (pos.x < 40) {
                        index = _this.editor.meta.metas.indexOf(meta);
                        if (index < _this.editor.meta.metas.length - 1) {
                            _this.editor.singleCursorAtPos([0, meta[0]]);
                            if (next = _this.editor.meta.nextMetaOfSameClass(meta)) {
                                for (i = j = ref1 = meta[0], ref2 = next[0]; ref1 <= ref2 ? j < ref2 : j > ref2; i = ref1 <= ref2 ? ++j : --j) {
                                    _this.editor.deleteSelectionOrCursorLines();
                                }
                            }
                            return _this.editor.moveCursorsDown();
                        }
                    } else {
                        _this.editor.singleCursorAtEnd();
                        return _this.shell.cd(_this.editor.line(meta[0]));
                    }
                };
            })(this)
        });
        return true;
    };

    Term.prototype.onEnter = function() {
        if (this.editor.isInputCursor()) {
            if (this.shell.child && this.shell.last.cmd === 'koffee') {
                this.shell.child.stdin.write('\n');
                this.editor.setInputText('');
                return;
            }
            if (this.autocomplete.isListItemSelected()) {
                this.autocomplete.complete({});
            } else if (this.autocomplete.selectedCompletion()) {
                return this.shell.execute({
                    fallback: this.editor.lastLine() + this.autocomplete.selectedCompletion()
                });
            }
            return this.shell.execute({});
        } else {
            return this.editor.singleCursorAtEnd();
        }
    };

    Term.prototype.handleKey = function(mod, key, combo, char, event) {
        switch (combo) {
            case 'enter':
                return this.onEnter();
        }
        if (this.shell.child && this.shell.last.cmd === 'koffee') {
            if (char) {
                switch (key) {
                    case 'backspace':
                        this.shell.child.stdin.write('\x08');
                        break;
                    default:
                        this.shell.child.stdin.write(char);
                }
            } else {
                klog('pipe key', key, combo);
            }
        } else {
            if ('unhandled' !== this.autocomplete.handleModKeyComboEvent(mod, key, combo, event)) {
                return;
            }
            if (this.editor.isInputCursor()) {
                switch (combo) {
                    case 'alt+up':
                        return this.editor.moveCursorsUp();
                    case 'up':
                        return this.history.prev();
                    case 'down':
                        return this.history.next();
                    case 'ctrl+c':
                        return this.shell.handleCancel();
                }
            }
        }
        return 'unhandled';
    };

    return Term;

})();

module.exports = Term;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVybS5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsbUdBQUE7SUFBQTs7QUFRQSxNQUErQyxPQUFBLENBQVEsS0FBUixDQUEvQyxFQUFFLGVBQUYsRUFBUSxtQkFBUixFQUFnQixpQkFBaEIsRUFBdUIsZUFBdkIsRUFBNkIsZUFBN0IsRUFBbUMsZUFBbkMsRUFBeUM7O0FBRXpDLFVBQUEsR0FBYSxPQUFBLENBQVEsaUJBQVI7O0FBQ2IsVUFBQSxHQUFhLE9BQUEsQ0FBUSxxQkFBUjs7QUFDYixNQUFBLEdBQWEsT0FBQSxDQUFRLGlCQUFSOztBQUNiLE9BQUEsR0FBYSxPQUFBLENBQVEsV0FBUjs7QUFDYixLQUFBLEdBQWEsT0FBQSxDQUFRLFNBQVI7O0FBRVA7SUFFQyxjQUFBOzs7O0FBRUMsWUFBQTtRQUFBLElBQUEsR0FBTSxDQUFBLENBQUUsT0FBRjtRQUNOLElBQUMsQ0FBQSxHQUFELEdBQU8sSUFBQSxDQUFLO1lBQUEsQ0FBQSxLQUFBLENBQUEsRUFBTSxNQUFOO1NBQUw7UUFDUCxJQUFJLENBQUMsV0FBTCxDQUFpQixJQUFDLENBQUEsR0FBbEI7UUFFQSxJQUFDLENBQUEsR0FBRCxHQUFRO1FBQ1IsSUFBQyxDQUFBLElBQUQsR0FBUTtRQUNSLElBQUMsQ0FBQSxJQUFELEdBQVE7UUFDUixJQUFDLENBQUEsSUFBRCxHQUNJO1lBQUEsU0FBQSxFQUFZLENBQVo7WUFDQSxVQUFBLEVBQVksQ0FEWjs7UUFHSixJQUFDLENBQUEsTUFBRCxHQUFVLElBQUksVUFBSixDQUFlLElBQWYsRUFBa0I7WUFBQSxRQUFBLEVBQVMsQ0FDakMsV0FEaUMsRUFFakMsU0FGaUMsRUFHakMsTUFIaUMsRUFJakMsU0FKaUMsRUFLakMsY0FMaUMsRUFNakMsVUFOaUMsRUFPakMsU0FQaUMsRUFRakMsWUFSaUMsQ0FBVDtTQUFsQjtRQVdWLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FB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LHVCQUFBOztZQUVBLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxhQUFSLENBQUEsQ0FBSDtBQUNJLHdCQUFPLEtBQVA7QUFBQSx5QkFDUyxRQURUO0FBQ3VCLCtCQUFPLElBQUMsQ0FBQSxNQUFNLENBQUMsYUFBUixDQUFBO0FBRDlCLHlCQUVTLElBRlQ7QUFFdUIsK0JBQU8sSUFBQyxDQUFBLE9BQU8sQ0FBQyxJQUFULENBQUE7QUFGOUIseUJBR1MsTUFIVDtBQUd1QiwrQkFBTyxJQUFDLENBQUEsT0FBTyxDQUFDLElBQVQsQ0FBQTtBQUg5Qix5QkFJUyxRQUpUO0FBSXVCLCtCQUFPLElBQUMsQ0FBQSxLQUFLLENBQUMsWUFBUCxDQUFBO0FBSjlCLGlCQURKO2FBWko7O2VBbUJBO0lBMUJPOzs7Ozs7QUE0QmYsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAgICAgIDAwICBcbiAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgIDAwMCAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICBcbiAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICBcbiAgIDAwMCAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiMjI1xuXG57IHBvc3QsIGtlcnJvciwgc2xhc2gsIGVsZW0sIGtsb2csIGtwb3MsICQgfSA9IHJlcXVpcmUgJ2t4aydcblxuQmFzZUVkaXRvciA9IHJlcXVpcmUgJy4vZWRpdG9yL2VkaXRvcidcblRleHRFZGl0b3IgPSByZXF1aXJlICcuL2VkaXRvci90ZXh0ZWRpdG9yJ1xucmVuZGVyICAgICA9IHJlcXVpcmUgJy4vZWRpdG9yL3JlbmRlcidcbkhpc3RvcnkgICAgPSByZXF1aXJlICcuL2hpc3RvcnknXG5TaGVsbCAgICAgID0gcmVxdWlyZSAnLi9zaGVsbCdcblxuY2xhc3MgVGVybVxuXG4gICAgQDogLT5cbiAgICAgICAgXG4gICAgICAgIG1haW4gPSQgJyNtYWluJ1xuICAgICAgICBAZGl2ID0gZWxlbSBjbGFzczondGVybScgXG4gICAgICAgIG1haW4uYXBwZW5kQ2hpbGQgQGRpdlxuXG4gICAgICAgIEBudW0gID0gMCAgIFxuICAgICAgICBAcm93cyA9IDBcbiAgICAgICAgQGNvbHMgPSAwXG4gICAgICAgIEBzaXplID1cbiAgICAgICAgICAgIGNoYXJXaWR0aDogIDBcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgQGVkaXRvciA9IG5ldyBUZXh0RWRpdG9yIEAsIGZlYXR1cmVzOltcbiAgICAgICAgICAgICdTY3JvbGxiYXInXG4gICAgICAgICAgICAnTWluaW1hcCdcbiAgICAgICAgICAgICdNZXRhJ1xuICAgICAgICAgICAgJ051bWJlcnMnXG4gICAgICAgICAgICAnQXV0b2NvbXBsZXRlJ1xuICAgICAgICAgICAgJ0JyYWNrZXRzJ1xuICAgICAgICAgICAgJ1N0cmluZ3MnXG4gICAgICAgICAgICAnQ3Vyc29yTGluZSdcbiAgICAgICAgXVxuICAgICAgICAgICAgICAgIFxuICAgICAgICBAZWRpdG9yLnNldFRleHQgJydcbiAgICAgICAgXG4gICAgICAgIEBzaGVsbCAgID0gbmV3IFNoZWxsIEBcbiAgICAgICAgQGhpc3RvcnkgPSBuZXcgSGlzdG9yeSBAXG4gICAgICAgIEBhdXRvY29tcGxldGUgPSBAZWRpdG9yLmF1dG9jb21wbGV0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHBvc3Qub24gJ2ZvbnRTaXplJyBAb25Gb250U2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAjIDAwICAgICAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMDAwICBcbiAgICAjIDAwMCAwIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbiAgICBcbiAgICBmYWlsTWV0YTogKG1ldGEpIC0+XG5cbiAgICAgICAga2xvZyAnZmFpbCcgQGVkaXRvci5saW5lIG1ldGFbMF1cbiAgICAgICAgbWV0YVsyXS5udW1iZXIgPSB0ZXh0OifinJYnIGNsc3M6J2ZhaWwnXG4gICAgICAgIG1ldGFbMl0uY2xzcyA9ICdmYWlsJ1xuICAgICAgICBAZWRpdG9yLm1pbmltYXAuZHJhd0xpbmVzIG1ldGFbMF0sIG1ldGFbMF1cbiAgICAgICAgQGVkaXRvci5tZXRhLnVwZGF0ZSBtZXRhXG4gICAgICAgIFxuICAgIHN1Y2NNZXRhOiAobWV0YSkgLT5cblxuICAgICAgICAjIGtsb2cgJ3N1Y2MnIEBlZGl0b3IubGluZSBtZXRhWzBdXG4gICAgICAgIG1ldGFbMl0ubnVtYmVyID0gdGV4dDon4pa2JyBjbHNzOidzdWNjJ1xuICAgICAgICBtZXRhWzJdLmNsc3MgPSAnc3VjYydcbiAgICAgICAgQGVkaXRvci5taW5pbWFwLmRyYXdMaW5lcyBtZXRhWzBdLCBtZXRhWzBdXG4gICAgICAgIEBlZGl0b3IubWV0YS51cGRhdGUgbWV0YVxuICAgICAgICBcbiAgICBpbnNlcnRDbWRNZXRhOiAobGksIGNtZCkgLT5cbiAgICAgICAgXG4gICAgICAgIEBlZGl0b3IubWV0YS5hZGQgXG4gICAgICAgICAgICBsaW5lOiBsaVxuICAgICAgICAgICAgY2xzczogJ2NtZCdcbiAgICAgICAgICAgIG51bWJlcjogXG4gICAgICAgICAgICAgICAgdGV4dDogJ+KWtidcbiAgICAgICAgICAgICAgICBjbHNzOiAnY21kJ1xuICAgICAgICAgICAgZW5kOiBjbWQubGVuZ3RoKzFcbiAgICAgICAgICAgIGNsaWNrOiAobWV0YSwgZXZlbnQpID0+XG4gICAgICAgICAgICAgICAgQGVkaXRvci5zaW5nbGVDdXJzb3JBdEVuZCgpXG4gICAgICAgICAgICAgICAgQGVkaXRvci5zZXRJbnB1dFRleHQgQGVkaXRvci5saW5lIG1ldGFbMF1cbiAgICAgICAgICAgICAgICBAc2hlbGwuZXhlY3V0ZSBjbWQ6QGVkaXRvci5saW5lIG1ldGFbMF1cbiAgICBcbiAgICBtb3ZlSW5wdXRNZXRhOiAtPlxuICAgICAgICBcbiAgICAgICAgaWYgQGVkaXRvci5udW1MaW5lcygpLTEgPiBAaW5wdXRNZXRhWzBdXG4gICAgICAgICAgICBAZWRpdG9yLm1ldGEubW92ZUxpbmVNZXRhIEBpbnB1dE1ldGEsIEBlZGl0b3IubnVtTGluZXMoKS0xLUBpbnB1dE1ldGFbMF1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgaWYgQGlucHV0TWV0YVswXSAhPSBAZWRpdG9yLm51bUxpbmVzKCktMVxuICAgICAgICAgICAgICAgIGtlcnJvciAnaW5wdXQgbWV0YSBub3QgYXQgZW5kPycgQGlucHV0TWV0YVswXSwgQGVkaXRvci5udW1MaW5lcygpLTFcbiAgICAgICAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgMDAwICAgICAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjICAwMDAwMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgIFxuICAgIGNsZWFyOiAtPiBcbiAgICBcbiAgICAgICAgZGVsZXRlIEBzaGVsbC5sYXN0Py5tZXRhXG4gICAgICAgIEBlZGl0b3IuY2xlYXIoKVxuICAgICAgICBAaW5wdXRNZXRhID0gQGVkaXRvci5tZXRhLmFkZFxuICAgICAgICAgICAgbGluZTogMFxuICAgICAgICAgICAgY2xzczogJ2lucHV0J1xuICAgICAgICAgICAgbnVtYmVyOiB0ZXh0OiAn4pa2J1xuICAgICAgICAgICAgY2xpY2s6IChtZXRhLCBldmVudCkgPT5cbiAgICAgICAgICAgICAgICBwb3MgPSBrcG9zIGV2ZW50XG4gICAgICAgICAgICAgICAgaWYgcG9zLnggPCA0MFxuICAgICAgICAgICAgICAgICAgICBrbG9nICdpbnB1dCBudW1iZXInXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBrbG9nICdpbnB1dCB0ZXh0PydcbiAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMDAgICAgICAgMDAwMDAwMCAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwICAwMDAgICAgIDAwMCAgICAgICAgIDAwMCAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgICAgICBcbiAgICAjIDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgICAgMDAwICAgICAgICAgMDAwMDAwMCAgIDAwMCAgICAwMDAgICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAgICAwMDAgICAgICAgICAgICAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgICAgXG4gICAgIyAwMDAgICAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgICAgIDAwMDAwMDAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICBcblxuICAgIG9uRm9udFNpemU6IChzaXplKSA9PlxuICAgICAgICBcbiAgICAgICAgQGVkaXRvci5zZXRGb250U2l6ZSBzaXplXG4gICAgICAgIEBlZGl0b3Iuc2luZ2xlQ3Vyc29yQXRFbmQoKVxuICAgICAgICBcbiAgICByZXNpemVkOiA9PiBAZWRpdG9yLnJlc2l6ZWQoKVxuICAgIFxuICAgIHNjcm9sbEJ5OiAoZGVsdGEpID0+XG4gICAgICAgIFxuICAgICAgICBpZiBAYXV0b2NvbXBsZXRlLmxpc3RcbiAgICAgICAgICAgIEBhdXRvY29tcGxldGUuY2xvc2UoKVxuICAgICAgICBAZWRpdG9yLnNjcm9sbC5ieSBkZWx0YVxuICAgICAgICBpZiBub3QgKDAgPCBAZWRpdG9yLnNjcm9sbC5zY3JvbGwgPCBAZWRpdG9yLnNjcm9sbC5zY3JvbGxNYXgtMSlcbiAgICAgICAgICAgIHBvc3QuZW1pdCAnc3RvcFdoZWVsJ1xuICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAgICAgIDAwICAgICAwMCAgMDAwMDAwMCAgICBcbiAgICBcbiAgICBwd2Q6IC0+XG4gICAgICAgIFxuICAgICAgICBkaXIgPSBzbGFzaC50aWxkZSBwcm9jZXNzLmN3ZCgpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIEBlZGl0b3IuYXBwZW5kT3V0cHV0IGRpclxuICAgICAgICBAZWRpdG9yLm1ldGEuYWRkXG4gICAgICAgICAgICBsaW5lOiBNYXRoLm1heCAwLCBAZWRpdG9yLm51bUxpbmVzKCktMlxuICAgICAgICAgICAgY2xzczogJ3B3ZCdcbiAgICAgICAgICAgIG51bWJlcjogXG4gICAgICAgICAgICAgICAgdGV4dDogJyAnXG4gICAgICAgICAgICAgICAgY2xzczogJ3B3ZCdcbiAgICAgICAgICAgIGVuZDogZGlyLmxlbmd0aCsxXG4gICAgICAgICAgICBjbGljazogKG1ldGEsIGV2ZW50KSA9PlxuICAgICAgICAgICAgICAgIHBvcyA9IGtwb3MgZXZlbnRcbiAgICAgICAgICAgICAgICBpZiBwb3MueCA8IDQwXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gQGVkaXRvci5tZXRhLm1ldGFzLmluZGV4T2YgbWV0YVxuICAgICAgICAgICAgICAgICAgICBpZiBpbmRleCA8IEBlZGl0b3IubWV0YS5tZXRhcy5sZW5ndGgtMVxuICAgICAgICAgICAgICAgICAgICAgICAgQGVkaXRvci5zaW5nbGVDdXJzb3JBdFBvcyBbMCxtZXRhWzBdXVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgbmV4dCA9IEBlZGl0b3IubWV0YS5uZXh0TWV0YU9mU2FtZUNsYXNzIG1ldGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBbbWV0YVswXS4uLm5leHRbMF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlZGl0b3IuZGVsZXRlU2VsZWN0aW9uT3JDdXJzb3JMaW5lcygpXG4gICAgICAgICAgICAgICAgICAgICAgICBAZWRpdG9yLm1vdmVDdXJzb3JzRG93bigpXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBAZWRpdG9yLnNpbmdsZUN1cnNvckF0RW5kKClcbiAgICAgICAgICAgICAgICAgICAgQHNoZWxsLmNkIEBlZGl0b3IubGluZSBtZXRhWzBdXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICBcbiAgICAjIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAgICAgMDAwMCAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgIDAwMCAwIDAwMCAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgIDAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgIFxuICAgIG9uRW50ZXI6IC0+XG4gICAgICAgIFxuICAgICAgICBpZiBAZWRpdG9yLmlzSW5wdXRDdXJzb3IoKVxuICAgICAgICAgICAgaWYgQHNoZWxsLmNoaWxkIGFuZCBAc2hlbGwubGFzdC5jbWQgPT0gJ2tvZmZlZSdcbiAgICAgICAgICAgICAgICBAc2hlbGwuY2hpbGQuc3RkaW4ud3JpdGUgJ1xcbidcbiAgICAgICAgICAgICAgICBAZWRpdG9yLnNldElucHV0VGV4dCAnJ1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgaWYgQGF1dG9jb21wbGV0ZS5pc0xpc3RJdGVtU2VsZWN0ZWQoKVxuICAgICAgICAgICAgICAgIEBhdXRvY29tcGxldGUuY29tcGxldGUge31cbiAgICAgICAgICAgIGVsc2UgaWYgQGF1dG9jb21wbGV0ZS5zZWxlY3RlZENvbXBsZXRpb24oKVxuICAgICAgICAgICAgICAgIHJldHVybiBAc2hlbGwuZXhlY3V0ZSBmYWxsYmFjazpAZWRpdG9yLmxhc3RMaW5lKCkgKyBAYXV0b2NvbXBsZXRlLnNlbGVjdGVkQ29tcGxldGlvbigpXG4gICAgICAgICAgICBAc2hlbGwuZXhlY3V0ZSB7fVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAZWRpdG9yLnNpbmdsZUN1cnNvckF0RW5kKClcbiAgICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAwMDAgICBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMCAgICAgMDAwMDAgICAgXG4gICAgIyAwMDAgIDAwMCAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgICAgMDAwICAgICBcbiAgICBcbiAgICBoYW5kbGVLZXk6IChtb2QsIGtleSwgY29tYm8sIGNoYXIsIGV2ZW50KSAtPiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAjIGtsb2cgJ3Rlcm0uaGFuZGxlS2V5JyBtb2QsIGtleSwgY29tYm9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgc3dpdGNoIGNvbWJvXG4gICAgICAgICAgICB3aGVuICdlbnRlcicgdGhlbiByZXR1cm4gQG9uRW50ZXIoKVxuICAgICAgICBcbiAgICAgICAgaWYgQHNoZWxsLmNoaWxkIGFuZCBAc2hlbGwubGFzdC5jbWQgPT0gJ2tvZmZlZSdcbiAgICAgICAgICAgIGlmIGNoYXJcbiAgICAgICAgICAgICAgICBzd2l0Y2gga2V5XG4gICAgICAgICAgICAgICAgICAgIHdoZW4gJ2JhY2tzcGFjZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIEBzaGVsbC5jaGlsZC5zdGRpbi53cml0ZSAnXFx4MDgnXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIEBzaGVsbC5jaGlsZC5zdGRpbi53cml0ZSBjaGFyXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAga2xvZyAncGlwZSBrZXknIGtleSwgY29tYm9cbiAgICAgICAgZWxzZSAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGlmICd1bmhhbmRsZWQnICE9IEBhdXRvY29tcGxldGUuaGFuZGxlTW9kS2V5Q29tYm9FdmVudCBtb2QsIGtleSwgY29tYm8sIGV2ZW50XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIEBlZGl0b3IuaXNJbnB1dEN1cnNvcigpXG4gICAgICAgICAgICAgICAgc3dpdGNoIGNvbWJvXG4gICAgICAgICAgICAgICAgICAgIHdoZW4gJ2FsdCt1cCcgdGhlbiByZXR1cm4gQGVkaXRvci5tb3ZlQ3Vyc29yc1VwKClcbiAgICAgICAgICAgICAgICAgICAgd2hlbiAndXAnICAgICB0aGVuIHJldHVybiBAaGlzdG9yeS5wcmV2KClcbiAgICAgICAgICAgICAgICAgICAgd2hlbiAnZG93bicgICB0aGVuIHJldHVybiBAaGlzdG9yeS5uZXh0KClcbiAgICAgICAgICAgICAgICAgICAgd2hlbiAnY3RybCtjJyB0aGVuIHJldHVybiBAc2hlbGwuaGFuZGxlQ2FuY2VsKClcbiAgICAgICAgXG4gICAgICAgICd1bmhhbmRsZWQnXG4gICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBUZXJtXG4iXX0=
//# sourceURL=../coffee/term.coffee