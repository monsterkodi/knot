// koffee 1.4.0

/*
000000000  00000000  00000000   00     00  
   000     000       000   000  000   000  
   000     0000000   0000000    000000000  
   000     000       000   000  000 0 000  
   000     00000000  000   000  000   000
 */
var $, BaseEditor, History, Shell, Term, TextEditor, elem, klog, kpos, post, ref, render, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), $ = ref.$, elem = ref.elem, klog = ref.klog, kpos = ref.kpos, post = ref.post, slash = ref.slash;

BaseEditor = require('./editor/editor');

TextEditor = require('./editor/texteditor');

render = require('./editor/render');

History = require('./history');

Shell = require('./shell');

Term = (function() {
    function Term() {
        this.scrollBy = bind(this.scrollBy, this);
        this.resized = bind(this.resized, this);
        this.onFontSize = bind(this.onFontSize, this);
        this.onChanged = bind(this.onChanged, this);
        var main;
        main = $('#main');
        this.div = elem({
            "class": 'term'
        });
        main.appendChild(this.div);
        this.num = 0;
        this.rows = 0;
        this.cols = 0;
        this.size = {
            charWidth: 0,
            lineHeight: 0
        };
        this.editor = new TextEditor(this, {
            features: ['Scrollbar', 'Hrzntlbar', 'Minimap', 'Meta', 'Numbers', 'Autocomplete', 'Brackets', 'Strings', 'CursorLine']
        });
        this.editor.setText('');
        this.shell = new Shell(this);
        this.history = new History(this);
        this.autocomplete = this.editor.autocomplete;
        this.editor.on('changed', this.onChanged);
        post.on('fontSize', this.onFontSize);
    }

    Term.prototype.cursorToPrevPwd = function() {
        var meta;
        if (meta = this.editor.meta.prevMetaOfClass('pwd', this.editor.mainCursor()[1])) {
            return this.editor.singleCursorAtPos([0, meta[0]]);
        }
    };

    Term.prototype.cursorToNextPwd = function() {
        var meta;
        if (meta = this.editor.meta.nextMetaOfClass('pwd', this.editor.mainCursor()[1])) {
            return this.editor.singleCursorAtPos([0, meta[0]]);
        }
    };

    Term.prototype.deleteOutputOfPwdMeta = function(meta) {
        var i, index, j, next, ref1, ref2;
        if (meta != null) {
            meta;
        } else {
            meta = this.editor.meta.metaOfClassAtLine('pwd', this.editor.mainCursor()[1]);
        }
        if (!meta) {
            return;
        }
        index = this.editor.meta.metas.indexOf(meta);
        if (index < this.editor.meta.metas.length - 1) {
            this.editor.singleCursorAtPos([0, meta[0]]);
            if (next = this.editor.meta.nextMetaOfSameClass(meta)) {
                for (i = j = ref1 = meta[0], ref2 = next[0]; ref1 <= ref2 ? j < ref2 : j > ref2; i = ref1 <= ref2 ? ++j : --j) {
                    this.editor.deleteSelectionOrCursorLines();
                }
            }
            return this.editor.moveCursorsDown();
        }
    };

    Term.prototype.addDirMeta = function(dir) {
        return this.editor.meta.add({
            line: Math.max(0, this.editor.numLines() - 2),
            clss: 'pwd',
            number: {
                text: ' ',
                clss: 'pwd'
            },
            end: dir.length + 1,
            click: (function(_this) {
                return function(meta, event) {
                    var pos;
                    pos = kpos(event);
                    if (pos.x < 40) {
                        return _this.deleteOutputOfPwdMeta(meta);
                    } else {
                        _this.editor.singleCursorAtEnd();
                        return _this.shell.cd(_this.editor.line(meta[0]));
                    }
                };
            })(this)
        });
    };

    Term.prototype.addInputMeta = function() {
        this.inputMeta = this.editor.meta.add({
            line: 0,
            clss: 'input',
            number: {
                text: '▶',
                clss: 'input'
            },
            click: (function(_this) {
                return function(meta, event) {
                    if (meta[2].number.clss === 'input busy') {
                        return _this.shell.handleCancel();
                    }
                };
            })(this)
        });
        if (this.shell.child) {
            return this.busyInput();
        }
    };

    Term.prototype.busyInput = function() {
        var ref1, ref2;
        if ((ref1 = this.inputMeta[2]) != null) {
            ref1.number.text = '\uf013';
        }
        if ((ref2 = this.inputMeta[2]) != null) {
            ref2.number.clss = 'input busy';
        }
        return this.editor.meta.update(this.inputMeta);
    };

    Term.prototype.resetInput = function() {
        var ref1, ref2;
        if ((ref1 = this.inputMeta[2]) != null) {
            ref1.number.text = '▶';
        }
        if ((ref2 = this.inputMeta[2]) != null) {
            ref2.number.clss = 'input';
        }
        return this.editor.meta.update(this.inputMeta);
    };

    Term.prototype.failMeta = function(meta) {
        if (!meta) {
            return;
        }
        this.resetInput();
        meta[2].number = {
            text: '✖',
            clss: 'fail'
        };
        meta[2].clss = 'fail';
        this.editor.minimap.drawLines(meta[0], meta[0]);
        return this.editor.meta.update(meta);
    };

    Term.prototype.succMeta = function(meta, lastCode) {
        if (!meta) {
            return;
        }
        this.resetInput();
        if (lastCode === 'busy') {
            meta[2].number = {
                text: '\uf013',
                clss: 'succ busy'
            };
        } else {
            meta[2].number = {
                text: '▶',
                clss: 'succ'
            };
        }
        meta[2].clss = 'succ';
        meta[2].click = (function(_this) {
            return function(meta, event) {
                _this.editor.singleCursorAtEnd();
                _this.editor.setInputText(_this.editor.line(meta[0]));
                return _this.shell.execute({
                    cmd: _this.editor.line(meta[0])
                });
            };
        })(this);
        this.editor.minimap.drawLines(meta[0], meta[0]);
        return this.editor.meta.update(meta);
    };

    Term.prototype.insertCmdMeta = function(li, cmd) {
        this.busyInput();
        return this.editor.meta.add({
            line: li,
            clss: 'cmd',
            number: {
                text: '\uf013',
                clss: 'cmd'
            },
            end: cmd.length + 1,
            click: (function(_this) {
                return function(meta, event) {
                    var pos;
                    pos = kpos(event);
                    if (pos.x < 40) {
                        return _this.shell.handleCancel();
                    } else {
                        return klog('cmd text?');
                    }
                };
            })(this)
        });
    };

    Term.prototype.moveInputMeta = function() {
        var oldLine;
        if (this.editor.numLines() - 1 !== this.inputMeta[0]) {
            oldLine = this.inputMeta[0];
            this.editor.meta.moveLineMeta(this.inputMeta, this.editor.numLines() - 1 - this.inputMeta[0]);
            return this.editor.numbers.updateColor(oldLine);
        }
    };

    Term.prototype.onChanged = function(changeInfo) {
        if (changeInfo.changes.length) {
            return this.moveInputMeta();
        }
    };

    Term.prototype.clear = function() {
        var ref1;
        if ((ref1 = this.shell.last) != null) {
            delete ref1.meta;
        }
        this.editor.clear();
        this.addInputMeta();
        return true;
    };

    Term.prototype.onFontSize = function(size) {
        this.editor.setFontSize(size);
        return this.editor.singleCursorAtEnd();
    };

    Term.prototype.resized = function() {
        return this.editor.resized();
    };

    Term.prototype.scrollBy = function(delta) {
        var ref1;
        if (this.autocomplete.list) {
            this.autocomplete.close();
        }
        this.editor.scroll.by(delta);
        if (!((0 < (ref1 = this.editor.scroll.scroll) && ref1 < this.editor.scroll.scrollMax - 1))) {
            return post.emit('stopWheel');
        }
    };

    Term.prototype.pwd = function() {
        var dir;
        dir = slash.tilde(process.cwd());
        this.editor.appendOutput(dir);
        this.addDirMeta(dir);
        return true;
    };

    Term.prototype.isShell = function() {
        var ref1, ref2, ref3;
        return ((ref1 = this.shell) != null ? ref1.child : void 0) && ((ref2 = (ref3 = this.shell) != null ? ref3.last.cmd.split(' ')[0] : void 0) === 'bash' || ref2 === 'cmd' || ref2 === 'powershell' || ref2 === 'fish');
    };

    Term.prototype.onEnter = function() {
        if (this.editor.isInputCursor()) {
            if (this.isShell()) {
                klog('enter');
                this.shell.child.stdin.write('\n');
                this.editor.setInputText('');
                return;
            }
            if (this.autocomplete.isListItemSelected()) {
                this.autocomplete.complete({});
            } else if (this.autocomplete.selectedCompletion()) {
                return this.shell.execute({
                    fallback: this.editor.lastLine() + this.autocomplete.selectedCompletion()
                });
            }
            return this.shell.execute({});
        } else {
            return this.editor.singleCursorAtEnd();
        }
    };

    Term.prototype.handleKey = function(mod, key, combo, char, event) {
        switch (combo) {
            case 'enter':
                return this.onEnter();
            case 'alt+up':
                return this.cursorToPrevPwd();
            case 'alt+down':
                return this.cursorToNextPwd();
            case 'alt+delete':
                return this.deleteOutputOfPwdMeta();
            case 'ctrl+c':
                return this.shell.handleCancel();
        }
        if (this.isShell()) {
            if (char) {
                if (key !== 'backspace') {
                    this.shell.child.stdin.write(char);
                } else {
                    this.shell.child.stdin.write('\x08');
                }
            } else {
                klog('pipe key', key, combo);
            }
        } else {
            if ('unhandled' !== this.autocomplete.handleModKeyComboEvent(mod, key, combo, event)) {
                return;
            }
            if (this.editor.isInputCursor()) {
                switch (combo) {
                    case 'up':
                        return this.history.prev();
                    case 'down':
                        return this.history.next();
                    case 'ctrl+e':
                        return this.editor.moveCursorsAtBoundaryRight();
                }
            }
        }
        return 'unhandled';
    };

    return Term;

})();

module.exports = Term;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/term.coffee