
/*
00     00   0000000   0000000    00000000
000   000  000   000  000   000  000     
000000000  000   000  000   000  0000000 
000 0 000  000   000  000   000  000     
000   000   0000000   0000000    00000000
 */
var Mode, empty, log, ref;

ref = require('kxk'), empty = ref.empty, log = ref.log;

Mode = (function() {
  function Mode() {}

  Mode.set = function(buffer, params) {
    var i, j, ref1;
    if (typeof params === 'object') {
      for (i = j = 0, ref1 = params.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        Mode.set(buffer, params[i]);
      }
      return;
    }
    if (empty(buffer.prefix)) {
      switch (params) {
        case 4:
          return buffer.insertMode = true;
      }
    } else if (buffer.prefix === '?') {
      switch (params) {
        case 1:
          log('applicationCursor!');
          return buffer.applicationCursor = true;
        case 2:
          buffer.setgCharset(0, Terminal.charsets.US);
          buffer.setgCharset(1, Terminal.charsets.US);
          buffer.setgCharset(2, Terminal.charsets.US);
          return buffer.setgCharset(3, Terminal.charsets.US);
        case 3:
          buffer.savedCols = buffer.cols;
          return buffer.resize(132, buffer.rows);
        case 6:
          return buffer.originMode = true;
        case 7:
          return buffer.wraparoundMode = true;
        case 1003:
          buffer.x10Mouse = params === 9;
          buffer.vt200Mouse = params === 1000;
          buffer.normalMouse = params > 1000;
          buffer.mouseEvents = true;
          buffer.element.style.cursor = 'default';
          return log('Binding to mouse events');
        case 1004:
          return buffer.sendFocus = true;
        case 1005:
          return buffer.utfMouse = true;
        case 1006:
          return buffer.sgrMouse = true;
        case 1015:
          return buffer.urxvtMouse = true;
        case 25:
          return buffer.cursorHidden = false;
        case 1049:
          return log('alt screen buffer cursor');
        case 47:
          return log('alt screen buffer');
        case 2004:
          return log('xterm bracketed paste mode');
        default:
          return log("unhandled mode ? " + params);
      }
    }
  };

  Mode.reset = function(buffer, params) {
    var i, j, ref1;
    if (typeof params === 'object') {
      for (i = j = 0, ref1 = params.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        Mode.reset(buffer, params[i]);
      }
      return;
    }
    if (empty(buffer.prefix)) {
      switch (params) {
        case 4:
          return buffer.insertMode = false;
        case 20:
          return buffer.convertEol = false;
      }
    } else if (buffer.prefix === '?') {
      switch (params) {
        case 1:
          return buffer.applicationCursor = false;
        case 3:
          if (buffer.cols === 132 && buffer.savedCols) {
            buffer.resize(buffer.savedCols, buffer.rows);
          }
          return delete buffer.savedCols;
        case 6:
          return buffer.originMode = false;
        case 7:
          return buffer.wraparoundMode = false;
        case 12:
          return buffer.cursorBlink = false;
        case 25:
          return buffer.cursorHidden = true;
        case 66:
          return buffer.applicationKeypad = false;
        case 9:
        case 1000:
        case 1002:
        case 1003:
          buffer.x10Mouse = false;
          buffer.vt200Mouse = false;
          buffer.normalMouse = false;
          buffer.mouseEvents = false;
          return buffer.element.style.cursor = '';
        case 1004:
          return buffer.sendFocus = false;
        case 1005:
          return buffer.utfMouse = false;
        case 1006:
          return buffer.sgrMouse = false;
        case 1015:
          return buffer.urxvtMouse = false;
        case 1047:
        case 1049:
        case 47:
          return log('normal');
      }
    }
  };

  return Mode;

})();

module.exports = Mode;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/mode.coffee