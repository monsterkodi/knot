
/*
000      000  000   000  00000000   0000000
000      000  0000  000  000       000     
000      000  000 0 000  0000000   0000000 
000      000  000  0000  000            000
0000000  000  000   000  00000000  0000000
 */
var $, Buffer, Lines, Render, clamp, elem, log, parse, ref, str,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), clamp = ref.clamp, elem = ref.elem, str = ref.str, log = ref.log, $ = ref.$;

parse = require('./parse');

Buffer = require('./buffer');

Render = require('./render');

Lines = (function() {
  function Lines(term) {
    this.term = term;
    this.refresh = bind(this.refresh, this);
    this.writeData = bind(this.writeData, this);
    this.reset();
  }

  Lines.prototype.writeBufferData = function(buffer, data, tab, minimap) {
    var j, len, lineIndex, ref1, start;
    start = buffer.y;
    parse(data, buffer);
    if (buffer.lines.length > buffer.cache.length) {
      while (buffer.lines.length > buffer.cache.length) {
        buffer.cache.push({
          diss: this.dissForLine(buffer.lines[buffer.cache.length])
        });
        buffer.changed["delete"](buffer.cache.length - 1);
      }
    } else {
      buffer.cache[buffer.lines.length - 1] = {
        diss: this.dissForLine(buffer.lines[buffer.lines.length - 1])
      };
      buffer.changed["delete"](buffer.lines.length - 1);
    }
    ref1 = Array.from(buffer.changed.values());
    for (j = 0, len = ref1.length; j < len; j++) {
      lineIndex = ref1[j];
      buffer.cache[lineIndex] = {
        diss: this.dissForLine(buffer.lines[lineIndex])
      };
      if (minimap != null) {
        minimap.drawLine(lineIndex);
      }
    }
    delete buffer.changed;
    if (buffer.title) {
      tab.update(buffer.title);
      delete buffer.title;
    }
    return buffer.top = Math.max(0, buffer.lines.length - buffer.rows);
  };

  Lines.prototype.writeData = function(data) {
    this.writeBufferData(this.buffer, data, window.tabs.activeTab(), this.term.minimap);
    return this.refresh();
  };

  Lines.prototype.dissForLine = function(line) {
    var attr, ch, color, diss, dss, i, j, numCols, ref1;
    diss = [];
    if (!line) {
      return diss;
    }
    numCols = Math.min(130, line.length);
    if (numCols === 0) {
      return diss;
    }
    for (i = j = 0, ref1 = numCols; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
      attr = line[i][0];
      ch = line[i][1];
      if (ch === ' ') {
        color = attr & 0x1ff;
      } else {
        color = (attr >> 9) & 0x1ff;
      }
      dss = {
        start: i,
        length: 1,
        color: color
      };
      diss.push(dss);
    }
    return diss;
  };

  Lines.prototype.scrollTop = function(top) {
    this.buffer.top = top;
    return this.refresh();
  };

  Lines.prototype.refresh = function() {
    var bot, html, index, j, ref1, ref2, results, terminal;
    terminal = $('#terminal');
    terminal.innerHTML = '';
    this.buffer.top = clamp(0, Math.max(0, this.buffer.lines.length - this.buffer.rows), this.buffer.top);
    bot = clamp(0, this.buffer.lines.length - 1, this.buffer.top + this.buffer.rows);
    results = [];
    for (index = j = ref1 = this.buffer.top, ref2 = bot; ref1 <= ref2 ? j <= ref2 : j >= ref2; index = ref1 <= ref2 ? ++j : --j) {
      html = Render.line(this.buffer.lines[index], this.buffer);
      results.push(terminal.appendChild(elem({
        "class": 'line',
        html: html
      })));
    }
    return results;
  };

  Lines.prototype.reset = function() {
    return this.buffer = new Buffer(this.term);
  };

  return Lines;

})();

module.exports = Lines;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/lines.coffee