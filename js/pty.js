// koffee 1.14.0

/*
00000000   000000000  000   000  
000   000     000      000 000   
00000000      000       00000    
000           000        000     
000           000        000
 */
var PTY, klog, ref, title,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), klog = ref.klog, title = ref.title;

PTY = (function() {
    function PTY(term) {
        this.term = term;
        this.onData = bind(this.onData, this);
        this.editor = this.term.editor;
        this.spawn();
    }

    PTY.prototype.spawn = function() {};

    PTY.prototype.handleKey = function(mod, key, combo, char, event) {
        switch (key) {
            case 'enter':
                return this.pty.write('\r');
            case 'backspace':
                return this.pty.write('\x08');
            default:
                if (char) {
                    return this.pty.write(char);
                } else {
                    return klog('key', mod, key, combo);
                }
        }
    };

    PTY.prototype.onData = function(data) {
        var ch, ci, code, col, crazyNewlines, imeds, line, next, param, ref1, row;
        line = '';
        code = 0;
        ci = -1;
        ch = null;
        crazyNewlines = 0;
        next = function() {
            ci += 1;
            ch = data[ci];
            return code = ch.charCodeAt(0);
        };
        while (ci < data.length - 1) {
            next();
            switch (code) {
                case 7:
                    klog('ðŸ””');
                    break;
                case 8:
                    this.editor.deleteBackward({
                        singleCharacter: true
                    });
                    if (data[ci + 1] === ' ' && data[ci + 2].charCodeAt(0) === 8) {
                        next();
                        next();
                    }
                    break;
                case 27:
                    next();
                    if ((0x40 <= code && code <= 0x5f)) {
                        switch (ch) {
                            case '[':
                                param = '';
                                imeds = '';
                                next();
                                while ((0x30 <= code && code <= 0x3F)) {
                                    param += ch;
                                    next();
                                }
                                while ((0x20 <= code && code <= 0x2F)) {
                                    imeds += ch;
                                    next();
                                }
                                if ((0x40 <= code && code <= 0x7E)) {
                                    klog("    esc[" + param + imeds + ch);
                                    switch (ch) {
                                        case 'm':
                                            line += "\x1B[" + param + imeds + ch;
                                            break;
                                        case 'X':
                                            if (data.slice(ci + 1) === ("\x1b[" + param + "C\x0d")) {
                                                ci += 3 + param.length;
                                                klog('skipped crazy newline', data[ci + 1]);
                                            }
                                            break;
                                        case 'C':
                                            if (data[ci + 1] === '\r' && data[ci + 2] === '\n') {
                                                if (parseInt(param) === this.pty.cols) {
                                                    ci += 2;
                                                    crazyNewlines += 1;
                                                }
                                            }
                                            break;
                                        case 'J':
                                            switch (param) {
                                                case '0':
                                                case '':
                                                    klog('erase below');
                                                    break;
                                                case '1':
                                                    klog('erase above');
                                                    break;
                                                case '2':
                                                    klog('erase all');
                                                    break;
                                                case '3':
                                                    klog('erase saved');
                                                    break;
                                                default:
                                                    console.log('erase ???');
                                            }
                                            break;
                                        case 'H':
                                            if (param.length) {
                                                ref1 = param.split(';'), row = ref1[0], col = ref1[1];
                                                if (col != null) {
                                                    col;
                                                } else {
                                                    col = 1;
                                                }
                                            } else {
                                                row = col = 1;
                                                crazyNewlines = 0;
                                                while (data[ci + 1] === '\r' && data[ci + 2] === '\n') {
                                                    ci += 2;
                                                }
                                            }
                                            klog("    move cursor row " + row + " col " + col);
                                    }
                                }
                                break;
                            case ']':
                                if (data[ci + 1] === '0' && data[ci + 2] === ';') {
                                    next();
                                    next();
                                    next();
                                    title = '';
                                    while (code !== 7) {
                                        title += ch;
                                        next();
                                    }
                                }
                        }
                    }
                    break;
                case 10:
                    while (crazyNewlines > 0) {
                        this.editor.appendText('');
                        this.editor.singleCursorAtEnd();
                        crazyNewlines -= 1;
                    }
                    klog(">>>|" + line + "|");
                    this.editor.appendInputText(line);
                    this.editor.appendText('');
                    this.editor.singleCursorAtEnd();
                    line = '';
                    break;
                default:
                    line += ch;
            }
        }
        if (line.trim().length) {
            klog("!!!|" + line + "|");
            return this.editor.appendInputText(line);
        } else if (data === ' ') {
            return this.editor.appendInputText(' ');
        }
    };

    return PTY;

})();

module.exports = PTY;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/pty.coffee