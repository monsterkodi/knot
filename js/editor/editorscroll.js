// koffee 1.12.0

/*
00000000  0000000    000  000000000   0000000   00000000          0000000   0000000  00000000    0000000   000      000      
000       000   000  000     000     000   000  000   000        000       000       000   000  000   000  000      000      
0000000   000   000  000     000     000   000  0000000          0000000   000       0000000    000   000  000      000      
000       000   000  000     000     000   000  000   000             000  000       000   000  000   000  000      000      
00000000  0000000    000     000      0000000   000   000        0000000    0000000  000   000   0000000   0000000  0000000
 */
var EditorScroll, clamp, events, kerror, kxk, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), clamp = ref.clamp, kerror = ref.kerror;

events = require('events');

kxk = require('kxk');

EditorScroll = (function(superClass) {
    extend(EditorScroll, superClass);

    function EditorScroll(editor) {
        var ref1;
        this.editor = editor;
        this.setLineHeight = bind(this.setLineHeight, this);
        this.setNumLines = bind(this.setNumLines, this);
        this.setViewHeight = bind(this.setViewHeight, this);
        this.reset = bind(this.reset, this);
        this.setTop = bind(this.setTop, this);
        this.by = bind(this.by, this);
        this.to = bind(this.to, this);
        this.horizontal = bind(this.horizontal, this);
        this.start = bind(this.start, this);
        EditorScroll.__super__.constructor.call(this);
        this.lineHeight = (ref1 = this.editor.size.lineHeight) != null ? ref1 : 0;
        this.viewHeight = -1;
        this.init();
    }

    EditorScroll.prototype.init = function() {
        this.scroll = 0;
        this.offsetTop = 0;
        this.offsetSmooth = 0;
        this.viewHeight = -1;
        this.fullHeight = -1;
        this.fullLines = -1;
        this.viewLines = -1;
        this.scrollMax = -1;
        this.numLines = -1;
        this.top = -1;
        return this.bot = -1;
    };

    EditorScroll.prototype.start = function(viewHeight, numLines) {
        this.viewHeight = viewHeight;
        this.numLines = numLines;
        this.fullHeight = this.numLines * this.lineHeight;
        this.top = 0;
        this.bot = this.top - 1;
        this.calc();
        return this.by(0);
    };

    EditorScroll.prototype.calc = function() {
        if (this.viewHeight <= 0) {
            return;
        }
        this.scrollMax = Math.max(0, this.fullHeight - this.viewHeight);
        this.fullLines = Math.floor(this.viewHeight / this.lineHeight);
        return this.viewLines = Math.ceil(this.viewHeight / this.lineHeight) + 1;
    };

    EditorScroll.prototype.horizontal = function(x) {
        if (x == null) {
            x = 0;
        }
        return this.editor.layerScroll.scrollLeft += x;
    };

    EditorScroll.prototype.to = function(p) {
        return this.by(p - this.scroll);
    };

    EditorScroll.prototype.by = function(delta) {
        var offset, scroll, top;
        if (this.viewLines < 0) {
            return;
        }
        if (!delta && this.top < this.bot) {
            return;
        }
        scroll = this.scroll;
        if (Number.isNaN(delta)) {
            delta = 0;
        }
        this.scroll = parseInt(clamp(0, this.scrollMax, this.scroll + delta));
        top = parseInt(this.scroll / this.lineHeight);
        this.offsetSmooth = this.scroll - top * this.lineHeight;
        this.setTop(top);
        offset = 0;
        offset += this.offsetSmooth;
        offset += (top - this.top) * this.lineHeight;
        if (offset !== this.offsetTop || scroll !== this.scroll) {
            this.offsetTop = parseInt(offset);
            this.updateOffset();
            return this.emit('scroll', this.scroll, this.offsetTop);
        }
    };

    EditorScroll.prototype.setTop = function(top) {
        var num, oldBot, oldTop;
        oldTop = this.top;
        oldBot = this.bot;
        this.bot = Math.min(top + this.viewLines, this.numLines - 1);
        this.top = Math.max(0, this.bot - this.viewLines);
        if (oldTop === this.top && oldBot === this.bot) {
            return;
        }
        if ((this.top > oldBot) || (this.bot < oldTop) || (oldBot < oldTop)) {
            num = this.bot - this.top + 1;
            if (num > 0) {
                return this.emit('showLines', this.top, this.bot, num);
            }
        } else {
            num = this.top - oldTop;
            if (0 < Math.abs(num)) {
                return this.emit('shiftLines', this.top, this.bot, num);
            }
        }
    };

    EditorScroll.prototype.lineIndexIsInView = function(li) {
        return (this.top <= li && li <= this.bot);
    };

    EditorScroll.prototype.reset = function() {
        this.emit('clearLines');
        this.init();
        return this.updateOffset();
    };

    EditorScroll.prototype.setViewHeight = function(h) {
        if (this.viewHeight !== h) {
            this.bot = this.top - 1;
            this.viewHeight = h;
            this.calc();
            return this.by(0);
        }
    };

    EditorScroll.prototype.setNumLines = function(n, opt) {
        if (this.numLines !== n) {
            this.fullHeight = n * this.lineHeight;
            if (n) {
                if ((opt != null ? opt.showLines : void 0) !== false) {
                    this.bot = this.top - 1;
                }
                this.numLines = n;
                this.calc();
                return this.by(0);
            } else {
                this.init();
                return this.emit('clearLines');
            }
        }
    };

    EditorScroll.prototype.setLineHeight = function(h) {
        if (Number.isNaN(h)) {
            return kerror('editorscroll.setLineHeight -- NaN');
        }
        if (this.lineHeight !== h) {
            this.lineHeight = h;
            this.fullHeight = this.numLines * this.lineHeight;
            this.calc();
            return this.by(0);
        }
    };

    EditorScroll.prototype.updateOffset = function() {
        return this.editor.layers.style.transform = "translate3d(0,-" + this.offsetTop + "px, 0)";
    };

    EditorScroll.prototype.cursorToTop = function(topDist) {
        var cp, hl, rg, sl;
        if (topDist == null) {
            topDist = 7;
        }
        cp = this.editor.cursorPos();
        if (cp[1] - this.top > topDist) {
            rg = [this.top, Math.max(0, cp[1] - 1)];
            sl = this.editor.selectionsInLineIndexRange(rg);
            hl = this.editor.highlightsInLineIndexRange(rg);
            if ((sl.length === 0 && 0 === hl.length)) {
                return this.by(this.lineHeight * (cp[1] - this.top - topDist));
            }
        }
    };

    EditorScroll.prototype.cursorIntoView = function() {
        var delta;
        if (delta = this.deltaToEnsureMainCursorIsVisible()) {
            this.by(delta * this.lineHeight - this.offsetSmooth);
        }
        return this.updateCursorOffset();
    };

    EditorScroll.prototype.deltaToEnsureMainCursorIsVisible = function() {
        var cl, maindelta, offset, ref1, ref2;
        maindelta = 0;
        cl = this.editor.mainCursor()[1];
        offset = (ref1 = (ref2 = this.editor.config) != null ? ref2.scrollOffset : void 0) != null ? ref1 : 2;
        if (cl < this.top + offset + this.offsetTop / this.lineHeight) {
            maindelta = cl - (this.top + offset + this.offsetTop / this.lineHeight);
        } else if (cl > this.top + this.fullLines - offset - 1) {
            maindelta = cl - (this.top + this.fullLines - offset - 1);
        }
        return maindelta;
    };

    EditorScroll.prototype.updateCursorOffset = function() {
        var charWidth, cx, layersWidth, offsetX, scrollLeft;
        offsetX = this.editor.size.offsetX;
        charWidth = this.editor.size.charWidth;
        layersWidth = this.editor.layersWidth;
        scrollLeft = this.editor.layerScroll.scrollLeft;
        cx = this.editor.mainCursor()[0] * charWidth + offsetX;
        if (cx - scrollLeft > layersWidth) {
            return this.editor.layerScroll.scrollLeft = Math.max(0, cx - layersWidth + charWidth);
        } else if (cx - offsetX - scrollLeft < 0) {
            return this.editor.layerScroll.scrollLeft = Math.max(0, cx - offsetX);
        }
    };

    EditorScroll.prototype.info = function() {
        return {
            topbot: this.top + " .. " + this.bot + " = " + (this.bot - this.top) + " / " + this.numLines + " lines",
            scroll: this.scroll + " offsetTop " + this.offsetTop + " viewHeight " + this.viewHeight + " scrollMax " + this.scrollMax + " fullLines " + this.fullLines + " viewLines " + this.viewLines
        };
    };

    return EditorScroll;

})(events);

module.exports = EditorScroll;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yc2Nyb2xsLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uL2NvZmZlZS9lZGl0b3IiLCJzb3VyY2VzIjpbImVkaXRvcnNjcm9sbC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsNkNBQUE7SUFBQTs7OztBQVFBLE1BQW9CLE9BQUEsQ0FBUSxLQUFSLENBQXBCLEVBQUUsaUJBQUYsRUFBUzs7QUFFVCxNQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVI7O0FBQ1QsR0FBQSxHQUFTLE9BQUEsQ0FBUSxLQUFSOztBQUVIOzs7SUFFQyxzQkFBQyxNQUFEO0FBRUMsWUFBQTtRQUZBLElBQUMsQ0FBQSxTQUFEOzs7Ozs7Ozs7O1FBRUEsNENBQUE7UUFDQSxJQUFDLENBQUEsVUFBRCx5REFBd0M7UUFDeEMsSUFBQyxDQUFBLFVBQUQsR0FBYyxDQUFDO1FBQ2YsSUFBQyxDQUFBLElBQUQsQ0FBQTtJQUxEOzsyQkFhSCxJQUFBLEdBQU0sU0FBQTtRQUVGLElBQUMsQ0FBQSxNQUFELEdBQWlCO1FBQ2pCLElBQUMsQ0FBQSxTQUFELEdBQWlCO1FBQ2pCLElBQUMsQ0FBQSxZQUFELEdBQWlCO1FBRWpCLElBQUMsQ0FBQSxVQUFELEdBQWdCLENBQUM7UUFDakIsSUFBQyxDQUFBLFVBQUQsR0FBZ0IsQ0FBQztRQUNqQixJQUFDLENBQUEsU0FBRCxHQUFnQixDQUFDO1FBQ2pCLElBQUMsQ0FBQSxTQUFELEdBQWdCLENBQUM7UUFDakIsSUFBQyxDQUFBLFNBQUQsR0FBZ0IsQ0FBQztRQUNqQixJQUFDLENBQUEsUUFBRCxHQUFnQixDQUFDO1FBQ2pCLElBQUMsQ0FBQSxHQUFELEdBQWdCLENBQUM7ZUFDakIsSUFBQyxDQUFBLEdBQUQsR0FBZ0IsQ0FBQztJQWJmOzsyQkFlTixLQUFBLEdBQU8sU0FBQyxVQUFELEVBQWMsUUFBZDtRQUFDLElBQUMsQ0FBQSxhQUFEO1FBQWEsSUFBQyxDQUFBLFdBQUQ7UUFFakIsSUFBQyxDQUFBLFVBQUQs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Q0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLEVBQUEsR0FBSyxPQUFqQixFQUZoQzs7SUFiVzs7MkJBdUJwQixJQUFBLEdBQU0sU0FBQTtlQUVGO1lBQUEsTUFBQSxFQUFXLElBQUMsQ0FBQSxHQUFGLEdBQU0sTUFBTixHQUFZLElBQUMsQ0FBQSxHQUFiLEdBQWlCLEtBQWpCLEdBQXFCLENBQUMsSUFBQyxDQUFBLEdBQUQsR0FBSyxJQUFDLENBQUEsR0FBUCxDQUFyQixHQUFnQyxLQUFoQyxHQUFxQyxJQUFDLENBQUEsUUFBdEMsR0FBK0MsUUFBekQ7WUFDQSxNQUFBLEVBQVcsSUFBQyxDQUFBLE1BQUYsR0FBUyxhQUFULEdBQXNCLElBQUMsQ0FBQSxTQUF2QixHQUFpQyxjQUFqQyxHQUErQyxJQUFDLENBQUEsVUFBaEQsR0FBMkQsYUFBM0QsR0FBd0UsSUFBQyxDQUFBLFNBQXpFLEdBQW1GLGFBQW5GLEdBQWdHLElBQUMsQ0FBQSxTQUFqRyxHQUEyRyxhQUEzRyxHQUF3SCxJQUFDLENBQUEsU0FEbkk7O0lBRkU7Ozs7R0F4UWlCOztBQTZRM0IsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMDAwMDAwICAwMDAwMDAwICAgIDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgICAgICAgIDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgICAgMDAwICAgICAgXG4wMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgIFxuMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgICAgICAwMDAwMDAwICAgMDAwICAgICAgIDAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAgICBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgXG4wMDAwMDAwMCAgMDAwMDAwMCAgICAwMDAgICAgIDAwMCAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAgIFxuIyMjXG5cbnsgY2xhbXAsIGtlcnJvciB9ID0gcmVxdWlyZSAna3hrJ1xuXG5ldmVudHMgPSByZXF1aXJlICdldmVudHMnXG5reGsgICAgPSByZXF1aXJlICdreGsnXG5cbmNsYXNzIEVkaXRvclNjcm9sbCBleHRlbmRzIGV2ZW50c1xuXG4gICAgQDogKEBlZGl0b3IpIC0+XG5cbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBAbGluZUhlaWdodCA9IEBlZGl0b3Iuc2l6ZS5saW5lSGVpZ2h0ID8gMFxuICAgICAgICBAdmlld0hlaWdodCA9IC0xXG4gICAgICAgIEBpbml0KClcbiAgICAgICAgXG4gICAgIyAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAwMDBcbiAgICAjIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgIDAwMCAgIFxuICAgICMgMDAwICAwMDAgMCAwMDAgIDAwMCAgICAgMDAwICAgXG4gICAgIyAwMDAgIDAwMCAgMDAwMCAgMDAwICAgICAwMDAgICBcbiAgICAjIDAwMCAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgIFxuXG4gICAgaW5pdDogLT5cbiAgICAgICAgXG4gICAgICAgIEBzY3JvbGwgICAgICAgPSAgMCAjIGN1cnJlbnQgc2Nyb2xsIHZhbHVlIGZyb20gZG9jdW1lbnQgc3RhcnQgKHBpeGVscylcbiAgICAgICAgQG9mZnNldFRvcCAgICA9ICAwICMgaGVpZ2h0IG9mIHZpZXcgYWJvdmUgZmlyc3QgdmlzaWJsZSBsaW5lIChwaXhlbHMpXG4gICAgICAgIEBvZmZzZXRTbW9vdGggPSAgMCAjIHNtb290aCBzY3JvbGxpbmcgb2Zmc2V0IC8gcGFydCBvZiB0b3AgbGluZSB0aGF0IGlzIGhpZGRlbiAocGl4ZWxzKVxuICAgICAgICBcbiAgICAgICAgQHZpZXdIZWlnaHQgICA9IC0xXG4gICAgICAgIEBmdWxsSGVpZ2h0ICAgPSAtMSAjIHRvdGFsIGhlaWdodCBvZiBidWZmZXIgKHBpeGVscylcbiAgICAgICAgQGZ1bGxMaW5lcyAgICA9IC0xICMgbnVtYmVyIG9mIGZ1bGwgbGluZXMgZml0dGluZyBpbiB2aWV3IChleGNsdWRpbmcgcGFydGlhbHMpXG4gICAgICAgIEB2aWV3TGluZXMgICAgPSAtMSAjIG51bWJlciBvZiBsaW5lcyBmaXR0aW5nIGluIHZpZXcgKGluY2x1ZGluZyBwYXJ0aWFscylcbiAgICAgICAgQHNjcm9sbE1heCAgICA9IC0xICMgbWF4aW11bSBzY3JvbGwgb2Zmc2V0IChwaXhlbHMpXG4gICAgICAgIEBudW1MaW5lcyAgICAgPSAtMSAjIHRvdGFsIG51bWJlciBvZiBsaW5lcyBpbiBidWZmZXJcbiAgICAgICAgQHRvcCAgICAgICAgICA9IC0xICMgaW5kZXggb2YgZmlyc3QgdmlzaWJsZSBsaW5lIGluIHZpZXdcbiAgICAgICAgQGJvdCAgICAgICAgICA9IC0xICMgaW5kZXggb2YgbGFzdCAgdmlzaWJsZSBsaW5lIGluIHZpZXdcblxuICAgIHN0YXJ0OiAoQHZpZXdIZWlnaHQsIEBudW1MaW5lcykgPT5cbiAgICAgICAgXG4gICAgICAgIEBmdWxsSGVpZ2h0ID0gQG51bUxpbmVzICogQGxpbmVIZWlnaHRcbiAgICAgICAgQHRvcCA9IDBcbiAgICAgICAgQGJvdCA9IEB0b3AtMVxuICAgICAgICBAY2FsYygpXG4gICAgICAgIEBieSAwXG5cbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgICAgICAwMDAwMDAwICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgICAgICAwMDAwMDAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiAgICAjICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICBcbiAgICBcbiAgICBjYWxjOiAtPlxuICAgICAgICBcbiAgICAgICAgaWYgQHZpZXdIZWlnaHQgPD0gMFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgQHNjcm9sbE1heCAgID0gTWF0aC5tYXgoMCxAZnVsbEhlaWdodCAtIEB2aWV3SGVpZ2h0KSAgICMgbWF4aW11bSBzY3JvbGwgb2Zmc2V0IChwaXhlbHMpXG4gICAgICAgIEBmdWxsTGluZXMgICA9IE1hdGguZmxvb3IoQHZpZXdIZWlnaHQgLyBAbGluZUhlaWdodCkgICAjIG51bWJlciBvZiBsaW5lcyBpbiB2aWV3IChleGNsdWRpbmcgcGFydGlhbHMpXG4gICAgICAgIEB2aWV3TGluZXMgICA9IE1hdGguY2VpbChAdmlld0hlaWdodCAvIEBsaW5lSGVpZ2h0KSsxICAjIG51bWJlciBvZiBsaW5lcyBpbiB2aWV3IChpbmNsdWRpbmcgcGFydGlhbHMpXG4gICAgICAgIFxuICAgICAgICAjIGtsb2cgJ2NhbGMnIEB2aWV3TGluZXMsIEBsaW5lSGVpZ2h0XG4gICAgICAgIFxuICAgIGhvcml6b250YWw6ICh4PTApID0+IEBlZGl0b3IubGF5ZXJTY3JvbGwuc2Nyb2xsTGVmdCArPSB4XG4gICAgICAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAgICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgIDAwMCAwMDAgXG4gICAgIyAwMDAwMDAwICAgICAgMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAgICAwMDAgICBcbiAgICAjIDAwMDAwMDAgICAgICAgMDAwICAgXG4gICAgICAgICAgICAgICAgXG4gICAgdG86IChwKSA9PiBAYnkgcC1Ac2Nyb2xsXG4gICAgXG4gICAgYnk6IChkZWx0YSkgPT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBAdmlld0xpbmVzIDwgMFxuICAgICAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gaWYgbm90IGRlbHRhIGFuZCBAdG9wIDwgQGJvdFxuICAgICAgICBcbiAgICAgICAgc2Nyb2xsID0gQHNjcm9sbFxuICAgICAgICBkZWx0YSA9IDAgaWYgTnVtYmVyLmlzTmFOIGRlbHRhXG4gICAgICAgIEBzY3JvbGwgPSBwYXJzZUludCBjbGFtcCAwLCBAc2Nyb2xsTWF4LCBAc2Nyb2xsK2RlbHRhXG4gICAgICAgIHRvcCA9IHBhcnNlSW50IEBzY3JvbGwgLyBAbGluZUhlaWdodFxuICAgICAgICBAb2Zmc2V0U21vb3RoID0gQHNjcm9sbCAtIHRvcCAqIEBsaW5lSGVpZ2h0IFxuICAgICAgICBcbiAgICAgICAgQHNldFRvcCB0b3BcblxuICAgICAgICBvZmZzZXQgPSAwXG4gICAgICAgIG9mZnNldCArPSBAb2Zmc2V0U21vb3RoXG4gICAgICAgIG9mZnNldCArPSAodG9wIC0gQHRvcCkgKiBAbGluZUhlaWdodFxuICAgICAgICBcbiAgICAgICAgaWYgb2Zmc2V0ICE9IEBvZmZzZXRUb3Agb3Igc2Nyb2xsICE9IEBzY3JvbGxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgQG9mZnNldFRvcCA9IHBhcnNlSW50IG9mZnNldFxuICAgICAgICAgICAgQHVwZGF0ZU9mZnNldCgpXG4gICAgICAgICAgICBAZW1pdCAnc2Nyb2xsJyBAc2Nyb2xsLCBAb2Zmc2V0VG9wXG5cbiAgICAjICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAwMDAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwMDAwMCBcbiAgICAjICAgICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMDAgICAgIDAwMCAgICAgICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMCAgICAgIFxuICAgICAgICAgICAgXG4gICAgc2V0VG9wOiAodG9wKSA9PlxuICAgICAgICBcbiAgICAgICAgb2xkVG9wID0gQHRvcFxuICAgICAgICBvbGRCb3QgPSBAYm90XG4gICAgICAgIFxuICAgICAgICBAYm90ID0gTWF0aC5taW4gdG9wK0B2aWV3TGluZXMsIEBudW1MaW5lcy0xXG4gICAgICAgIEB0b3AgPSBNYXRoLm1heCAwLCBAYm90IC0gQHZpZXdMaW5lc1xuXG4gICAgICAgICMga2xvZyAnb2xkJyBvbGRUb3AsIG9sZEJvdCwgQHRvcCwgQGJvdCwgQHZpZXdMaW5lcywgQG51bUxpbmVzXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaWYgb2xkVG9wID09IEB0b3AgYW5kIG9sZEJvdCA9PSBAYm90XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgKEB0b3AgPiBvbGRCb3QpIG9yIChAYm90IDwgb2xkVG9wKSBvciAob2xkQm90IDwgb2xkVG9wKSBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgIyBrbG9nICdzdGFydCBmcm9tIHNjcmF0Y2gnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICMgbmV3IHJhbmdlIG91dHNpZGUsIHN0YXJ0IGZyb20gc2NyYXRjaFxuICAgICAgICAgICAgbnVtID0gQGJvdCAtIEB0b3AgKyAxXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIG51bSA+IDBcbiAgICAgICAgICAgICAgICBAZW1pdCAnc2hvd0xpbmVzJyBAdG9wLCBAYm90LCBudW1cblxuICAgICAgICBlbHNlICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICMga2xvZyAnc2hpZnRMaW5lcydcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbnVtID0gQHRvcCAtIG9sZFRvcFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAwIDwgTWF0aC5hYnMgbnVtXG4gICAgICAgICAgICAgICAgQGVtaXQgJ3NoaWZ0TGluZXMnIEB0b3AsIEBib3QsIG51bVxuICAgICAgICAgICAgICAgIFxuICAgIGxpbmVJbmRleElzSW5WaWV3OiAobGkpIC0+IEB0b3AgPD0gbGkgPD0gQGJvdFxuICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAgICAgICAgMDAwICAgXG4gICAgIyAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgICAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwMCAgICAgMDAwICAgXG4gICAgXG4gICAgcmVzZXQ6ID0+XG4gICAgICAgIFxuICAgICAgICBAZW1pdCAnY2xlYXJMaW5lcydcbiAgICAgICAgQGluaXQoKVxuICAgICAgICBAdXBkYXRlT2Zmc2V0KClcbiAgICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAwMDAgICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgXG4gICAgIyAgMDAwIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMDAwMDAwMCAgICAgMDAwICAgXG4gICAgIyAgICAwMDAgICAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgXG4gICAgIyAgICAgMCAgICAgIDAwMCAgMDAwMDAwMDAgIDAwICAgICAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgMDAwICAgXG5cbiAgICBzZXRWaWV3SGVpZ2h0OiAoaCkgPT5cbiAgICAgICAgXG4gICAgICAgIGlmIEB2aWV3SGVpZ2h0ICE9IGhcbiAgICAgICAgICAgIEBib3QgPSBAdG9wLTEgIyBhbHdheXMgZW1pdCBzaG93TGluZXMgaWYgaGVpZ2h0IGNoYW5nZXNcbiAgICAgICAgICAgIEB2aWV3SGVpZ2h0ID0gaFxuICAgICAgICAgICAgQGNhbGMoKVxuICAgICAgICAgICAgQGJ5IDBcbiAgICAgICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwICAgICAwMCAgMDAwICAgICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMFxuICAgICMgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAgIFxuICAgICMgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwICAgICAgMDAwICAwMDAgMCAwMDAgIDAwMDAwMDAgICAwMDAwMDAwIFxuICAgICMgMDAwICAwMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgICAgICAgICAgIDAwMFxuICAgICMgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwIFxuICAgICAgICBcbiAgICBzZXROdW1MaW5lczogKG4sIG9wdCkgPT5cbiAgICAgICAgXG4gICAgICAgIGlmIEBudW1MaW5lcyAhPSBuXG4gICAgICAgICAgICBAZnVsbEhlaWdodCA9IG4gKiBAbGluZUhlaWdodFxuICAgICAgICAgICAgaWYgblxuICAgICAgICAgICAgICAgIGlmIG9wdD8uc2hvd0xpbmVzICE9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIEBib3QgPSBAdG9wLTEgIyBhbHdheXMgZW1pdCBzaG93TGluZXMgaWYgbGluZSBudW1iZXIgY2hhbmdlc1xuICAgICAgICAgICAgICAgIEBudW1MaW5lcyA9IG5cbiAgICAgICAgICAgICAgICBAY2FsYygpXG4gICAgICAgICAgICAgICAgQGJ5IDBcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBAaW5pdCgpXG4gICAgICAgICAgICAgICAgQGVtaXQgJ2NsZWFyTGluZXMnICAgICAgICAgICAgIFxuXG4gICAgIyAwMDAgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgMDAwICAgICAwMDAgICBcbiAgICAjIDAwMCAgICAgIDAwMCAgMDAwIDAgMDAwICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMDAwMDAwMCAgICAgMDAwICAgXG4gICAgIyAwMDAgICAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgIFxuICAgICMgMDAwMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgICAwMDAgICBcblxuICAgIHNldExpbmVIZWlnaHQ6IChoKSA9PlxuICAgICAgICAgICAgXG4gICAgICAgIHJldHVybiBrZXJyb3IgJ2VkaXRvcnNjcm9sbC5zZXRMaW5lSGVpZ2h0IC0tIE5hTicgaWYgTnVtYmVyLmlzTmFOIGhcbiAgICAgICAgIyBrbG9nICdzZXRMaW5lSGVpZ2h0JyBAbGluZUhlaWdodCwgaFxuICAgICAgICBpZiBAbGluZUhlaWdodCAhPSBoXG4gICAgICAgICAgICBAbGluZUhlaWdodCA9IGhcbiAgICAgICAgICAgIEBmdWxsSGVpZ2h0ID0gQG51bUxpbmVzICogQGxpbmVIZWlnaHRcbiAgICAgICAgICAgIEBjYWxjKClcbiAgICAgICAgICAgIEBieSAwXG5cbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAgICAgMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgICAgMDAwICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgICAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgICAwMDAgICAgIFxuICAgIFxuICAgIHVwZGF0ZU9mZnNldDogLT4gXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIEBlZGl0b3IubGF5ZXJzLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoMCwtI3tAb2Zmc2V0VG9wfXB4LCAwKVwiXG4gICAgICAgICAgICBcbiAgICAjICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwICBcbiAgICAgICAgICAgIFxuICAgIGN1cnNvclRvVG9wOiAodG9wRGlzdD03KSAtPlxuICAgICAgICBcbiAgICAgICAgY3AgPSBAZWRpdG9yLmN1cnNvclBvcygpXG4gICAgICAgIFxuICAgICAgICBpZiBjcFsxXSAtIEB0b3AgPiB0b3BEaXN0XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJnID0gW0B0b3AsIE1hdGgubWF4IDAsIGNwWzFdLTFdXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNsID0gQGVkaXRvci5zZWxlY3Rpb25zSW5MaW5lSW5kZXhSYW5nZSByZ1xuICAgICAgICAgICAgaGwgPSBAZWRpdG9yLmhpZ2hsaWdodHNJbkxpbmVJbmRleFJhbmdlIHJnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIHNsLmxlbmd0aCA9PSAwID09IGhsLmxlbmd0aFxuICAgICAgICAgICAgICAgIEBieSBAbGluZUhlaWdodCAqIChjcFsxXSAtIEB0b3AgLSB0b3BEaXN0KVxuXG4gICAgY3Vyc29ySW50b1ZpZXc6IC0+XG5cbiAgICAgICAgaWYgZGVsdGEgPSBAZGVsdGFUb0Vuc3VyZU1haW5DdXJzb3JJc1Zpc2libGUoKVxuICAgICAgICAgICAgQGJ5IGRlbHRhICogQGxpbmVIZWlnaHQgLSBAb2Zmc2V0U21vb3RoXG4gICAgICAgICAgICBcbiAgICAgICAgQHVwZGF0ZUN1cnNvck9mZnNldCgpXG5cbiAgICBkZWx0YVRvRW5zdXJlTWFpbkN1cnNvcklzVmlzaWJsZTogLT5cbiAgICAgICAgXG4gICAgICAgIG1haW5kZWx0YSA9IDBcbiAgICAgICAgY2wgPSBAZWRpdG9yLm1haW5DdXJzb3IoKVsxXVxuICAgICAgICBcbiAgICAgICAgb2Zmc2V0ID0gQGVkaXRvci5jb25maWc/LnNjcm9sbE9mZnNldCA/IDJcbiAgICAgICAgXG4gICAgICAgIGlmIGNsIDwgQHRvcCArIG9mZnNldCArIEBvZmZzZXRUb3AgLyBAbGluZUhlaWdodFxuICAgICAgICAgICAgbWFpbmRlbHRhID0gY2wgLSAoQHRvcCArIG9mZnNldCArIEBvZmZzZXRUb3AgLyBAbGluZUhlaWdodClcbiAgICAgICAgZWxzZSBpZiBjbCA+IEB0b3AgKyBAZnVsbExpbmVzIC0gb2Zmc2V0IC0gMVxuICAgICAgICAgICAgbWFpbmRlbHRhID0gY2wgLSAoQHRvcCArIEBmdWxsTGluZXMgLSBvZmZzZXQgLSAxKVxuXG4gICAgICAgIG1haW5kZWx0YVxuICAgICAgICAgICAgXG4gICAgdXBkYXRlQ3Vyc29yT2Zmc2V0OiAtPlxuICAgICAgICBcbiAgICAgICAgb2Zmc2V0WCAgICAgPSBAZWRpdG9yLnNpemUub2Zmc2V0WFxuICAgICAgICBjaGFyV2lkdGggICA9IEBlZGl0b3Iuc2l6ZS5jaGFyV2lkdGhcbiAgICAgICAgbGF5ZXJzV2lkdGggPSBAZWRpdG9yLmxheWVyc1dpZHRoXG4gICAgICAgIHNjcm9sbExlZnQgID0gQGVkaXRvci5sYXllclNjcm9sbC5zY3JvbGxMZWZ0XG5cbiAgICAgICAgY3ggPSBAZWRpdG9yLm1haW5DdXJzb3IoKVswXSpjaGFyV2lkdGgrb2Zmc2V0WFxuICAgICAgICBcbiAgICAgICAgaWYgY3gtc2Nyb2xsTGVmdCA+IGxheWVyc1dpZHRoXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEBlZGl0b3IubGF5ZXJTY3JvbGwuc2Nyb2xsTGVmdCA9IE1hdGgubWF4IDAsIGN4IC0gbGF5ZXJzV2lkdGggKyBjaGFyV2lkdGhcbiAgICAgICAgICAgIFxuICAgICAgICBlbHNlIGlmIGN4LW9mZnNldFgtc2Nyb2xsTGVmdCA8IDBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgQGVkaXRvci5sYXllclNjcm9sbC5zY3JvbGxMZWZ0ID0gTWF0aC5tYXggMCwgY3ggLSBvZmZzZXRYXG4gICAgICAgICAgICBcbiAgICAjIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgXG4gICAgIyAwMDAgIDAwMDAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAwMDAgMCAwMDAgIDAwMDAwMCAgICAwMDAgICAwMDBcbiAgICAjIDAwMCAgMDAwICAwMDAwICAwMDAgICAgICAgMDAwICAgMDAwXG4gICAgIyAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAwMDAwIFxuICAgIFxuICAgIGluZm86IC0+XG4gICAgICAgIFxuICAgICAgICB0b3Bib3Q6IFwiI3tAdG9wfSAuLiAje0Bib3R9ID0gI3tAYm90LUB0b3B9IC8gI3tAbnVtTGluZXN9IGxpbmVzXCJcbiAgICAgICAgc2Nyb2xsOiBcIiN7QHNjcm9sbH0gb2Zmc2V0VG9wICN7QG9mZnNldFRvcH0gdmlld0hlaWdodCAje0B2aWV3SGVpZ2h0fSBzY3JvbGxNYXggI3tAc2Nyb2xsTWF4fSBmdWxsTGluZXMgI3tAZnVsbExpbmVzfSB2aWV3TGluZXMgI3tAdmlld0xpbmVzfVwiXG4gICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBFZGl0b3JTY3JvbGxcbiJdfQ==
//# sourceURL=../../coffee/editor/editorscroll.coffee