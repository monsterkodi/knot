// koffee 1.12.0
var reversed;

reversed = require('kxk').reversed;

module.exports = {
    actions: {
        menu: 'Delete',
        deleteForward: {
            separator: true,
            name: 'Delete Forward',
            combo: 'delete',
            text: 'delete character to the right'
        },
        deleteToEndOfLine: {
            name: 'Delete to End of Line',
            combo: 'ctrl+shift+k',
            text: 'delete characters to the end of line'
        },
        deleteToEndOfLineOrWholeLine: {
            name: 'Delete to End of Line or Delete Whole Line',
            combo: 'ctrl+k',
            text: "delete characters to the end of line, if cursor is not at end of line.\ndelete whole line otherwise."
        }
    },
    deleteToEndOfLine: function() {
        this["do"].start();
        this.moveCursorsToLineBoundary('right', {
            extend: true
        });
        this.deleteSelection({
            deleteLines: false
        });
        return this["do"].end();
    },
    deleteToEndOfLineOrWholeLine: function() {
        var c, cursors, i, len;
        cursors = this["do"].isDoing() && this["do"].cursors() || this.cursors();
        for (i = 0, len = cursors.length; i < len; i++) {
            c = cursors[i];
            if (c[0] !== 0 && !this.isCursorAtEndOfLine(c)) {
                return this.deleteToEndOfLine();
            }
        }
        return this.deleteCursorLines();
    },
    deleteCursorLines: function() {
        this["do"].start();
        this.selectMoreLines();
        this.deleteSelection({
            deleteLines: !this.isInputCursor()
        });
        return this["do"].end();
    },
    deleteForward: function() {
        var c, i, j, k, l, len, len1, len2, len3, ll, nc, newCursors, ref, ref1, ref2, ref3;
        if (this.numSelections()) {
            return this.deleteSelection();
        } else {
            this["do"].start();
            newCursors = this["do"].cursors();
            ref = reversed(newCursors);
            for (i = 0, len = ref.length; i < len; i++) {
                c = ref[i];
                if (this.isCursorAtEndOfLine(c)) {
                    if (!this.isCursorInLastLine(c)) {
                        ll = this.line(c[1]).length;
                        this["do"].change(c[1], this["do"].line(c[1]) + this["do"].line(c[1] + 1));
                        this["do"]["delete"](c[1] + 1);
                        ref1 = positionsAtLineIndexInPositions(c[1] + 1, newCursors);
                        for (j = 0, len1 = ref1.length; j < len1; j++) {
                            nc = ref1[j];
                            cursorDelta(nc, ll, -1);
                        }
                        ref2 = positionsBelowLineIndexInPositions(c[1] + 1, newCursors);
                        for (k = 0, len2 = ref2.length; k < len2; k++) {
                            nc = ref2[k];
                            cursorDelta(nc, 0, -1);
                        }
                    }
                } else {
                    this["do"].change(c[1], this["do"].line(c[1]).splice(c[0], 1));
                    ref3 = positionsAtLineIndexInPositions(c[1], newCursors);
                    for (l = 0, len3 = ref3.length; l < len3; l++) {
                        nc = ref3[l];
                        if (nc[0] > c[0]) {
                            cursorDelta(nc, -1);
                        }
                    }
                }
            }
            this["do"].setCursors(newCursors);
            return this["do"].end();
        }
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlZm9yd2FyZC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9jb2ZmZWUvZWRpdG9yL2FjdGlvbnMiLCJzb3VyY2VzIjpbImRlbGV0ZWZvcndhcmQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFPQSxJQUFBOztBQUFFLFdBQWEsT0FBQSxDQUFRLEtBQVI7O0FBRWYsTUFBTSxDQUFDLE9BQVAsR0FFSTtJQUFBLE9BQUEsRUFDSTtRQUFBLElBQUEsRUFBTSxRQUFOO1FBRUEsYUFBQSxFQUNJO1lBQUEsU0FBQSxFQUFXLElBQVg7WUFDQSxJQUFBLEVBQVEsZ0JBRFI7WUFFQSxLQUFBLEVBQVEsUUFGUjtZQUdBLElBQUEsRUFBUSwrQkFIUjtTQUhKO1FBUUEsaUJBQUEsRUFDSTtZQUFBLElBQUEsRUFBUSx1QkFBUjtZQUNBLEtBQUEsRUFBUSxjQURSO1lBRUEsSUFBQSxFQUFRLHNDQUZSO1NBVEo7UUFhQSw0QkFBQSxFQUNJO1lBQUEsSUFBQSxFQUFRLDRDQUFSO1lBQ0EsS0FBQSxFQUFRLFFBRFI7WUFFQSxJQUFBLEVBQVEsc0dBRlI7U0FkSjtLQURKO0lBcUJBLGlCQUFBLEVBQW1CLFNBQUE7UUFFZixJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsS0FBSixDQUFBO1FBQ0EsSUFBQyxDQUFBLHlCQUFELENBQTJCLE9BQTNCLEVBQW1DO1lBQUEsTUFBQSxFQUFPLElBQVA7U0FBbkM7UUFDQSxJQUFDLENBQUEsZUFBRCxDQUFpQjtZQUFBLFdBQUEsRUFBWSxLQUFaO1NBQWpCO2VBQ0EsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLEdBQUosQ0FBQTtJQUxlLENBckJuQjtJQTRCQSw0QkFBQSxFQUE4QixTQUFBO0FBRTFCLFlBQUE7UUFBQSxPQUFBLEdBQVUsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLE9BQUosQ0FBQSxDQUFBLElBQWtCLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxPQUFKLENBQUEsQ0FBbEIsSUFBbUMsSUFBQyxDQUFBLE9BQUQsQ0FBQTtBQUM3QyxhQUFBLHlDQUFBOztZQUNJLElBQUcsQ0FBRSxDQUFBLENBQUEsQ0FBRixLQUFRLENBQVIsSUFBYyxDQUFJLElBQUMsQ0FBQSxtQkFBRCxDQUFxQixDQUFyQixDQUFyQjtBQUNJLHVCQUFPLElBQUMsQ0FBQSxpQkFBRCxDQUFBLEVBRFg7O0FBREo7ZUFJQSxJQUFDLENBQUEsaUJBQUQsQ0FBQTtJQVAwQixDQTVCOUI7SUFxQ0EsaUJBQUEsRUFBbUIsU0FBQTtRQUVmLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxLQUFKLENBQUE7UUFDQSxJQUFDLENBQUEsZUFBRCxDQUFBO1FBQ0EsSUFBQyxDQUFBLGVBQUQsQ0FBaUI7WUFBQSxXQUFBLEVBQVksQ0FBSSxJQUFDLENBQUEsYUFBRCxDQUFBLENBQWhCO1NBQWpCO2VBQ0EsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLEdBQUosQ0FBQTtJQUxlLENBckNuQjtJQTRDQSxhQUFBLEVBQWUsU0FBQTtBQUVYLFlBQUE7UUFBQSxJQUFHLElBQUMsQ0FBQSxhQUFELENBQUEsQ0FBSDttQkFDSSxJQUFDLENBQUEsZUFBRCxDQUFBLEVBREo7U0FBQSxNQUFBO1lBR0ksSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLEtBQUosQ0FBQTtZQUNBLFVBQUEsR0FBYSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsT0FBSixDQUFBO0FBQ2I7QUFBQSxpQkFBQSxxQ0FBQTs7Z0JBRUksSUFBRyxJQUFDLENBQUEsbUJBQUQsQ0FBcUIsQ0FBckIsQ0FBSDtvQkFDSSxJQUFHLENBQUksSUFBQyxDQUFBLGtCQUFELENBQW9CLENBQXBCLENBQVA7d0JBRUksRUFBQSxHQUFLLElBQUMsQ0FBQSxJQUFELENBQU0sQ0FBRSxDQUFBLENBQUEsQ0FBUixDQUFXLENBQUM7d0JBRWpCLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxNQUFKLENBQVcsQ0FBRSxDQUFBLENBQUEsQ0FBYixFQUFpQixJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsSUFBSixDQUFTLENBQUUsQ0FBQSxDQUFBLENBQVgsQ0FBQSxHQUFpQixJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsSUFBSixDQUFTLENBQUUsQ0FBQSxDQUFBLENBQUYsR0FBSyxDQUFkLENBQWxDO3dCQUNBLElBQUMsRUFBQSxFQUFBLEVBQUUsRUFBQyxNQUFELEVBQUgsQ0FBVyxDQUFFLENBQUEsQ0FBQSxDQUFGLEdBQUssQ0FBaEI7QUFHQTtBQUFBLDZCQUFBLHdDQUFBOzs0QkFDSSxXQUFBLENBQVksRUFBWixFQUFnQixFQUFoQixFQUFvQixDQUFDLENBQXJCO0FBREo7QUFHQTtBQUFBLDZCQUFBLHdDQUFBOzs0QkFDSSxXQUFBLENBQVksRUFBWixFQUFnQixDQUFoQixFQUFtQixDQUFDLENBQXBCO0FBREoseUJBWEo7cUJBREo7aUJBQUEsTUFBQTtvQkFlSSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsTUFBSixDQUFXLENBQUUsQ0FBQSxDQUFBLENBQWIsRUFBaUIsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLElBQUosQ0FBUyxDQUFFLENBQUEsQ0FBQSxDQUFYLENBQWMsQ0FBQyxNQUFmLENBQXNCLENBQUUsQ0FBQSxDQUFBLENBQXhCLEVBQTRCLENBQTVCLENBQWpCO0FBQ0E7QUFBQSx5QkFBQSx3Q0FBQTs7d0JBQ0ksSUFBRyxFQUFHLENBQUEsQ0FBQSxDQUFILEdBQVEsQ0FBRSxDQUFBLENBQUEsQ0FBYjs0QkFDSSxXQUFBLENBQVksRUFBWixFQUFnQixDQUFDLENBQWpCLEVBREo7O0FBREoscUJBaEJKOztBQUZKO1lBc0JBLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxVQUFKLENBQWUsVUFBZjttQkFDQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsR0FBSixDQUFBLEVBNUJKOztJQUZXLENBNUNmIiwic291cmNlc0NvbnRlbnQiOlsiXG4jIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4jIDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAgMDAwXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4jIDAwMCAgICAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAgICAgIDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgXG5cbnsgcmV2ZXJzZWQgfSA9IHJlcXVpcmUgJ2t4aycgXG5cbm1vZHVsZS5leHBvcnRzID1cbiAgICBcbiAgICBhY3Rpb25zOlxuICAgICAgICBtZW51OiAnRGVsZXRlJ1xuICAgICAgICBcbiAgICAgICAgZGVsZXRlRm9yd2FyZDpcbiAgICAgICAgICAgIHNlcGFyYXRvcjogdHJ1ZVxuICAgICAgICAgICAgbmFtZTogICAnRGVsZXRlIEZvcndhcmQnXG4gICAgICAgICAgICBjb21ibzogICdkZWxldGUnXG4gICAgICAgICAgICB0ZXh0OiAgICdkZWxldGUgY2hhcmFjdGVyIHRvIHRoZSByaWdodCdcblxuICAgICAgICBkZWxldGVUb0VuZE9mTGluZTpcbiAgICAgICAgICAgIG5hbWU6ICAgJ0RlbGV0ZSB0byBFbmQgb2YgTGluZSdcbiAgICAgICAgICAgIGNvbWJvOiAgJ2N0cmwrc2hpZnQraydcbiAgICAgICAgICAgIHRleHQ6ICAgJ2RlbGV0ZSBjaGFyYWN0ZXJzIHRvIHRoZSBlbmQgb2YgbGluZSdcbiAgICAgICAgICAgIFxuICAgICAgICBkZWxldGVUb0VuZE9mTGluZU9yV2hvbGVMaW5lOlxuICAgICAgICAgICAgbmFtZTogICAnRGVsZXRlIHRvIEVuZCBvZiBMaW5lIG9yIERlbGV0ZSBXaG9sZSBMaW5lJ1xuICAgICAgICAgICAgY29tYm86ICAnY3RybCtrJ1xuICAgICAgICAgICAgdGV4dDogICBcIlwiXCJkZWxldGUgY2hhcmFjdGVycyB0byB0aGUgZW5kIG9mIGxpbmUsIGlmIGN1cnNvciBpcyBub3QgYXQgZW5kIG9mIGxpbmUuXG4gICAgICAgICAgICAgICAgZGVsZXRlIHdob2xlIGxpbmUgb3RoZXJ3aXNlLlxuICAgICAgICAgICAgICAgIFwiXCJcIlxuICAgICAgICAgICAgICAgIFxuICAgIGRlbGV0ZVRvRW5kT2ZMaW5lOiAtPlxuICAgICAgICBcbiAgICAgICAgQGRvLnN0YXJ0KClcbiAgICAgICAgQG1vdmVDdXJzb3JzVG9MaW5lQm91bmRhcnkgJ3JpZ2h0JyBleHRlbmQ6dHJ1ZVxuICAgICAgICBAZGVsZXRlU2VsZWN0aW9uIGRlbGV0ZUxpbmVzOmZhbHNlXG4gICAgICAgIEBkby5lbmQoKVxuICAgICAgICBcbiAgICBkZWxldGVUb0VuZE9mTGluZU9yV2hvbGVMaW5lOiAtPlxuICAgICAgICBcbiAgICAgICAgY3Vyc29ycyA9IEBkby5pc0RvaW5nKCkgYW5kIEBkby5jdXJzb3JzKCkgb3IgQGN1cnNvcnMoKVxuICAgICAgICBmb3IgYyBpbiBjdXJzb3JzXG4gICAgICAgICAgICBpZiBjWzBdICE9IDAgYW5kIG5vdCBAaXNDdXJzb3JBdEVuZE9mTGluZShjKVxuICAgICAgICAgICAgICAgIHJldHVybiBAZGVsZXRlVG9FbmRPZkxpbmUoKVxuICAgICAgICBcbiAgICAgICAgQGRlbGV0ZUN1cnNvckxpbmVzKClcbiAgICAgICAgXG4gICAgZGVsZXRlQ3Vyc29yTGluZXM6IC0+XG4gICAgICAgIFxuICAgICAgICBAZG8uc3RhcnQoKVxuICAgICAgICBAc2VsZWN0TW9yZUxpbmVzKClcbiAgICAgICAgQGRlbGV0ZVNlbGVjdGlvbiBkZWxldGVMaW5lczpub3QgQGlzSW5wdXRDdXJzb3IoKVxuICAgICAgICBAZG8uZW5kKClcblxuICAgIGRlbGV0ZUZvcndhcmQ6IC0+XG4gICAgICAgIFxuICAgICAgICBpZiBAbnVtU2VsZWN0aW9ucygpXG4gICAgICAgICAgICBAZGVsZXRlU2VsZWN0aW9uKClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQGRvLnN0YXJ0KClcbiAgICAgICAgICAgIG5ld0N1cnNvcnMgPSBAZG8uY3Vyc29ycygpXG4gICAgICAgICAgICBmb3IgYyBpbiByZXZlcnNlZCBuZXdDdXJzb3JzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiBAaXNDdXJzb3JBdEVuZE9mTGluZSBjICMgY3Vyc29yIGF0IGVuZCBvZiBsaW5lXG4gICAgICAgICAgICAgICAgICAgIGlmIG5vdCBAaXNDdXJzb3JJbkxhc3RMaW5lIGNcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBsbCA9IEBsaW5lKGNbMV0pLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIEBkby5jaGFuZ2UgY1sxXSwgQGRvLmxpbmUoY1sxXSkgKyBAZG8ubGluZShjWzFdKzEpXG4gICAgICAgICAgICAgICAgICAgICAgICBAZG8uZGVsZXRlIGNbMV0rMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAjIG1vdmUgY3Vyc29ycyBpbiBqb2luZWQgbGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIG5jIGluIHBvc2l0aW9uc0F0TGluZUluZGV4SW5Qb3NpdGlvbnMgY1sxXSsxLCBuZXdDdXJzb3JzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yRGVsdGEgbmMsIGxsLCAtMVxuICAgICAgICAgICAgICAgICAgICAgICAgIyBtb3ZlIGN1cnNvcnMgYmVsb3cgZGVsZXRlZCBsaW5lIHVwXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgbmMgaW4gcG9zaXRpb25zQmVsb3dMaW5lSW5kZXhJblBvc2l0aW9ucyBjWzFdKzEsIG5ld0N1cnNvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3JEZWx0YSBuYywgMCwgLTFcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIEBkby5jaGFuZ2UgY1sxXSwgQGRvLmxpbmUoY1sxXSkuc3BsaWNlIGNbMF0sIDFcbiAgICAgICAgICAgICAgICAgICAgZm9yIG5jIGluIHBvc2l0aW9uc0F0TGluZUluZGV4SW5Qb3NpdGlvbnMgY1sxXSwgbmV3Q3Vyc29yc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgbmNbMF0gPiBjWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yRGVsdGEgbmMsIC0xXG5cbiAgICAgICAgICAgIEBkby5zZXRDdXJzb3JzIG5ld0N1cnNvcnNcbiAgICAgICAgICAgIEBkby5lbmQoKVxuIl19
//# sourceURL=../../../coffee/editor/actions/deleteforward.coffee