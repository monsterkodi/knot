// koffee 1.4.0
var Transform, _, args, kerror, kstr, matchr, ref, reversed, slash,
    indexOf = [].indexOf,
    slice = [].slice;

ref = require('kxk'), reversed = ref.reversed, matchr = ref.matchr, kerror = ref.kerror, slash = ref.slash, kstr = ref.kstr, args = ref.args, _ = ref._;

Transform = (function() {
    Transform.transformNames = ['upper', 'lower', 'title', 'case', 'count', 'add', 'sub', 'up', 'down', 'sort', 'uniq', 'reverse', 'resolve', 'unresolve', 'dir', 'base', 'file', 'ext'];

    Transform.transformMenus = {
        Case: ['upper', 'lower', 'title', 'case'],
        Calc: ['count', 'add', 'sub'],
        Sort: ['up', 'down', 'sort', 'uniq', 'reverse'],
        Path: ['resolve', 'unresolve', 'dir', 'base', 'file', 'ext']
    };

    function Transform(editor1) {
        this.editor = editor1;
        this.editor.transform = this;
        this.last = null;
        this.caseFuncs = ['upper', 'lower', 'title'];
        this.resolveFuncs = ['resolve', 'unresolve'];
        this.sortFuncs = ['up', 'down'];
    }

    Transform.prototype.count = function(typ, offset, step) {
        var base, cs, i, numbers, pad;
        if (typ == null) {
            typ = 'dec';
        }
        if (offset == null) {
            offset = 0;
        }
        if (step == null) {
            step = 1;
        }
        offset = parseInt(offset);
        step = parseInt(step);
        this.editor["do"].start();
        this.editor.fillVirtualSpaces();
        cs = this.editor["do"].cursors();
        this.editor["do"].select(rangesFromPositions(cs));
        switch (typ) {
            case 'hex':
                base = 16;
                break;
            case 'bin':
                base = 2;
                break;
            default:
                base = 10;
        }
        pad = Number(step * (cs.length - 1) + offset).toString(base).length;
        numbers = (function() {
            var j, ref1, results;
            results = [];
            for (i = j = 0, ref1 = cs.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
                results.push(_.padStart(Number(step * i + offset).toString(base), pad, '0'));
            }
            return results;
        })();
        this.editor.replaceSelectedText(numbers);
        this.editor["do"].end();
        return 'count';
    };

    Transform.prototype.add = function(d) {
        if (d == null) {
            d = 1;
        }
        this.apply(function(t) {
            return kstr(parseInt(t) + parseInt(d));
        });
        return 'add';
    };

    Transform.prototype.sub = function(d) {
        if (d == null) {
            d = 1;
        }
        this.apply(function(t) {
            return kstr(parseInt(t) - parseInt(d));
        });
        return 'sub';
    };

    Transform.prototype.reverse = function() {
        this.trans(function(l) {
            return reversed(l);
        });
        return 'reverse';
    };

    Transform.prototype.sort = function() {
        return this.toggle(this.sortFuncs);
    };

    Transform.prototype.up = function() {
        this.trans(function(l) {
            return l.sort(function(a, b) {
                return a.localeCompare(b);
            });
        });
        return 'up';
    };

    Transform.prototype.down = function() {
        this.trans(function(l) {
            return reversed(l.sort(function(a, b) {
                return a.localeCompare(b);
            }));
        });
        return 'down';
    };

    Transform.prototype.uniq = function() {
        this.trans(function(l) {
            var a, j, len, r, v;
            v = [];
            r = [];
            for (j = 0, len = l.length; j < len; j++) {
                a = l[j];
                r.push(indexOf.call(v, a) >= 0 ? '' : (v.push(a), a));
            }
            return r;
        });
        return 'uniq';
    };

    Transform.prototype["case"] = function() {
        return this.toggle(this.caseFuncs);
    };

    Transform.prototype.upper = function() {
        this.apply(function(t) {
            return t.toUpperCase();
        });
        return 'upper';
    };

    Transform.prototype.lower = function() {
        this.apply(function(t) {
            return t.toLowerCase();
        });
        return 'lower';
    };

    Transform.prototype.title = function() {
        var pattern;
        pattern = /\w+/;
        this.apply(function(t) {
            var j, len, r, ref1;
            ref1 = matchr.ranges(/\w+/, t);
            for (j = 0, len = ref1.length; j < len; j++) {
                r = ref1[j];
                t = t.splice(r.start, r.match.length, r.match.substr(0, 1).toUpperCase() + r.match.slice(1).toLowerCase());
            }
            return t;
        });
        return 'title';
    };

    Transform.prototype.toggleResolve = function() {
        return this.toggle(this.resolveFuncs);
    };

    Transform.prototype.resolve = function() {
        var cwd;
        cwd = process.cwd();
        if (this.editor.currentFile != null) {
            process.chdir(slash.dir(this.editor.currentFile));
        }
        this.apply(function(t) {
            return slash.resolve(t);
        });
        process.chdir(cwd);
        return 'resolve';
    };

    Transform.prototype.unresolve = function() {
        this.apply(function(t) {
            return slash.unresolve(t);
        });
        return 'unresolve';
    };

    Transform.prototype.base = function() {
        this.apply(function(t) {
            return slash.base(t);
        });
        return 'basename';
    };

    Transform.prototype.dir = function() {
        this.apply(function(t) {
            return slash.dir(t);
        });
        return 'dirname';
    };

    Transform.prototype.ext = function() {
        this.apply(function(t) {
            return slash.ext(t);
        });
        return 'ext';
    };

    Transform.prototype.file = function() {
        this.apply(function(t) {
            return slash.file(t);
        });
        return 'file';
    };

    Transform.prototype.apply = function(func) {
        return this.tfunc({
            apply: func
        });
    };

    Transform.prototype.trans = function(func) {
        return this.tfunc({
            trans: func
        });
    };

    Transform.prototype.tfunc = function(opt) {
        var selections, tl;
        if (!this.editor.numSelections()) {
            if (opt.trans) {
                this.editor.selectMoreLines();
            } else {
                this.editor.select(this.editor.rangesForWordsAtCursors());
            }
        }
        selections = this.editor.selections();
        tl = this.editor.textsInRanges(selections);
        if (opt.apply != null) {
            tl = tl.map(opt.apply);
        }
        if (opt.trans != null) {
            tl = opt.trans(tl);
        }
        this.editor["do"].start();
        this.editor.replaceSelectedText(tl);
        return this.editor["do"].end();
    };

    Transform.prototype.toggle = function(funcList) {
        var nextIndex, ref1;
        if (ref1 = this.last, indexOf.call(funcList, ref1) < 0) {
            this.last = _.last(funcList);
        }
        nextIndex = (1 + funcList.indexOf(this.last)) % funcList.length;
        return this["do"](funcList[nextIndex]);
    };

    Transform.prototype["do"] = function() {
        var args, f, transName;
        transName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        f = this[transName];
        if (f && _.isFunction(f)) {
            this.last = f.apply(this, args);
        } else {
            return kerror("unhandled transform " + transName);
        }
        return this.last;
    };

    Transform["do"] = function() {
        var args, editor, ref1, t, transName;
        editor = arguments[0], transName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
        t = (ref1 = editor.transform) != null ? ref1 : new Transform(editor);
        return t["do"].apply(t, [transName].concat(args));
    };

    return Transform;

})();

module.exports = {
    actions: {
        menu: 'Misc',
        toggleCase: {
            separator: true,
            name: 'Toggle Case',
            text: 'toggles selected texts between lower- upper- and title-case',
            combo: 'command+alt+ctrl+u',
            accel: 'alt+ctrl+u'
        },
        reverseSelection: {
            name: 'Reverse Selection',
            text: 'reverses the order of selected texts',
            combo: 'command+alt+ctrl+r',
            accel: 'alt+ctrl+r'
        },
        doTransform: {
            name: 'doTransform'
        }
    },
    toggleCase: function() {
        return Transform["do"](this, 'case');
    },
    reverseSelection: function() {
        return Transform["do"](this, 'reverse');
    },
    doTransform: function(arg) {
        return Transform["do"](this, arg);
    },
    Transform: Transform,
    transformNames: Transform.transformNames
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../../coffee/editor/actions/transform.coffee