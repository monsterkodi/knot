// koffee 1.12.0
var _, klog, ref,
    indexOf = [].indexOf;

ref = require('kxk'), klog = ref.klog, _ = ref._;

module.exports = {
    deleteSelectionOrCursorLines: function() {
        this["do"].start();
        if (!this["do"].numSelections()) {
            this.selectMoreLines();
        }
        this.deleteSelection({
            deleteLines: !this.isInputCursor()
        });
        return this["do"].end();
    },
    deleteSelection: function(opt) {
        var c, csel, ep, i, j, joinLines, k, l, len, len1, len2, len3, len4, len5, len6, lineSelected, m, n, nc, newCursors, o, oldSelections, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, rg, s, sp;
        if (opt == null) {
            opt = {
                deleteLines: !this.isInputCursor()
            };
        }
        this["do"].start();
        if (this["do"].numSelections()) {
            newCursors = this["do"].cursors();
            oldSelections = this["do"].selections();
            joinLines = [];
            ref1 = this["do"].cursors().reverse();
            for (i = 0, len = ref1.length; i < len; i++) {
                c = ref1[i];
                if (opt.deleteLines) {
                    csel = this.continuousSelectionAtPosInRanges(c, oldSelections);
                } else {
                    rg = rangeAtPosInRanges(c, oldSelections);
                    if (rg != null) {
                        csel = [rangeStartPos(rg), rangeEndPos(rg)];
                    }
                }
                if (csel != null) {
                    sp = csel[0], ep = csel[1];
                    ref2 = positionsBetweenPosAndPosInPositions(sp, ep, newCursors);
                    for (j = 0, len1 = ref2.length; j < len1; j++) {
                        nc = ref2[j];
                        cursorSet(nc, sp);
                    }
                    if (sp[1] < ep[1] && sp[0] > 0 && ep[0] < this["do"].line(ep[1]).length) {
                        joinLines.push(sp[1]);
                        ref3 = positionsAfterLineColInPositions(ep[1], ep[0], newCursors);
                        for (k = 0, len2 = ref3.length; k < len2; k++) {
                            nc = ref3[k];
                            cursorSet(nc, sp[0] + nc[0] - ep[0], sp[1]);
                        }
                    }
                }
            }
            ref4 = this["do"].selections().reverse();
            for (l = 0, len3 = ref4.length; l < len3; l++) {
                s = ref4[l];
                if (s[0] >= this["do"].numLines()) {
                    continue;
                }
                lineSelected = s[1][0] === 0 && s[1][1] === this["do"].line(s[0]).length;
                if (lineSelected && opt.deleteLines && this["do"].numLines() > 1) {
                    this["do"]["delete"](s[0]);
                    ref5 = positionsBelowLineIndexInPositions(s[0], newCursors);
                    for (m = 0, len4 = ref5.length; m < len4; m++) {
                        nc = ref5[m];
                        cursorDelta(nc, 0, -1);
                    }
                } else {
                    if (s[0] >= this["do"].numLines()) {
                        continue;
                    }
                    this["do"].change(s[0], this["do"].line(s[0]).splice(s[1][0], s[1][1] - s[1][0]));
                    ref6 = positionsAfterLineColInPositions(s[0], s[1][1], newCursors);
                    for (n = 0, len5 = ref6.length; n < len5; n++) {
                        nc = ref6[n];
                        cursorDelta(nc, -(s[1][1] - s[1][0]));
                    }
                }
                if (ref7 = s[0], indexOf.call(joinLines, ref7) >= 0) {
                    this["do"].change(s[0], this["do"].line(s[0]) + this["do"].line(s[0] + 1));
                    this["do"]["delete"](s[0] + 1);
                    ref8 = positionsBelowLineIndexInPositions(s[0], newCursors);
                    for (o = 0, len6 = ref8.length; o < len6; o++) {
                        nc = ref8[o];
                        cursorDelta(nc, 0, -1);
                    }
                    _.pull(joinLines, s[0]);
                }
            }
            this["do"].select([]);
            this["do"].setCursors(newCursors);
            this.endSelection();
        }
        return this["do"].end();
    },
    continuousSelectionAtPosInRanges: function(p, sel) {
        var ep, nlr, plr, r, sil, sp;
        r = rangeAtPosInRanges(p, sel);
        if (r && lengthOfRange(r)) {
            sp = rangeStartPos(r);
            while ((sp[0] === 0) && (sp[1] > 0)) {
                plr = this.rangeForLineAtIndex(sp[1] - 1);
                sil = rangesAtLineIndexInRanges(sp[1] - 1, sel);
                if (sil.length === 1 && isSameRange(sil[0], plr)) {
                    sp = rangeStartPos(plr);
                } else if (sil.length && _.last(sil)[1][1] === plr[1][1]) {
                    sp = rangeStartPos(_.last(sil));
                } else {
                    break;
                }
            }
            ep = rangeEndPos(r);
            while ((ep[0] === this.line(ep[1]).length) && (ep[1] < this.numLines() - 1)) {
                nlr = this.rangeForLineAtIndex(ep[1] + 1);
                sil = rangesAtLineIndexInRanges(ep[1] + 1, sel);
                if (sil.length === 1 && isSameRange(sil[0], nlr)) {
                    ep = rangeEndPos(nlr);
                } else if (sil.length && _.first(sil)[1][0] === 0) {
                    ep = rangeEndPos(_.first(sil));
                } else {
                    break;
                }
            }
            return [sp, ep];
        }
    }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../../coffee/editor/actions/deleteselection.coffee