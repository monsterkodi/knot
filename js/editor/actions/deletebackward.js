// koffee 1.12.0
var _, ref, reversed;

ref = require('kxk'), reversed = ref.reversed, _ = ref._;

module.exports = {
    actions: {
        menu: 'Delete',
        deleteBackward: {
            name: 'Delete Backward',
            text: 'delete character to the left',
            combo: 'backspace'
        },
        deleteBackwardIgnoreLineBoundary: {
            name: 'Delete Backward Over Line Boundaries',
            combo: 'command+backspace',
            accel: 'ctrl+backspace'
        },
        deleteBackwardSwallowWhitespace: {
            name: 'Delete Backward Over Whitespace',
            combo: 'alt+backspace'
        }
    },
    deleteBackwardIgnoreLineBoundary: function() {
        return this.deleteBackward({
            ignoreLineBoundary: true
        });
    },
    deleteBackwardSwallowWhitespace: function() {
        return this.deleteBackward({
            ignoreTabBoundary: true
        });
    },
    deleteBackward: function(opt) {
        this["do"].start();
        if (this["do"].numSelections()) {
            this.deleteSelection({
                deleteLines: !this.isInputCursor()
            });
        } else if (!this.deleteEmptySurrounds()) {
            this.deleteCharacterBackward(opt);
        }
        return this["do"].end();
    },
    deleteCharacterBackward: function(opt) {
        var c, i, j, k, l, len, len1, len2, len3, ll, n, nc, newCursors, ref1, ref2, ref3, ref4, removeNum, t;
        newCursors = this["do"].cursors();
        removeNum = (function() {
            switch (false) {
                case !(opt != null ? opt.singleCharacter : void 0):
                    return 1;
                case !(opt != null ? opt.ignoreLineBoundary : void 0):
                    return -1;
                case !(opt != null ? opt.ignoreTabBoundary : void 0):
                    return Math.max(1, _.min(newCursors.map((function(_this) {
                        return function(c) {
                            var n, t;
                            t = _this["do"].textInRange([c[1], [0, c[0]]]);
                            n = t.length - t.trimRight().length;
                            if (_this.isCursorVirtual(c)) {
                                n += c[0] - _this["do"].line(c[1]).length;
                            }
                            return Math.max(1, n);
                        };
                    })(this))));
                default:
                    return Math.max(1, _.min(newCursors.map((function(_this) {
                        return function(c) {
                            var n, t;
                            n = (c[0] % _this.indentString.length) || _this.indentString.length;
                            t = _this["do"].textInRange([c[1], [Math.max(0, c[0] - n), c[0]]]);
                            n -= t.trimRight().length;
                            return Math.max(1, n);
                        };
                    })(this))));
            }
        }).call(this);
        ref1 = reversed(newCursors);
        for (i = 0, len = ref1.length; i < len; i++) {
            c = ref1[i];
            if (c[0] === 0) {
                if ((opt != null ? opt.ignoreLineBoundary : void 0) || this["do"].numCursors() === 1) {
                    if (c[1] > 0 && !this.isInputCursor()) {
                        ll = this["do"].line(c[1] - 1).length;
                        this["do"].change(c[1] - 1, this["do"].line(c[1] - 1) + this["do"].line(c[1]));
                        this["do"]["delete"](c[1]);
                        ref2 = positionsAtLineIndexInPositions(c[1], newCursors);
                        for (j = 0, len1 = ref2.length; j < len1; j++) {
                            nc = ref2[j];
                            cursorDelta(nc, ll, -1);
                        }
                        ref3 = positionsBelowLineIndexInPositions(c[1], newCursors);
                        for (k = 0, len2 = ref3.length; k < len2; k++) {
                            nc = ref3[k];
                            cursorDelta(nc, 0, -1);
                        }
                    }
                }
            } else {
                if (removeNum < 1) {
                    t = this["do"].textInRange([c[1], [0, c[0]]]);
                    n = t.length - t.trimRight().length;
                    if (this.isCursorVirtual(c)) {
                        n += c[0] - this["do"].line(c[1]).length;
                    }
                    n = Math.max(1, n);
                } else {
                    n = removeNum;
                }
                this["do"].change(c[1], this["do"].line(c[1]).splice(c[0] - n, n));
                ref4 = positionsAtLineIndexInPositions(c[1], newCursors);
                for (l = 0, len3 = ref4.length; l < len3; l++) {
                    nc = ref4[l];
                    if (nc[0] >= c[0]) {
                        cursorDelta(nc, -n);
                    }
                }
            }
        }
        return this["do"].setCursors(newCursors);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlYmFja3dhcmQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vY29mZmVlL2VkaXRvci9hY3Rpb25zIiwic291cmNlcyI6WyJkZWxldGViYWNrd2FyZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU9BLElBQUE7O0FBQUEsTUFBa0IsT0FBQSxDQUFRLEtBQVIsQ0FBbEIsRUFBRSx1QkFBRixFQUFZOztBQUVaLE1BQU0sQ0FBQyxPQUFQLEdBRUk7SUFBQSxPQUFBLEVBQ0k7UUFBQSxJQUFBLEVBQU0sUUFBTjtRQUVBLGNBQUEsRUFDSTtZQUFBLElBQUEsRUFBTyxpQkFBUDtZQUNBLElBQUEsRUFBTyw4QkFEUDtZQUVBLEtBQUEsRUFBTyxXQUZQO1NBSEo7UUFPQSxnQ0FBQSxFQUNJO1lBQUEsSUFBQSxFQUFRLHNDQUFSO1lBQ0EsS0FBQSxFQUFRLG1CQURSO1lBRUEsS0FBQSxFQUFRLGdCQUZSO1NBUko7UUFZQSwrQkFBQSxFQUNJO1lBQUEsSUFBQSxFQUFRLGlDQUFSO1lBQ0EsS0FBQSxFQUFRLGVBRFI7U0FiSjtLQURKO0lBaUJBLGdDQUFBLEVBQWtDLFNBQUE7ZUFBRyxJQUFDLENBQUEsY0FBRCxDQUFnQjtZQUFBLGtCQUFBLEVBQW1CLElBQW5CO1NBQWhCO0lBQUgsQ0FqQmxDO0lBa0JBLCtCQUFBLEVBQWtDLFNBQUE7ZUFBRyxJQUFDLENBQUEsY0FBRCxDQUFnQjtZQUFBLGlCQUFBLEVBQWtCLElBQWxCO1NBQWhCO0lBQUgsQ0FsQmxDO0lBb0JBLGNBQUEsRUFBZ0IsU0FBQyxHQUFEO1FBRVosSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLEtBQUosQ0FBQTtRQUNBLElBQUcsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLGFBQUosQ0FBQSxDQUFIO1lBQ0ksSUFBQyxDQUFBLGVBQUQsQ0FBaUI7Z0JBQUEsV0FBQSxFQUFZLENBQUksSUFBQyxDQUFBLGFBQUQsQ0FBQSxDQUFoQjthQUFqQixFQURKO1NBQUEsTUFFSyxJQUFHLENBQUks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SSxVQU5SOztnQkFPQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsTUFBSixDQUFXLENBQUUsQ0FBQSxDQUFBLENBQWIsRUFBaUIsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLElBQUosQ0FBUyxDQUFFLENBQUEsQ0FBQSxDQUFYLENBQWMsQ0FBQyxNQUFmLENBQXNCLENBQUUsQ0FBQSxDQUFBLENBQUYsR0FBSyxDQUEzQixFQUE4QixDQUE5QixDQUFqQjtBQUNBO0FBQUEscUJBQUEsd0NBQUE7O29CQUNJLElBQUcsRUFBRyxDQUFBLENBQUEsQ0FBSCxJQUFTLENBQUUsQ0FBQSxDQUFBLENBQWQ7d0JBQ0ksV0FBQSxDQUFZLEVBQVosRUFBZ0IsQ0FBQyxDQUFqQixFQURKOztBQURKLGlCQXJCSjs7QUFESjtlQTBCQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsVUFBSixDQUFlLFVBQWY7SUE5Q3FCLENBN0J6QiIsInNvdXJjZXNDb250ZW50IjpbIlxuIyAwMDAwMDAwICAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4jIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgICAwMDAgICAwMDBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuIyAwMDAwMDAwICAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAgICAgIDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMFxuXG57IHJldmVyc2VkLCBfIH0gPSByZXF1aXJlICdreGsnXG5cbm1vZHVsZS5leHBvcnRzID1cblxuICAgIGFjdGlvbnM6XG4gICAgICAgIG1lbnU6ICdEZWxldGUnXG5cbiAgICAgICAgZGVsZXRlQmFja3dhcmQ6XG4gICAgICAgICAgICBuYW1lOiAgJ0RlbGV0ZSBCYWNrd2FyZCdcbiAgICAgICAgICAgIHRleHQ6ICAnZGVsZXRlIGNoYXJhY3RlciB0byB0aGUgbGVmdCdcbiAgICAgICAgICAgIGNvbWJvOiAnYmFja3NwYWNlJ1xuXG4gICAgICAgIGRlbGV0ZUJhY2t3YXJkSWdub3JlTGluZUJvdW5kYXJ5OlxuICAgICAgICAgICAgbmFtZTogICAnRGVsZXRlIEJhY2t3YXJkIE92ZXIgTGluZSBCb3VuZGFyaWVzJ1xuICAgICAgICAgICAgY29tYm86ICAnY29tbWFuZCtiYWNrc3BhY2UnXG4gICAgICAgICAgICBhY2NlbDogICdjdHJsK2JhY2tzcGFjZSdcblxuICAgICAgICBkZWxldGVCYWNrd2FyZFN3YWxsb3dXaGl0ZXNwYWNlOlxuICAgICAgICAgICAgbmFtZTogICAnRGVsZXRlIEJhY2t3YXJkIE92ZXIgV2hpdGVzcGFjZSdcbiAgICAgICAgICAgIGNvbWJvOiAgJ2FsdCtiYWNrc3BhY2UnXG5cbiAgICBkZWxldGVCYWNrd2FyZElnbm9yZUxpbmVCb3VuZGFyeTogLT4gQGRlbGV0ZUJhY2t3YXJkIGlnbm9yZUxpbmVCb3VuZGFyeTp0cnVlIFxuICAgIGRlbGV0ZUJhY2t3YXJkU3dhbGxvd1doaXRlc3BhY2U6ICAtPiBAZGVsZXRlQmFja3dhcmQgaWdub3JlVGFiQm91bmRhcnk6dHJ1ZSBcbiAgICAgICAgICAgIFxuICAgIGRlbGV0ZUJhY2t3YXJkOiAob3B0KSAtPlxuXG4gICAgICAgIEBkby5zdGFydCgpXG4gICAgICAgIGlmIEBkby5udW1TZWxlY3Rpb25zKClcbiAgICAgICAgICAgIEBkZWxldGVTZWxlY3Rpb24gZGVsZXRlTGluZXM6bm90IEBpc0lucHV0Q3Vyc29yKClcbiAgICAgICAgZWxzZSBpZiBub3QgQGRlbGV0ZUVtcHR5U3Vycm91bmRzKClcbiAgICAgICAgICAgIEBkZWxldGVDaGFyYWN0ZXJCYWNrd2FyZCBvcHRcbiAgICAgICAgQGRvLmVuZCgpXG5cbiAgICBkZWxldGVDaGFyYWN0ZXJCYWNrd2FyZDogKG9wdCkgLT5cblxuICAgICAgICBuZXdDdXJzb3JzID0gQGRvLmN1cnNvcnMoKVxuXG4gICAgICAgIHJlbW92ZU51bSA9IHN3aXRjaFxuICAgICAgICAgICAgd2hlbiBvcHQ/LnNpbmdsZUNoYXJhY3RlciAgICB0aGVuIDFcbiAgICAgICAgICAgIHdoZW4gb3B0Py5pZ25vcmVMaW5lQm91bmRhcnkgdGhlbiAtMSAjIGRlbGV0ZSBzcGFjZXMgdG8gbGluZSBzdGFydCBvciBsaW5lIGVuZFxuICAgICAgICAgICAgd2hlbiBvcHQ/Lmlnbm9yZVRhYkJvdW5kYXJ5ICMgZGVsZXRlIHNwYWNlIGNvbHVtbnNcbiAgICAgICAgICAgICAgICBNYXRoLm1heCAxLCBfLm1pbiBuZXdDdXJzb3JzLm1hcCAoYykgPT5cbiAgICAgICAgICAgICAgICAgICAgdCA9IEBkby50ZXh0SW5SYW5nZSBbY1sxXSwgWzAsIGNbMF1dXVxuICAgICAgICAgICAgICAgICAgICBuID0gdC5sZW5ndGggLSB0LnRyaW1SaWdodCgpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICBuICs9IGNbMF0gLSBAZG8ubGluZShjWzFdKS5sZW5ndGggaWYgQGlzQ3Vyc29yVmlydHVhbCBjXG4gICAgICAgICAgICAgICAgICAgIE1hdGgubWF4IDEsIG5cbiAgICAgICAgICAgIGVsc2UgIyBkZWxldGUgc3BhY2VzIHRvIHByZXZpb3VzIHRhYiBjb2x1bW5cbiAgICAgICAgICAgICAgICBNYXRoLm1heCAxLCBfLm1pbiBuZXdDdXJzb3JzLm1hcCAoYykgPT5cbiAgICAgICAgICAgICAgICAgICAgbiA9IChjWzBdICUgQGluZGVudFN0cmluZy5sZW5ndGgpIG9yIEBpbmRlbnRTdHJpbmcubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIHQgPSBAZG8udGV4dEluUmFuZ2UgW2NbMV0sIFtNYXRoLm1heCgwLCBjWzBdLW4pLCBjWzBdXV1cbiAgICAgICAgICAgICAgICAgICAgbiAtPSB0LnRyaW1SaWdodCgpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICBNYXRoLm1heCAxLCBuXG5cbiAgICAgICAgZm9yIGMgaW4gcmV2ZXJzZWQgbmV3Q3Vyc29yc1xuICAgICAgICAgICAgaWYgY1swXSA9PSAwICMgY3Vyc29yIGF0IHN0YXJ0IG9mIGxpbmVcbiAgICAgICAgICAgICAgICBpZiBvcHQ/Lmlnbm9yZUxpbmVCb3VuZGFyeSBvciBAZG8ubnVtQ3Vyc29ycygpID09IDFcbiAgICAgICAgICAgICAgICAgICAgaWYgY1sxXSA+IDAgYW5kIG5vdCBAaXNJbnB1dEN1cnNvcigpICMgY3Vyc29yIG5vdCBpbiBmaXJzdCBsaW5lIG9yIGlucHV0IGxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGxsID0gQGRvLmxpbmUoY1sxXS0xKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgIEBkby5jaGFuZ2UgY1sxXS0xLCBAZG8ubGluZShjWzFdLTEpICsgQGRvLmxpbmUoY1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIEBkby5kZWxldGUgY1sxXVxuICAgICAgICAgICAgICAgICAgICAgICAgIyBtb3ZlIGN1cnNvcnMgaW4gam9pbmVkIGxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBuYyBpbiBwb3NpdGlvbnNBdExpbmVJbmRleEluUG9zaXRpb25zIGNbMV0sIG5ld0N1cnNvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3JEZWx0YSBuYywgbGwsIC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAjIG1vdmUgY3Vyc29ycyBiZWxvdyBkZWxldGVkIGxpbmUgdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBuYyBpbiBwb3NpdGlvbnNCZWxvd0xpbmVJbmRleEluUG9zaXRpb25zIGNbMV0sIG5ld0N1cnNvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3JEZWx0YSBuYywgMCwgLTFcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBpZiByZW1vdmVOdW0gPCAxICMgZGVsZXRlIHNwYWNlcyB0byBsaW5lIHN0YXJ0IG9yIGxpbmUgZW5kXG4gICAgICAgICAgICAgICAgICAgIHQgPSBAZG8udGV4dEluUmFuZ2UgW2NbMV0sIFswLCBjWzBdXV1cbiAgICAgICAgICAgICAgICAgICAgbiA9IHQubGVuZ3RoIC0gdC50cmltUmlnaHQoKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgbiArPSBjWzBdIC0gQGRvLmxpbmUoY1sxXSkubGVuZ3RoIGlmIEBpc0N1cnNvclZpcnR1YWwgY1xuICAgICAgICAgICAgICAgICAgICBuID0gTWF0aC5tYXggMSwgblxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgbiA9IHJlbW92ZU51bVxuICAgICAgICAgICAgICAgIEBkby5jaGFuZ2UgY1sxXSwgQGRvLmxpbmUoY1sxXSkuc3BsaWNlIGNbMF0tbiwgblxuICAgICAgICAgICAgICAgIGZvciBuYyBpbiBwb3NpdGlvbnNBdExpbmVJbmRleEluUG9zaXRpb25zIGNbMV0sIG5ld0N1cnNvcnNcbiAgICAgICAgICAgICAgICAgICAgaWYgbmNbMF0gPj0gY1swXVxuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yRGVsdGEgbmMsIC1uXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgQGRvLnNldEN1cnNvcnMgbmV3Q3Vyc29yc1xuIl19
//# sourceURL=../../../coffee/editor/actions/deletebackward.coffee