// koffee 1.4.0

/*
0000000     0000000
000   000  000   000
000   000  000   000
000   000  000   000
0000000     0000000
 */
var Do, State, _, clamp, empty, kerror, last, ref;

ref = require('kxk'), empty = ref.empty, clamp = ref.clamp, last = ref.last, kerror = ref.kerror, _ = ref._;

State = require('./state');

require('../tools/ranges');

Do = (function() {
    function Do(editor) {
        this.editor = editor;
        this.reset();
    }

    Do.prototype.del = function() {};

    Do.prototype.reset = function() {
        this.groupCount = 0;
        this.history = [];
        this.redos = [];
        return this.state = null;
    };

    Do.prototype.hasLineChanges = function() {
        if (this.history.length === 0) {
            return false;
        }
        if (_.first(this.history).s.lines === this.editor.state.s.lines) {
            return false;
        }
        return _.first(this.history).text() !== this.editor.text();
    };

    Do.prototype.start = function() {
        this.groupCount += 1;
        if (this.groupCount === 1) {
            this.startState = this.state = new State(this.editor.state.s);
            if (empty(this.history) || this.state.s !== last(this.history).s) {
                return this.history.push(this.state);
            }
        }
    };

    Do.prototype.isDoing = function() {
        return this.groupCount > 0;
    };

    Do.prototype.change = function(index, text) {
        return this.state = this.state.changeLine(index, text);
    };

    Do.prototype.insert = function(index, text) {
        return this.state = this.state.insertLine(index, text);
    };

    Do.prototype["delete"] = function(index) {
        if (this.numLines() >= 1 && (0 <= index && index < this.numLines())) {
            this.editor.emit('willDeleteLine', this.line(index));
            return this.state = this.state.deleteLine(index);
        }
    };

    Do.prototype.end = function(opt) {
        var base, changes;
        this.redos = [];
        this.groupCount -= 1;
        if (this.groupCount === 0) {
            this.merge();
            changes = this.calculateChanges(this.startState, this.state);
            this.editor.setState(this.state);
            return typeof (base = this.editor).changed === "function" ? base.changed(changes) : void 0;
        }
    };

    Do.prototype.undo = function() {
        var base, changes;
        if (this.history.length) {
            if (_.isEmpty(this.redos)) {
                this.redos.unshift(this.editor.state);
            }
            this.state = this.history.pop();
            this.redos.unshift(this.state);
            changes = this.calculateChanges(this.editor.state, this.state);
            this.editor.setState(this.state);
            if (typeof (base = this.editor).changed === "function") {
                base.changed(changes);
            }
            return this.editor.emit('undone');
        }
    };

    Do.prototype.redo = function() {
        var base, changes;
        if (this.redos.length) {
            if (this.redos.length > 1) {
                this.history.push(this.redos.shift());
            }
            this.state = _.first(this.redos);
            if (this.redos.length === 1) {
                this.redos = [];
            }
            changes = this.calculateChanges(this.editor.state, this.state);
            this.editor.setState(this.state);
            if (typeof (base = this.editor).changed === "function") {
                base.changed(changes);
            }
            return this.editor.emit('redone');
        }
    };

    Do.prototype.select = function(newSelections) {
        if (newSelections.length) {
            newSelections = cleanRanges(newSelections);
            return this.state = this.state.setSelections(newSelections);
        } else {
            return this.state = this.state.setSelections([]);
        }
    };

    Do.prototype.setCursors = function(newCursors, opt) {
        var mainCursor, mainIndex;
        if ((newCursors == null) || newCursors.length < 1) {
            return kerror("Do.setCursors -- empty cursors?");
        }
        if (opt != null ? opt.main : void 0) {
            switch (opt.main) {
                case 'first':
                    mainIndex = 0;
                    break;
                case 'last':
                    mainIndex = newCursors.length - 1;
                    break;
                case 'closest':
                    mainIndex = newCursors.indexOf(posClosestToPosInPositions(this.editor.mainCursor(), newCursors));
                    break;
                default:
                    mainIndex = newCursors.indexOf(opt.main);
                    if (mainIndex < 0) {
                        mainIndex = parseInt(opt.main);
                    }
            }
        } else {
            mainIndex = newCursors.length - 1;
        }
        mainCursor = newCursors[mainIndex];
        this.cleanCursors(newCursors);
        mainIndex = newCursors.indexOf(posClosestToPosInPositions(mainCursor, newCursors));
        this.state = this.state.setCursors(newCursors);
        return this.state = this.state.setMain(mainIndex);
    };

    Do.prototype.calculateChanges = function(oldState, newState) {
        var changes, dd, deletes, deletions, insertions, inserts, newLines, ni, nl, oi, ol, oldLines;
        oi = 0;
        ni = 0;
        dd = 0;
        changes = [];
        oldLines = oldState.s.lines;
        newLines = newState.s.lines;
        insertions = 0;
        deletions = 0;
        if (oldLines !== newLines) {
            ol = oldLines[oi];
            nl = newLines[ni];
            while (nl && oi < oldLines.length) {
                if (nl == null) {
                    deletions += 1;
                    changes.push({
                        change: 'deleted',
                        oldIndex: oi,
                        doIndex: oi + dd
                    });
                    oi += 1;
                    dd -= 1;
                } else if (ol === nl) {
                    oi += 1;
                    ol = oldLines[oi];
                    ni += 1;
                    nl = newLines[ni];
                } else {
                    inserts = newLines.slice(ni).findIndex(function(v) {
                        return v === ol;
                    });
                    deletes = oldLines.slice(oi).findIndex(function(v) {
                        return v === nl;
                    });
                    if (inserts > 0 && (deletes <= 0 || inserts < deletes)) {
                        while (inserts) {
                            changes.push({
                                change: 'inserted',
                                newIndex: ni,
                                doIndex: oi + dd,
                                after: nl.text
                            });
                            ni += 1;
                            dd += 1;
                            inserts -= 1;
                            insertions += 1;
                        }
                        nl = newLines[ni];
                    } else if (deletes > 0 && (inserts <= 0 || deletes < inserts)) {
                        while (deletes) {
                            changes.push({
                                change: 'deleted',
                                oldIndex: oi,
                                doIndex: oi + dd
                            });
                            oi += 1;
                            dd -= 1;
                            deletes -= 1;
                            deletions += 1;
                        }
                        ol = oldLines[oi];
                    } else {
                        changes.push({
                            change: 'changed',
                            oldIndex: oi,
                            newIndex: ni,
                            doIndex: oi + dd,
                            after: nl.text
                        });
                        oi += 1;
                        ol = oldLines[oi];
                        ni += 1;
                        nl = newLines[ni];
                    }
                }
            }
            while (ni < newLines.length) {
                insertions += 1;
                changes.push({
                    change: 'inserted',
                    newIndex: ni,
                    doIndex: ni,
                    after: nl.text
                });
                ni += 1;
                nl = newLines[ni];
            }
        }
        return {
            changes: changes,
            inserts: insertions,
            deletes: deletions,
            cursors: oldState.s.cursors !== newState.s.cursors,
            selects: oldState.s.selections !== newState.s.selections
        };
    };

    Do.prototype.merge = function() {
        var a, b, c, j, la, lb, lc, li, ref1, ref2;
        while (this.history.length > 1) {
            b = this.history[this.history.length - 2];
            a = last(this.history);
            if (a.s.lines === b.s.lines) {
                if (this.history.length > 2) {
                    this.history.splice(this.history.length - 2, 1);
                } else {
                    return;
                }
            } else if (this.history.length > 2) {
                c = this.history[this.history.length - 3];
                if ((a.numLines() === (ref1 = b.numLines()) && ref1 === c.numLines())) {
                    for (li = j = 0, ref2 = a.numLines(); 0 <= ref2 ? j < ref2 : j > ref2; li = 0 <= ref2 ? ++j : --j) {
                        la = a.s.lines[li];
                        lb = b.s.lines[li];
                        lc = c.s.lines[li];
                        if (la === lb && lc !== lb || la !== lb && lc === lb) {
                            return;
                        }
                    }
                    this.history.splice(this.history.length - 2, 1);
                } else {
                    return;
                }
            } else {
                return;
            }
        }
    };

    Do.prototype.cleanCursors = function(cs) {
        var c, ci, j, k, len, p, ref1;
        for (j = 0, len = cs.length; j < len; j++) {
            p = cs[j];
            p[0] = Math.max(p[0], 0);
            p[1] = clamp(0, this.state.numLines() - 1, p[1]);
        }
        sortPositions(cs);
        if (cs.length > 1) {
            for (ci = k = ref1 = cs.length - 1; ref1 <= 0 ? k < 0 : k > 0; ci = ref1 <= 0 ? ++k : --k) {
                c = cs[ci];
                p = cs[ci - 1];
                if (c[1] === p[1] && c[0] === p[0]) {
                    cs.splice(ci, 1);
                }
            }
        }
        return cs;
    };

    Do.prototype.text = function() {
        return this.state.text();
    };

    Do.prototype.line = function(i) {
        return this.state.line(i);
    };

    Do.prototype.cursor = function(i) {
        return this.state.cursor(i);
    };

    Do.prototype.highlight = function(i) {
        return this.state.highlight(i);
    };

    Do.prototype.selection = function(i) {
        return this.state.selection(i);
    };

    Do.prototype.lines = function() {
        return this.state.lines();
    };

    Do.prototype.cursors = function() {
        return this.state.cursors();
    };

    Do.prototype.highlights = function() {
        return this.state.highlights();
    };

    Do.prototype.selections = function() {
        return this.state.selections();
    };

    Do.prototype.numLines = function() {
        return this.state.numLines();
    };

    Do.prototype.numCursors = function() {
        return this.state.numCursors();
    };

    Do.prototype.numSelections = function() {
        return this.state.numSelections();
    };

    Do.prototype.numHighlights = function() {
        return this.state.numHighlights();
    };

    Do.prototype.textInRange = function(r) {
        var ref1;
        return (ref1 = this.state.line(r[0])) != null ? ref1.slice(r[1][0], r[1][1]) : void 0;
    };

    Do.prototype.mainCursor = function() {
        return this.state.mainCursor();
    };

    Do.prototype.rangeForLineAtIndex = function(i) {
        return [i, [0, this.line(i).length]];
    };

    return Do;

})();

module.exports = Do;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG8uanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLE1BQW9DLE9BQUEsQ0FBUSxLQUFSLENBQXBDLEVBQUUsaUJBQUYsRUFBUyxpQkFBVCxFQUFnQixlQUFoQixFQUFzQixtQkFBdEIsRUFBOEI7O0FBRTlCLEtBQUEsR0FBUSxPQUFBLENBQVEsU0FBUjs7QUFDUixPQUFBLENBQVEsaUJBQVI7O0FBRU07SUFFQyxZQUFDLE1BQUQ7UUFBQyxJQUFDLENBQUEsU0FBRDtRQUVBLElBQUMsQ0FBQSxLQUFELENBQUE7SUFGRDs7aUJBSUgsR0FBQSxHQUFLLFNBQUEsR0FBQTs7aUJBUUwsS0FBQSxHQUFPLFNBQUE7UUFFSCxJQUFDLENBQUEsVUFBRCxHQUFjO1FBQ2QsSUFBQyxDQUFBLE9BQUQsR0FBVztRQUNYLElBQUMsQ0FBQSxLQUFELEdBQVc7ZUFDWCxJQUFDLENBQUEsS0FBRCxHQUFXO0lBTFI7O2lCQU9QLGNBQUEsR0FBZ0IsU0FBQTtRQUVaLElBQWdCLElBQUMsQ0FBQSxPQUFPLENBQUMsTUFBVCxLQUFtQixDQUFuQztBQUFBLG1CQUFPLE1BQVA7O1FBQ0EsSUFBZ0IsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFDLENBQUEsT0FBVCxDQUFpQixDQUFDLENBQUMsQ0FBQyxLQUFwQixLQUE2QixJQUFDLENBQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBN0Q7QUFBQSxtQkFBTyxNQUFQOztlQUNBLENBQUMsQ0FBQyxLQUFGLENBQVEsSUFBQyxDQUFBLE9BQVQsQ0FBaUIsQ0FBQyxJQUFsQixDQUFBLENBQUEsS0FBNEIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLENBQUE7SUFKaEI7O2lCQVloQixLQUFBLEdBQU8sU0FBQTtRQUVILElBQUMsQ0FBQSxVQUFELElBQWU7UUFDZixJQUFHLElBQUMsQ0FBQSxVQUFELEtBQWUsQ0FBbEI7WUFDSSxJQUFDLENBQUEsVUFBRCxHQUFjLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBSSxLQUFKLENBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBeEI7WUFDdkIsSUFBRyxLQUFBLENBQU0sSUFBQyxDQUFBLE9BQVAsQ0FBQSxJQUFtQixJQUFDLENBQUEsS0FBSyxDQUFDLENBQVAsS0FBWSxJQUFBLENBQUssSUFBQyxDQUFBLE9BQU4sQ0FBYyxDQUFDLENBQWpEO3VCQUNJLElBQUMsQ0FBQSxPQUFPLENBQUMsSUFBVCxDQUFjLElBQUMsQ0FBQSxLQUFmLEVBREo7YUFGSjs7SUFIRzs7aUJBUVAsT0FBQSxHQUFTLFNBQUE7ZUFBRyxJQUFDLENBQUEsVUFBRCxHQUFjO0lBQWpCOztpQkFRVCxNQUFBLEdBQVEsU0FBQyxLQUFELEVBQVEsSUFBUjtlQUFpQixJQUFDLENBQUEsS0FBRCxHQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBUCxDQUFrQixLQUFsQixFQUF5QixJQUF6QjtJQUExQjs7aUJBQ1IsTUFBQSxHQUFRLFNBQUMsS0FBRCxFQUFRLElBQVI7ZUFBaUIsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVAsQ0FBa0IsS0FBbEIsRUFBeUIsSUFBekI7SUFBMUI7O2tCQUNSLFFBQUEsR0FBUSxTQUFDLEtBQUQ7UUFDSixJQUFHLElBQUMsQ0FBQSxRQUFELENBQUEsQ0FBQSxJQUFlLENBQWYsSUFBcUIsQ0FBQSxDQUFBLElBQUssS0FBTCxJQUFLLEtBQUwsR0FBYSxJQUFDLENBQUEsUUFBRCxDQUFBLENBQWIsQ0FBeEI7WUFDSSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsQ0FBYSxnQkFBYixFQUE4QixJQUFDLENBQUEsSUFBRCxDQUFNLEtBQU4sQ0FBOUI7bUJBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVAsQ0FBa0IsS0FBbEIsRUFGYjs7SUFESTs7aUJBV1IsR0FBQSxHQUFLLFNBQUMsR0FBRDtBQUlELFlBQUE7UUFBQSxJQUFDLENBQUEsS0FBRCxHQUFTO1FBQ1QsSUFBQyxDQUFBLFVBQUQsSUFBZTtRQUNmLElBQUcsSUFBQyxDQUFBLFVBQUQsS0FBZSxDQUFsQjtZQUNJLElBQUMsQ0FBQSxLQUFELENBQUE7WUFDQSxPQUFBLEdBQVUsSUFBQyxDQUFBLGdCQUFELENBQWtCLElBQUMsQ0FBQSxVQUFuQixFQUErQixJQUFDLENBQUEsS0FBaEM7WUFDVixJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsQ0FBaUIsSUFBQyxDQUFBLEtBQWxCOzRFQUNPLENBQUMsUUFBUyxrQkFKckI7O0lBTkM7O2lCQWtCTCxJQUFBLEdBQU0sU0FBQTtBQUVGLFlBQUE7UUFBQSxJQUFHLElBQUMsQ0FBQSxPQUFPLENBQUMsTUFBWjtZQUVJLElBQUcsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxJQUFDLENBQUEsS0FBWCxDQUFIO2dCQUNJLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBUCxDQUFlLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBdkIsRUFESjs7WUFHQSxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUMsQ0FBQSxPQUFPLENBQUMsR0FBVCxDQUFBO1lBQ1QsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFQLENBQWUsSUFBQyxDQUFBLEtBQWhCO1lBRUEsT0FBQSxHQUFVLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixJQUFDLENBQUEsTUFBTSxDQUFDLEtBQTFCLEVBQWlDLElBQUMsQ0FBQSxLQUFsQztZQUNWLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUixDQUFpQixJQUFDLENBQUEsS0FBbEI7O29CQUNPLENBQUMsUUFBUzs7bUJBQ2pCLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBUixDQUFhLFFBQWIsRUFYSjs7SUFGRTs7aUJBcUJOLElBQUEsR0FBTSxTQUFBO0FBRUYsWUFBQTtRQUFBLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFWO1lBRUksSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsR0FBZ0IsQ0FBbkI7Z0JBQ0ksSUFBQyxDQUFBLE9BQU8sQ0FBQyxJQUFULENBQWMsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLENBQUEsQ0FBZCxFQURKOztZQUdBLElBQUMsQ0FBQSxLQUFELEdBQVMsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFDLENBQUEsS0FBVDtZQUNULElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFQLEtBQWlCLENBQXBCO2dCQUNJLElBQUMsQ0FBQSxLQUFELEdBQVMsR0FEYjs7WUFHQSxPQUFBLEdBQVUsSUFBQyxDQUFBLGdCQUFELENBQWtCLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBMUIsRUFBaUMsSUFBQyxDQUFBLEtBQWxDO1lBQ1YsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFSLENBQWlCLElBQUMsQ0FBQSxLQUFsQjs7b0JBQ08sQ0FBQyxRQUFTOzttQkFDakIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLENBQWEsUUFBYixFQVpKOztJQUZFOztpQkFzQk4sTUFBQSxHQUFRLFNBQUMsYUFBRDtRQUVKLElBQUcsYUFBYSxDQUFDLE1BQWpCO1lBQ0ksYUFBQSxHQUFnQixXQUFBLENBQVksYUFBWjttQkFDaEIsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUIsYUFBckIsRUFGYjtTQUFBLE1BQUE7bUJBSUksSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUIsRUFBckIsRUFKYjs7SUFGSTs7aUJBY1IsVUFBQSxHQUFZLFNBQUMsVUFBRCxFQUFhLEdBQWI7QUFFUixZQUFBO1FBQUEsSUFBTyxvQkFBSixJQUFtQixVQUFVLENBQUMsTUFBWCxHQUFvQixDQUExQztBQUNJLG1CQUFPLE1BQUEsQ0FBTyxpQ0FBUCxFQURYOztRQUdBLGtCQUFHLEdBQUcsQ0FBRSxhQUFSO0FBQ0ksb0JBQU8sR0FBRyxDQUFDLElBQVg7QUFBQSxxQkFDUyxPQURUO29CQUNzQixTQUFBLEdBQVk7QUFBekI7QUFEVCxxQkFFUyxNQUZUO29CQUVzQixTQUFBLEdBQVksVUFBVSxDQUFDLE1BQVgsR0FBa0I7QUFBM0M7QUFGVCxxQkFHUyxTQUhUO29CQUlRLFNBQUEsR0FBWSxVQUFVLENBQUMsT0FBWCxDQUFtQiwwQkFBQSxDQUEyQixJQUFDLENBQUEsTUFBTSxDQUFDLFVBQVIsQ0FBQSxDQUEzQixFQUFpRCxVQUFqRCxDQUFuQjtBQURYO0FBSFQ7b0JBTVEsU0FBQSxHQUFZLFVBQVUsQ0FBQyxPQUFYLENBQW1CLEdBQUcsQ0FBQyxJQUF2QjtvQkFDWixJQUFpQyxTQUFBLEdBQVksQ0FBN0M7d0JBQUEsU0FBQSxHQUFZLFFBQUEsQ0FBUyxHQUFHLENBQUMsSUFBYixFQUFaOztBQVBSLGFBREo7U0FBQSxNQUFBO1lBVUksU0FBQSxHQUFZLFVBQVUsQ0FBQyxNQUFYLEdBQWtCLEVBVmxDOztRQVlBLFVBQUEsR0FBYSxVQUFXLENBQUEsU0FBQTtRQUN4QixJQUFDLENBQUEsWUFBRCxDQUFjLFVBQWQ7UUFDQSxTQUFBLEdBQVksVUFBVSxDQUFDLE9BQVgsQ0FBbUIsMEJBQUEsQ0FBMkIsVUFBM0IsRUFBdUMsVUFBdkMsQ0FBbkI7UUFFWixJQUFDLENBQUEsS0FBRCxHQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBUCxDQUFrQixVQUFsQjtlQUNULElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFQLENBQWUsU0FBZjtJQXRCRDs7aUJBOEJaLGdCQUFBLEdBQWtCLFNBQUMsUUFBRCxFQUFXLFFBQVg7QUFFZCxZQUFBO1FBQUEsRUFBQSxHQUFLO1FBQ0wsRUFBQSxHQUFLO1FBQ0wsRUFBQSxHQUFLO1FBQ0wsT0FBQSxHQUFVO1FBRVYsUUFBQSxHQUFXLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDdEIsUUFBQSxHQUFXLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFdEIsVUFBQSxHQUFhO1FBQ2IsU0FBQSxHQUFhO1FBRWIsSUFBRyxRQUFBLEtBQVksUUFBZjtZQUVJLEVBQUEsR0FBSyxRQUFTLENBQUEsRUFBQTtZQUNkLEVBQUEsR0FBSyxRQUFTLENBQUEsRUFBQTtBQUVkLG1CQUFNLEVBQUEsSUFBTyxFQUFBLEdBQUssUUFBUSxDQUFDLE1BQTNCO2dCQUVJLElBQU8sVUFBUDtvQkFDSSxTQUFBLElBQWE7b0JBQ2IsT0FBTyxDQUFDLElBQVIsQ0FBYTt3QkFBQSxNQUFBLEVBQVEsU0FBUjt3QkFBa0IsUUFBQSxFQUFVLEVBQTVCO3dCQUFnQyxPQUFBLEVBQVMsRUFBQSxHQUFHLEVBQTVDO3FCQUFiO29CQUNBLEVBQUEsSUFBTTtvQkFDTixFQUFBLElBQU0sRUFKVjtpQkFBQSxNQU1LLElBQUcsRUFBQSxLQUFNLEVBQVQ7b0JBQ0QsRUFBQSxJQUFNO29CQUNOLEVBQUEsR0FBSyxRQUFTLENBQUEsRUFBQTtvQkFDZCxFQUFBLElBQU07b0JBQ04sRUFBQSxHQUFLLFFBQVMsQ0FBQSxFQUFBLEVBSmI7aUJBQUEsTUFBQTtvQkFPRCxPQUFBLEdBQVUsUUFBUSxDQUFDLEtBQVQsQ0FBZSxFQUFmLENBQWtCLENBQUMsU0FBbkIsQ0FBNkIsU0FBQyxDQUFEOytCQUFPLENBQUEsS0FBRztvQkFBVixDQUE3QjtvQkFDVixPQUFBLEdBQVUsUUFBUSxDQUFDLEtBQVQsQ0FBZSxFQUFmLENBQWtCLENBQUMsU0FBbkIsQ0FBNkIsU0FBQyxDQUFEOytCQUFPLENBQUEsS0FBRztvQkFBVixDQUE3QjtvQkFFVixJQUFHLE9BQUEsR0FBVSxDQUFWLElBQWdCLENBQUMsT0FBQSxJQUFXLENBQVgsSUFBZ0IsT0FBQSxHQUFVLE9BQTNCLENBQW5CO0FBRUksK0JBQU0sT0FBTjs0QkFDSSxPQUFPLENBQUMsSUFBUixDQUFhO2dDQUFBLE1BQUEsRUFBUSxVQUFSO2dDQUFtQixRQUFBLEVBQVUsRUFBN0I7Z0NBQWlDLE9BQUEsRUFBUyxFQUFBLEdBQUcsRUFBN0M7Z0NBQWlELEtBQUEsRUFBTyxFQUFFLENBQUMsSUFBM0Q7NkJBQWI7NEJBQ0EsRUFBQSxJQUFNOzRCQUNOLEVBQUEsSUFBTTs0QkFDTixPQUFBLElBQVc7NEJBQ1gsVUFBQSxJQUFjO3dCQUxsQjt3QkFNQSxFQUFBLEdBQUssUUFBUyxDQUFBLEVBQUEsRUFSbEI7cUJBQUEsTUFVSyxJQUFHLE9BQUEsR0FBVSxDQUFWLElBQWdCLENBQUMsT0FBQSxJQUFXLENBQVgsSUFBZ0IsT0FBQSxHQUFVLE9BQTNCLENBQW5CO0FBRUQsK0JBQU0sT0FBTjs0QkFDSSxPQUFPLENBQUMsSUFBUixDQUFhO2dDQUFBLE1BQUEsRUFBUSxTQUFSO2dDQUFrQixRQUFBLEVBQVUsRUFBNUI7Z0NBQWdDLE9BQUEsRUFBUyxFQUFBLEdBQUcsRUFBNUM7NkJBQWI7NEJBQ0EsRUFBQSxJQUFNOzRCQUNOLEVBQUEsSUFBTTs0QkFDTixPQUFBLElBQVc7NEJBQ1gsU0FBQSxJQUFhO3dCQUxqQjt3QkFNQSxFQUFBLEdBQUssUUFBUyxDQUFBLEVBQUEsRUFSYjtxQkFBQSxNQUFBO3dCQVlELE9BQU8sQ0FBQyxJQUFSLENBQWE7NEJBQUEsTUFBQSxFQUFRLFNBQVI7NEJBQWtCLFFBQUEsRUFBVSxFQUE1Qjs0QkFBZ0MsUUFBQSxFQUFVLEVBQTFDOzRCQUE4QyxPQUFBLEVBQVMsRUFBQSxHQUFHLEVBQTFEOzRCQUE4RCxLQUFBLEVBQU8sRUFBRSxDQUFDLElBQXhFO3lCQUFiO3dCQUNBLEVBQUEsSUFBTTt3QkFDTixFQUFBLEdBQUssUUFBUyxDQUFBLEVBQUE7d0JBQ2QsRUFBQSxJQUFNO3dCQUNOLEVBQUEsR0FBSyxRQUFTLENBQUEsRUFBQSxFQWhCYjtxQkFwQko7O1lBUlQ7QUE4Q0EsbUJBQU0sRUFBQSxHQUFLLFFBQVEsQ0FBQyxNQUFwQjtnQkFFSSxVQUFBLElBQWM7Z0JBQ2QsT0FBTyxDQUFDLElBQVIsQ0FBYTtvQkFBQSxNQUFBLEVBQVEsVUFBUjtvQkFBbUIsUUFBQSxFQUFVLEVBQTdCO29CQUFpQyxPQUFBLEVBQVMsRUFBMUM7b0JBQThDLEtBQUEsRUFBTyxFQUFFLENBQUMsSUFBeEQ7aUJBQWI7Z0JBQ0EsRUFBQSxJQUFNO2dCQUNOLEVBQUEsR0FBSyxRQUFTLENBQUEsRUFBQTtZQUxsQixDQW5ESjs7ZUEwREE7WUFBQSxPQUFBLEVBQVMsT0FBVDtZQUNBLE9BQUEsRUFBUyxVQURUO1lBRUEsT0FBQSxFQUFTLFNBRlQ7WUFHQSxPQUFBLEVBQVMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFYLEtBQXlCLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FIN0M7WUFJQSxPQUFBLEVBQVMsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFYLEtBQXlCLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFKN0M7O0lBdkVjOztpQkF1RmxCLEtBQUEsR0FBTyxTQUFBO0FBRUgsWUFBQTtBQUFBLGVBQU0sSUFBQyxDQUFBLE9BQU8sQ0FBQyxNQUFULEdBQWtCLENBQXhCO1lBQ0ksQ0FBQSxHQUFJLElBQUMsQ0FBQSxPQUFRLENBQUEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxNQUFULEdBQWdCLENBQWhCO1lBQ2IsQ0FBQSxHQUFJLElBQUEsQ0FBSyxJQUFDLENBQUEsT0FBTjtZQUNKLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFKLEtBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFwQjtnQkFDSSxJQUFHLElBQUMsQ0FBQSxPQUFPLENBQUMsTUFBVCxHQUFrQixDQUFyQjtvQkFDSSxJQUFDLENBQUEsT0FBTyxDQUFDLE1BQVQsQ0FBZ0IsSUFBQyxDQUFBLE9BQU8sQ0FBQyxNQUFULEdBQWdCLENBQWhDLEVBQW1DLENBQW5DLEVBREo7aUJBQUEsTUFBQTtBQUdJLDJCQUhKO2lCQURKO2FBQUEsTUFLSyxJQUFHLElBQUMsQ0FBQSxPQUFPLENBQUMsTUFBVCxHQUFrQixDQUFyQjtnQkFDRCxDQUFBLEdBQUksSUFBQyxDQUFBLE9BQVEsQ0FBQSxJQUFDLENBQUEsT0FBTyxDQUFDLE1BQVQsR0FBZ0IsQ0FBaEI7Z0JBQ2IsSUFBRyxDQUFBLENBQUMsQ0FBQyxRQUFGLENBQUEsQ0FBQSxhQUFnQixDQUFDLENBQUMsUUFBRixDQUFBLEVBQWhCLFFBQUEsS0FBZ0MsQ0FBQyxDQUFDLFFBQUYsQ0FBQSxDQUFoQyxDQUFIO0FBQ0kseUJBQVUsNEZBQVY7d0JBQ0ksRUFBQSxHQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBTSxDQUFBLEVBQUE7d0JBQ2YsRUFBQSxHQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBTSxDQUFBLEVBQUE7d0JBQ2YsRUFBQSxHQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBTSxDQUFBLEVBQUE7d0JBQ2YsSUFBRyxFQUFBLEtBQU0sRUFBTixJQUFhLEVBQUEsS0FBTSxFQUFuQixJQUF5QixFQUFBLEtBQU0sRUFBTixJQUFhLEVBQUEsS0FBTSxFQUEvQztBQUNJLG1DQURKOztBQUpKO29CQU1BLElBQUMsQ0FBQSxPQUFPLENBQUMsTUFBVCxDQUFnQixJQUFDLENBQUEsT0FBTyxDQUFDLE1BQVQsR0FBZ0IsQ0FBaEMsRUFBbUMsQ0FBbkMsRUFQSjtpQkFBQSxNQUFBO0FBUUssMkJBUkw7aUJBRkM7YUFBQSxNQUFBO0FBV0EsdUJBWEE7O1FBUlQ7SUFGRzs7aUJBNkJQLFlBQUEsR0FBYyxTQUFDLEVBQUQ7QUFFVixZQUFBO0FBQUEsYUFBQSxvQ0FBQTs7WUFDSSxDQUFFLENBQUEsQ0FBQSxDQUFGLEdBQU8sSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFFLENBQUEsQ0FBQSxDQUFYLEVBQWUsQ0FBZjtZQUNQLENBQUUsQ0FBQSxDQUFBLENBQUYsR0FBTyxLQUFBLENBQU0sQ0FBTixFQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUCxDQUFBLENBQUEsR0FBa0IsQ0FBM0IsRUFBOEIsQ0FBRSxDQUFBLENBQUEsQ0FBaEM7QUFGWDtRQUlBLGFBQUEsQ0FBYyxFQUFkO1FBRUEsSUFBRyxFQUFFLENBQUMsTUFBSCxHQUFZLENBQWY7QUFDSSxpQkFBVSxvRkFBVjtnQkFDSSxDQUFBLEdBQUksRUFBRyxDQUFBLEVBQUE7Z0JBQ1AsQ0FBQSxHQUFJLEVBQUcsQ0FBQSxFQUFBLEdBQUcsQ0FBSDtnQkFDUCxJQUFHLENBQUUsQ0FBQSxDQUFBLENBQUYsS0FBUSxDQUFFLENBQUEsQ0FBQSxDQUFWLElBQWlCLENBQUUsQ0FBQSxDQUFBLENBQUYsS0FBUSxDQUFFLENBQUEsQ0FBQSxDQUE5QjtvQkFDSSxFQUFFLENBQUMsTUFBSCxDQUFVLEVBQVYsRUFBYyxDQUFkLEVBREo7O0FBSEosYUFESjs7ZUFNQTtJQWRVOztpQkFzQmQsSUFBQSxHQUFpQixTQUFBO2VBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQUE7SUFBSDs7aUJBQ2pCLElBQUEsR0FBYSxTQUFDLENBQUQ7ZUFBTyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsQ0FBWSxDQUFaO0lBQVA7O2lCQUNiLE1BQUEsR0FBYSxTQUFDLENBQUQ7ZUFBTyxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsQ0FBYyxDQUFkO0lBQVA7O2lCQUNiLFNBQUEsR0FBYSxTQUFDLENBQUQ7ZUFBTyxJQUFDLENBQUEsS0FBSyxDQUFDLFNBQVAsQ0FBaUIsQ0FBakI7SUFBUDs7aUJBQ2IsU0FBQSxHQUFhLFNBQUMsQ0FBRDtlQUFPLElBQUMsQ0FBQSxLQUFLLENBQUMsU0FBUCxDQUFpQixDQUFqQjtJQUFQOztpQkFFYixLQUFBLEdBQWlCLFNBQUE7ZUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsQ0FBQTtJQUFIOztpQkFDakIsT0FBQSxHQUFpQixTQUFBO2VBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFQLENBQUE7SUFBSDs7aUJBQ2pCLFVBQUEsR0FBaUIsU0FBQTtlQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBUCxDQUFBO0lBQUg7O2lCQUNqQixVQUFBLEdBQWlCLFNBQUE7ZUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVAsQ0FBQTtJQUFIOztpQkFFakIsUUFBQSxHQUFpQixTQUFBO2VBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFQLENBQUE7SUFBSDs7aUJBQ2pCLFVBQUEsR0FBaUIsU0FBQTtlQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBUCxDQUFBO0lBQUg7O2lCQUNqQixhQUFBLEdBQWlCLFNBQUE7ZUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBQTtJQUFIOztpQkFDakIsYUFBQSxHQUFpQixTQUFBO2VBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQUE7SUFBSDs7aUJBRWpCLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFBTyxZQUFBOzREQUFpQixDQUFFLEtBQW5CLENBQXlCLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQTlCLEVBQWtDLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQXZDO0lBQVA7O2lCQUNiLFVBQUEsR0FBaUIsU0FBQTtlQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBUCxDQUFBO0lBQUg7O2lCQUNqQixtQkFBQSxHQUFxQixTQUFDLENBQUQ7ZUFBTyxDQUFDLENBQUQsRUFBSSxDQUFDLENBQUQsRUFBSSxJQUFDLENBQUEsSUFBRCxDQUFNLENBQU4sQ0FBUSxDQUFDLE1BQWIsQ0FBSjtJQUFQOzs7Ozs7QUFFekIsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMDAwMDAgICAgIDAwMDAwMDBcbjAwMCAgIDAwMCAgMDAwICAgMDAwXG4wMDAgICAwMDAgIDAwMCAgIDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDBcbjAwMDAwMDAgICAgIDAwMDAwMDBcbiMjI1xuXG57IGVtcHR5LCBjbGFtcCwgbGFzdCwga2Vycm9yLCBfIH0gPSByZXF1aXJlICdreGsnXG5cblN0YXRlID0gcmVxdWlyZSAnLi9zdGF0ZSdcbnJlcXVpcmUgJy4uL3Rvb2xzL3JhbmdlcydcblxuY2xhc3MgRG9cblxuICAgIEA6IChAZWRpdG9yKSAtPlxuXG4gICAgICAgIEByZXNldCgpXG5cbiAgICBkZWw6IC0+IFxuXG4gICAgIyAwMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAgICAgIDAwMCAgMDAwICAgICAgICAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwICAgICAwMDBcblxuICAgIHJlc2V0OiAtPlxuXG4gICAgICAgIEBncm91cENvdW50ID0gMFxuICAgICAgICBAaGlzdG9yeSA9IFtdXG4gICAgICAgIEByZWRvcyAgID0gW11cbiAgICAgICAgQHN0YXRlICAgPSBudWxsXG5cbiAgICBoYXNMaW5lQ2hhbmdlczogLT5cblxuICAgICAgICByZXR1cm4gZmFsc2UgaWYgQGhpc3RvcnkubGVuZ3RoID09IDBcbiAgICAgICAgcmV0dXJuIGZhbHNlIGlmIF8uZmlyc3QoQGhpc3RvcnkpLnMubGluZXMgPT0gQGVkaXRvci5zdGF0ZS5zLmxpbmVzXG4gICAgICAgIF8uZmlyc3QoQGhpc3RvcnkpLnRleHQoKSAhPSBAZWRpdG9yLnRleHQoKVxuXG4gICAgIyAgMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwXG4gICAgIyAwMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgICAgMDAwXG4gICAgIyAgICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwXG4gICAgIyAwMDAwMDAwICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwXG5cbiAgICBzdGFydDogLT5cblxuICAgICAgICBAZ3JvdXBDb3VudCArPSAxXG4gICAgICAgIGlmIEBncm91cENvdW50ID09IDFcbiAgICAgICAgICAgIEBzdGFydFN0YXRlID0gQHN0YXRlID0gbmV3IFN0YXRlIEBlZGl0b3Iuc3RhdGUuc1xuICAgICAgICAgICAgaWYgZW1wdHkoQGhpc3RvcnkpIG9yIEBzdGF0ZS5zICE9IGxhc3QoQGhpc3RvcnkpLnNcbiAgICAgICAgICAgICAgICBAaGlzdG9yeS5wdXNoIEBzdGF0ZVxuXG4gICAgaXNEb2luZzogLT4gQGdyb3VwQ291bnQgPiAwXG5cbiAgICAjIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAgIDAwMCAwMDBcbiAgICAjIDAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMDAwICAgICAgMDAwMDBcbiAgICAjIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgICAgIDAwMFxuICAgICMgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwICAwMDAgICAgICAgICAgMDAwXG5cbiAgICBjaGFuZ2U6IChpbmRleCwgdGV4dCkgLT4gQHN0YXRlID0gQHN0YXRlLmNoYW5nZUxpbmUgaW5kZXgsIHRleHRcbiAgICBpbnNlcnQ6IChpbmRleCwgdGV4dCkgLT4gQHN0YXRlID0gQHN0YXRlLmluc2VydExpbmUgaW5kZXgsIHRleHRcbiAgICBkZWxldGU6IChpbmRleCkgLT5cbiAgICAgICAgaWYgQG51bUxpbmVzKCkgPj0gMSBhbmQgMCA8PSBpbmRleCA8IEBudW1MaW5lcygpXG4gICAgICAgICAgICBAZWRpdG9yLmVtaXQgJ3dpbGxEZWxldGVMaW5lJyBAbGluZSBpbmRleFxuICAgICAgICAgICAgQHN0YXRlID0gQHN0YXRlLmRlbGV0ZUxpbmUgaW5kZXhcblxuICAgICMgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMDAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAwMDAwICAgMDAwIDAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgIDAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMFxuXG4gICAgZW5kOiAob3B0KSAtPlxuXG4gICAgICAgICMgISEhIE5PIGxvZyBIRVJFICEhIVxuXG4gICAgICAgIEByZWRvcyA9IFtdXG4gICAgICAgIEBncm91cENvdW50IC09IDFcbiAgICAgICAgaWYgQGdyb3VwQ291bnQgPT0gMFxuICAgICAgICAgICAgQG1lcmdlKClcbiAgICAgICAgICAgIGNoYW5nZXMgPSBAY2FsY3VsYXRlQ2hhbmdlcyBAc3RhcnRTdGF0ZSwgQHN0YXRlXG4gICAgICAgICAgICBAZWRpdG9yLnNldFN0YXRlIEBzdGF0ZVxuICAgICAgICAgICAgQGVkaXRvci5jaGFuZ2VkPyBjaGFuZ2VzXG5cbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgICAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgMDAwMDAwMFxuXG4gICAgdW5kbzogLT5cblxuICAgICAgICBpZiBAaGlzdG9yeS5sZW5ndGhcblxuICAgICAgICAgICAgaWYgXy5pc0VtcHR5IEByZWRvc1xuICAgICAgICAgICAgICAgIEByZWRvcy51bnNoaWZ0IEBlZGl0b3Iuc3RhdGVcblxuICAgICAgICAgICAgQHN0YXRlID0gQGhpc3RvcnkucG9wKClcbiAgICAgICAgICAgIEByZWRvcy51bnNoaWZ0IEBzdGF0ZVxuXG4gICAgICAgICAgICBjaGFuZ2VzID0gQGNhbGN1bGF0ZUNoYW5nZXMgQGVkaXRvci5zdGF0ZSwgQHN0YXRlXG4gICAgICAgICAgICBAZWRpdG9yLnNldFN0YXRlIEBzdGF0ZVxuICAgICAgICAgICAgQGVkaXRvci5jaGFuZ2VkPyBjaGFuZ2VzXG4gICAgICAgICAgICBAZWRpdG9yLmVtaXQgJ3VuZG9uZSdcblxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwMDAwMCAgICAgMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgICAgMDAwMDAwMFxuXG4gICAgcmVkbzogLT5cblxuICAgICAgICBpZiBAcmVkb3MubGVuZ3RoXG5cbiAgICAgICAgICAgIGlmIEByZWRvcy5sZW5ndGggPiAxXG4gICAgICAgICAgICAgICAgQGhpc3RvcnkucHVzaCBAcmVkb3Muc2hpZnQoKVxuXG4gICAgICAgICAgICBAc3RhdGUgPSBfLmZpcnN0IEByZWRvc1xuICAgICAgICAgICAgaWYgQHJlZG9zLmxlbmd0aCA9PSAxXG4gICAgICAgICAgICAgICAgQHJlZG9zID0gW11cblxuICAgICAgICAgICAgY2hhbmdlcyA9IEBjYWxjdWxhdGVDaGFuZ2VzIEBlZGl0b3Iuc3RhdGUsIEBzdGF0ZVxuICAgICAgICAgICAgQGVkaXRvci5zZXRTdGF0ZSBAc3RhdGVcbiAgICAgICAgICAgIEBlZGl0b3IuY2hhbmdlZD8gY2hhbmdlc1xuICAgICAgICAgICAgQGVkaXRvci5lbWl0ICdyZWRvbmUnXG5cbiAgICAjICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgICAgMDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMCAgICAgICAgICAwMDBcbiAgICAjICAgICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAgICAwMDBcblxuICAgIHNlbGVjdDogKG5ld1NlbGVjdGlvbnMpIC0+XG5cbiAgICAgICAgaWYgbmV3U2VsZWN0aW9ucy5sZW5ndGhcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbnMgPSBjbGVhblJhbmdlcyBuZXdTZWxlY3Rpb25zXG4gICAgICAgICAgICBAc3RhdGUgPSBAc3RhdGUuc2V0U2VsZWN0aW9ucyBuZXdTZWxlY3Rpb25zXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBzdGF0ZSA9IEBzdGF0ZS5zZXRTZWxlY3Rpb25zIFtdXG5cbiAgICAjICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuXG4gICAgc2V0Q3Vyc29yczogKG5ld0N1cnNvcnMsIG9wdCkgLT5cblxuICAgICAgICBpZiBub3QgbmV3Q3Vyc29ycz8gb3IgbmV3Q3Vyc29ycy5sZW5ndGggPCAxXG4gICAgICAgICAgICByZXR1cm4ga2Vycm9yIFwiRG8uc2V0Q3Vyc29ycyAtLSBlbXB0eSBjdXJzb3JzP1wiXG5cbiAgICAgICAgaWYgb3B0Py5tYWluXG4gICAgICAgICAgICBzd2l0Y2ggb3B0Lm1haW5cbiAgICAgICAgICAgICAgICB3aGVuICdmaXJzdCcgdGhlbiBtYWluSW5kZXggPSAwXG4gICAgICAgICAgICAgICAgd2hlbiAnbGFzdCcgIHRoZW4gbWFpbkluZGV4ID0gbmV3Q3Vyc29ycy5sZW5ndGgtMVxuICAgICAgICAgICAgICAgIHdoZW4gJ2Nsb3Nlc3QnXG4gICAgICAgICAgICAgICAgICAgIG1haW5JbmRleCA9IG5ld0N1cnNvcnMuaW5kZXhPZiBwb3NDbG9zZXN0VG9Qb3NJblBvc2l0aW9ucyBAZWRpdG9yLm1haW5DdXJzb3IoKSwgbmV3Q3Vyc29yc1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgbWFpbkluZGV4ID0gbmV3Q3Vyc29ycy5pbmRleE9mIG9wdC5tYWluXG4gICAgICAgICAgICAgICAgICAgIG1haW5JbmRleCA9IHBhcnNlSW50IG9wdC5tYWluIGlmIG1haW5JbmRleCA8IDBcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbWFpbkluZGV4ID0gbmV3Q3Vyc29ycy5sZW5ndGgtMVxuXG4gICAgICAgIG1haW5DdXJzb3IgPSBuZXdDdXJzb3JzW21haW5JbmRleF1cbiAgICAgICAgQGNsZWFuQ3Vyc29ycyBuZXdDdXJzb3JzXG4gICAgICAgIG1haW5JbmRleCA9IG5ld0N1cnNvcnMuaW5kZXhPZiBwb3NDbG9zZXN0VG9Qb3NJblBvc2l0aW9ucyBtYWluQ3Vyc29yLCBuZXdDdXJzb3JzXG5cbiAgICAgICAgQHN0YXRlID0gQHN0YXRlLnNldEN1cnNvcnMgbmV3Q3Vyc29yc1xuICAgICAgICBAc3RhdGUgPSBAc3RhdGUuc2V0TWFpbiBtYWluSW5kZXhcblxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwMDAwMDAwICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMFxuICAgICMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwXG5cbiAgICBjYWxjdWxhdGVDaGFuZ2VzOiAob2xkU3RhdGUsIG5ld1N0YXRlKSAtPlxuXG4gICAgICAgIG9pID0gMCAjIGluZGV4IGluIG9sZFN0YXRlXG4gICAgICAgIG5pID0gMCAjIGluZGV4IGluIG5ld1N0YXRlXG4gICAgICAgIGRkID0gMCAjIGRlbHRhIGZvciBkb0luZGV4XG4gICAgICAgIGNoYW5nZXMgPSBbXVxuXG4gICAgICAgIG9sZExpbmVzID0gb2xkU3RhdGUucy5saW5lcyAjIHdlIGFyZSB3b3JraW5nIG9uIHJhd1xuICAgICAgICBuZXdMaW5lcyA9IG5ld1N0YXRlLnMubGluZXMgIyBpbW11dGFibGVzIGhlcmUhXG5cbiAgICAgICAgaW5zZXJ0aW9ucyA9IDAgIyBudW1iZXIgb2YgaW5zZXJ0aW9uc1xuICAgICAgICBkZWxldGlvbnMgID0gMCAjIG51bWJlciBvZiBkZWxldGlvbnNcblxuICAgICAgICBpZiBvbGRMaW5lcyAhPSBuZXdMaW5lc1xuXG4gICAgICAgICAgICBvbCA9IG9sZExpbmVzW29pXVxuICAgICAgICAgICAgbmwgPSBuZXdMaW5lc1tuaV1cblxuICAgICAgICAgICAgd2hpbGUgbmwgYW5kIG9pIDwgb2xkTGluZXMubGVuZ3RoICMgbm90IG5sPyBhIHByb2JsZW0/XG5cbiAgICAgICAgICAgICAgICBpZiBub3Qgbmw/ICMgbmV3IHN0YXRlIGhhcyBub3QgZW5vdWdoIGxpbmVzLCBtYXJrIHJlbWFpbmluZyBsaW5lcyBpbiBvbGRTdGF0ZSBhcyBkZWxldGVkXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0aW9ucyArPSAxXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaCBjaGFuZ2U6ICdkZWxldGVkJyBvbGRJbmRleDogb2ksIGRvSW5kZXg6IG9pK2RkXG4gICAgICAgICAgICAgICAgICAgIG9pICs9IDFcbiAgICAgICAgICAgICAgICAgICAgZGQgLT0gMVxuXG4gICAgICAgICAgICAgICAgZWxzZSBpZiBvbCA9PSBubCAjIHNhbWUgbGluZXMgaW4gb2xkIGFuZCBuZXdcbiAgICAgICAgICAgICAgICAgICAgb2kgKz0gMVxuICAgICAgICAgICAgICAgICAgICBvbCA9IG9sZExpbmVzW29pXVxuICAgICAgICAgICAgICAgICAgICBuaSArPSAxXG4gICAgICAgICAgICAgICAgICAgIG5sID0gbmV3TGluZXNbbmldXG5cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGluc2VydHMgPSBuZXdMaW5lcy5zbGljZShuaSkuZmluZEluZGV4ICh2KSAtPiB2PT1vbCAjIGluc2VydGlvblxuICAgICAgICAgICAgICAgICAgICBkZWxldGVzID0gb2xkTGluZXMuc2xpY2Uob2kpLmZpbmRJbmRleCAodikgLT4gdj09bmwgIyBkZWxldGlvblxuXG4gICAgICAgICAgICAgICAgICAgIGlmIGluc2VydHMgPiAwIGFuZCAoZGVsZXRlcyA8PSAwIG9yIGluc2VydHMgPCBkZWxldGVzKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSBpbnNlcnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoIGNoYW5nZTogJ2luc2VydGVkJyBuZXdJbmRleDogbmksIGRvSW5kZXg6IG9pK2RkLCBhZnRlcjogbmwudGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pICs9IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZCArPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0cyAtPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0aW9ucyArPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICBubCA9IG5ld0xpbmVzW25pXVxuXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgZGVsZXRlcyA+IDAgYW5kIChpbnNlcnRzIDw9IDAgb3IgZGVsZXRlcyA8IGluc2VydHMpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIGRlbGV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLnB1c2ggY2hhbmdlOiAnZGVsZXRlZCcgb2xkSW5kZXg6IG9pLCBkb0luZGV4OiBvaStkZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9pICs9IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZCAtPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlcyAtPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRpb25zICs9IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sID0gb2xkTGluZXNbb2ldXG5cbiAgICAgICAgICAgICAgICAgICAgZWxzZSAjIGNoYW5nZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLnB1c2ggY2hhbmdlOiAnY2hhbmdlZCcgb2xkSW5kZXg6IG9pLCBuZXdJbmRleDogbmksIGRvSW5kZXg6IG9pK2RkLCBhZnRlcjogbmwudGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgb2kgKz0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgb2wgPSBvbGRMaW5lc1tvaV1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5pICs9IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIG5sID0gbmV3TGluZXNbbmldXG5cbiAgICAgICAgICAgIHdoaWxlIG5pIDwgbmV3TGluZXMubGVuZ3RoICMgbWFyayByZW1haW5nIGxpbmVzIGluIG5ld1N0YXRlIGFzIGluc2VydGVkXG5cbiAgICAgICAgICAgICAgICBpbnNlcnRpb25zICs9IDFcbiAgICAgICAgICAgICAgICBjaGFuZ2VzLnB1c2ggY2hhbmdlOiAnaW5zZXJ0ZWQnIG5ld0luZGV4OiBuaSwgZG9JbmRleDogbmksIGFmdGVyOiBubC50ZXh0XG4gICAgICAgICAgICAgICAgbmkgKz0gMVxuICAgICAgICAgICAgICAgIG5sID0gbmV3TGluZXNbbmldXG5cbiAgICAgICAgY2hhbmdlczogY2hhbmdlc1xuICAgICAgICBpbnNlcnRzOiBpbnNlcnRpb25zXG4gICAgICAgIGRlbGV0ZXM6IGRlbGV0aW9uc1xuICAgICAgICBjdXJzb3JzOiBvbGRTdGF0ZS5zLmN1cnNvcnMgICAgIT0gbmV3U3RhdGUucy5jdXJzb3JzXG4gICAgICAgIHNlbGVjdHM6IG9sZFN0YXRlLnMuc2VsZWN0aW9ucyAhPSBuZXdTdGF0ZS5zLnNlbGVjdGlvbnNcblxuICAgICMgMDAgICAgIDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwXG4gICAgIyAwMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMCAgMDAwMCAgMDAwMDAwMFxuICAgICMgMDAwIDAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwXG5cbiAgICAjIGxvb2tzIGF0IGxhc3QgdHdvIGFjdGlvbnMgYW5kIG1lcmdlcyB0aGVtXG4gICAgIyAgICAgICB3aGVuIHRoZXkgY29udGFpbiBubyBsaW5lIGNoYW5nZXNcbiAgICAjICAgICAgIHdoZW4gdGhleSBjb250YWluIG9ubHkgY2hhbmdlcyBvZiB0aGUgc2FtZSBzZXQgb2YgbGluZXNcblxuICAgIG1lcmdlOiAtPlxuXG4gICAgICAgIHdoaWxlIEBoaXN0b3J5Lmxlbmd0aCA+IDFcbiAgICAgICAgICAgIGIgPSBAaGlzdG9yeVtAaGlzdG9yeS5sZW5ndGgtMl1cbiAgICAgICAgICAgIGEgPSBsYXN0IEBoaXN0b3J5XG4gICAgICAgICAgICBpZiBhLnMubGluZXMgPT0gYi5zLmxpbmVzXG4gICAgICAgICAgICAgICAgaWYgQGhpc3RvcnkubGVuZ3RoID4gMlxuICAgICAgICAgICAgICAgICAgICBAaGlzdG9yeS5zcGxpY2UgQGhpc3RvcnkubGVuZ3RoLTIsIDFcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgZWxzZSBpZiBAaGlzdG9yeS5sZW5ndGggPiAyXG4gICAgICAgICAgICAgICAgYyA9IEBoaXN0b3J5W0BoaXN0b3J5Lmxlbmd0aC0zXVxuICAgICAgICAgICAgICAgIGlmIGEubnVtTGluZXMoKSA9PSBiLm51bUxpbmVzKCkgPT0gYy5udW1MaW5lcygpXG4gICAgICAgICAgICAgICAgICAgIGZvciBsaSBpbiBbMC4uLmEubnVtTGluZXMoKV1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhID0gYS5zLmxpbmVzW2xpXVxuICAgICAgICAgICAgICAgICAgICAgICAgbGIgPSBiLnMubGluZXNbbGldXG4gICAgICAgICAgICAgICAgICAgICAgICBsYyA9IGMucy5saW5lc1tsaV1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxhID09IGxiIGFuZCBsYyAhPSBsYiBvciBsYSAhPSBsYiBhbmQgbGMgPT0gbGJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgQGhpc3Rvcnkuc3BsaWNlIEBoaXN0b3J5Lmxlbmd0aC0yLCAxXG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm5cbiAgICAgICAgICAgIGVsc2UgcmV0dXJuXG5cbiAgICAjICAwMDAwMDAwICAwMDAgICAgICAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAgMCAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgIDAwMDBcbiAgICAjICAwMDAwMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcblxuICAgIGNsZWFuQ3Vyc29yczogKGNzKSAtPlxuXG4gICAgICAgIGZvciBwIGluIGNzXG4gICAgICAgICAgICBwWzBdID0gTWF0aC5tYXggcFswXSwgMFxuICAgICAgICAgICAgcFsxXSA9IGNsYW1wIDAsIEBzdGF0ZS5udW1MaW5lcygpLTEsIHBbMV1cblxuICAgICAgICBzb3J0UG9zaXRpb25zIGNzXG5cbiAgICAgICAgaWYgY3MubGVuZ3RoID4gMVxuICAgICAgICAgICAgZm9yIGNpIGluIFtjcy5sZW5ndGgtMS4uLjBdXG4gICAgICAgICAgICAgICAgYyA9IGNzW2NpXVxuICAgICAgICAgICAgICAgIHAgPSBjc1tjaS0xXVxuICAgICAgICAgICAgICAgIGlmIGNbMV0gPT0gcFsxXSBhbmQgY1swXSA9PSBwWzBdXG4gICAgICAgICAgICAgICAgICAgIGNzLnNwbGljZSBjaSwgMVxuICAgICAgICBjc1xuXG4gICAgIyAgMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDBcbiAgICAjIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwXG4gICAgIyAgICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwXG4gICAgIyAwMDAwMDAwICAgICAgMDAwICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDBcblxuICAgIHRleHQ6ICAgICAgICAgICAgLT4gQHN0YXRlLnRleHQoKVxuICAgIGxpbmU6ICAgICAgICAoaSkgLT4gQHN0YXRlLmxpbmUgaVxuICAgIGN1cnNvcjogICAgICAoaSkgLT4gQHN0YXRlLmN1cnNvciBpXG4gICAgaGlnaGxpZ2h0OiAgIChpKSAtPiBAc3RhdGUuaGlnaGxpZ2h0IGlcbiAgICBzZWxlY3Rpb246ICAgKGkpIC0+IEBzdGF0ZS5zZWxlY3Rpb24gaVxuXG4gICAgbGluZXM6ICAgICAgICAgICAtPiBAc3RhdGUubGluZXMoKVxuICAgIGN1cnNvcnM6ICAgICAgICAgLT4gQHN0YXRlLmN1cnNvcnMoKVxuICAgIGhpZ2hsaWdodHM6ICAgICAgLT4gQHN0YXRlLmhpZ2hsaWdodHMoKVxuICAgIHNlbGVjdGlvbnM6ICAgICAgLT4gQHN0YXRlLnNlbGVjdGlvbnMoKVxuXG4gICAgbnVtTGluZXM6ICAgICAgICAtPiBAc3RhdGUubnVtTGluZXMoKVxuICAgIG51bUN1cnNvcnM6ICAgICAgLT4gQHN0YXRlLm51bUN1cnNvcnMoKVxuICAgIG51bVNlbGVjdGlvbnM6ICAgLT4gQHN0YXRlLm51bVNlbGVjdGlvbnMoKVxuICAgIG51bUhpZ2hsaWdodHM6ICAgLT4gQHN0YXRlLm51bUhpZ2hsaWdodHMoKVxuXG4gICAgdGV4dEluUmFuZ2U6IChyKSAtPiBAc3RhdGUubGluZShyWzBdKT8uc2xpY2UgclsxXVswXSwgclsxXVsxXVxuICAgIG1haW5DdXJzb3I6ICAgICAgLT4gQHN0YXRlLm1haW5DdXJzb3IoKVxuICAgIHJhbmdlRm9yTGluZUF0SW5kZXg6IChpKSAtPiBbaSwgWzAsIEBsaW5lKGkpLmxlbmd0aF1dXG5cbm1vZHVsZS5leHBvcnRzID0gRG9cbiJdfQ==
//# sourceURL=../../coffee/editor/do.coffee