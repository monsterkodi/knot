// koffee 1.4.0

/*
0000000     0000000
000   000  000   000
000   000  000   000
000   000  000   000
0000000     0000000
 */
var Do, State, _, clamp, empty, kerror, last, ref;

ref = require('kxk'), empty = ref.empty, clamp = ref.clamp, last = ref.last, kerror = ref.kerror, _ = ref._;

State = require('./state');

require('../tools/ranges');

Do = (function() {
    function Do(editor) {
        this.editor = editor;
        this.reset();
    }

    Do.prototype.del = function() {};

    Do.prototype.reset = function() {
        this.groupCount = 0;
        this.history = [];
        this.redos = [];
        return this.state = null;
    };

    Do.prototype.hasLineChanges = function() {
        if (this.history.length === 0) {
            return false;
        }
        if (_.first(this.history).s.lines === this.editor.state.s.lines) {
            return false;
        }
        return _.first(this.history).text() !== this.editor.text();
    };

    Do.prototype.start = function() {
        this.groupCount += 1;
        if (this.groupCount === 1) {
            this.startState = this.state = new State(this.editor.state.s);
            if (empty(this.history) || this.state.s !== last(this.history).s) {
                return this.history.push(this.state);
            }
        }
    };

    Do.prototype.isDoing = function() {
        return this.groupCount > 0;
    };

    Do.prototype.change = function(index, text) {
        return this.state = this.state.changeLine(index, text);
    };

    Do.prototype.insert = function(index, text) {
        return this.state = this.state.insertLine(index, text);
    };

    Do.prototype["delete"] = function(index) {
        if (this.numLines() >= 1 && (0 <= index && index < this.numLines())) {
            this.editor.emit('willDeleteLine', this.line(index));
            return this.state = this.state.deleteLine(index);
        }
    };

    Do.prototype.end = function(opt) {
        var base, changes;
        this.redos = [];
        this.groupCount -= 1;
        if (this.groupCount === 0) {
            this.merge();
            changes = this.calculateChanges(this.startState, this.state);
            this.editor.setState(this.state);
            return typeof (base = this.editor).changed === "function" ? base.changed(changes) : void 0;
        }
    };

    Do.prototype.undo = function() {
        var base, changes;
        if (this.history.length) {
            if (_.isEmpty(this.redos)) {
                this.redos.unshift(this.editor.state);
            }
            this.state = this.history.pop();
            this.redos.unshift(this.state);
            changes = this.calculateChanges(this.editor.state, this.state);
            this.editor.setState(this.state);
            if (typeof (base = this.editor).changed === "function") {
                base.changed(changes);
            }
            return this.editor.emit('undone');
        }
    };

    Do.prototype.redo = function() {
        var base, changes;
        if (this.redos.length) {
            if (this.redos.length > 1) {
                this.history.push(this.redos.shift());
            }
            this.state = _.first(this.redos);
            if (this.redos.length === 1) {
                this.redos = [];
            }
            changes = this.calculateChanges(this.editor.state, this.state);
            this.editor.setState(this.state);
            if (typeof (base = this.editor).changed === "function") {
                base.changed(changes);
            }
            return this.editor.emit('redone');
        }
    };

    Do.prototype.select = function(newSelections) {
        if (newSelections.length) {
            newSelections = cleanRanges(newSelections);
            return this.state = this.state.setSelections(newSelections);
        } else {
            return this.state = this.state.setSelections([]);
        }
    };

    Do.prototype.setCursors = function(newCursors, opt) {
        var mainCursor, mainIndex;
        if ((newCursors == null) || newCursors.length < 1) {
            return kerror("Do.setCursors -- empty cursors?");
        }
        if (opt != null ? opt.main : void 0) {
            switch (opt.main) {
                case 'first':
                    mainIndex = 0;
                    break;
                case 'last':
                    mainIndex = newCursors.length - 1;
                    break;
                case 'closest':
                    mainIndex = newCursors.indexOf(posClosestToPosInPositions(this.editor.mainCursor(), newCursors));
                    break;
                default:
                    mainIndex = newCursors.indexOf(opt.main);
                    if (mainIndex < 0) {
                        mainIndex = parseInt(opt.main);
                    }
            }
        } else {
            mainIndex = newCursors.length - 1;
        }
        mainCursor = newCursors[mainIndex];
        this.cleanCursors(newCursors);
        mainIndex = newCursors.indexOf(posClosestToPosInPositions(mainCursor, newCursors));
        this.state = this.state.setCursors(newCursors);
        return this.state = this.state.setMain(mainIndex);
    };

    Do.prototype.calculateChanges = function(oldState, newState) {
        var changes, dd, deletes, deletions, insertions, inserts, newLines, ni, nl, oi, ol, oldLines;
        oi = 0;
        ni = 0;
        dd = 0;
        changes = [];
        oldLines = oldState.s.lines;
        newLines = newState.s.lines;
        insertions = 0;
        deletions = 0;
        if (oldLines !== newLines) {
            ol = oldLines[oi];
            nl = newLines[ni];
            while (oi < oldLines.length) {
                if (nl == null) {
                    deletions += 1;
                    changes.push({
                        change: 'deleted',
                        oldIndex: oi,
                        doIndex: oi + dd
                    });
                    oi += 1;
                    dd -= 1;
                } else if (ol === nl) {
                    oi += 1;
                    ol = oldLines[oi];
                    ni += 1;
                    nl = newLines[ni];
                } else {
                    inserts = newLines.slice(ni).findIndex(function(v) {
                        return v === ol;
                    });
                    deletes = oldLines.slice(oi).findIndex(function(v) {
                        return v === nl;
                    });
                    if (inserts > 0 && (deletes <= 0 || inserts < deletes)) {
                        while (inserts) {
                            changes.push({
                                change: 'inserted',
                                newIndex: ni,
                                doIndex: oi + dd,
                                after: nl.text
                            });
                            ni += 1;
                            dd += 1;
                            inserts -= 1;
                            insertions += 1;
                        }
                        nl = newLines[ni];
                    } else if (deletes > 0 && (inserts <= 0 || deletes < inserts)) {
                        while (deletes) {
                            changes.push({
                                change: 'deleted',
                                oldIndex: oi,
                                doIndex: oi + dd
                            });
                            oi += 1;
                            dd -= 1;
                            deletes -= 1;
                            deletions += 1;
                        }
                        ol = oldLines[oi];
                    } else {
                        changes.push({
                            change: 'changed',
                            oldIndex: oi,
                            newIndex: ni,
                            doIndex: oi + dd,
                            after: nl.text
                        });
                        oi += 1;
                        ol = oldLines[oi];
                        ni += 1;
                        nl = newLines[ni];
                    }
                }
            }
            while (ni < newLines.length) {
                insertions += 1;
                changes.push({
                    change: 'inserted',
                    newIndex: ni,
                    doIndex: ni,
                    after: nl.text
                });
                ni += 1;
                nl = newLines[ni];
            }
        }
        return {
            changes: changes,
            inserts: insertions,
            deletes: deletions,
            cursors: oldState.s.cursors !== newState.s.cursors,
            selects: oldState.s.selections !== newState.s.selections
        };
    };

    Do.prototype.merge = function() {
        var a, b, c, j, la, lb, lc, li, ref1, ref2;
        while (this.history.length > 1) {
            b = this.history[this.history.length - 2];
            a = last(this.history);
            if (a.s.lines === b.s.lines) {
                if (this.history.length > 2) {
                    this.history.splice(this.history.length - 2, 1);
                } else {
                    return;
                }
            } else if (this.history.length > 2) {
                c = this.history[this.history.length - 3];
                if ((a.numLines() === (ref1 = b.numLines()) && ref1 === c.numLines())) {
                    for (li = j = 0, ref2 = a.numLines(); 0 <= ref2 ? j < ref2 : j > ref2; li = 0 <= ref2 ? ++j : --j) {
                        la = a.s.lines[li];
                        lb = b.s.lines[li];
                        lc = c.s.lines[li];
                        if (la === lb && lc !== lb || la !== lb && lc === lb) {
                            return;
                        }
                    }
                    this.history.splice(this.history.length - 2, 1);
                } else {
                    return;
                }
            } else {
                return;
            }
        }
    };

    Do.prototype.cleanCursors = function(cs) {
        var c, ci, j, k, len, p, ref1;
        for (j = 0, len = cs.length; j < len; j++) {
            p = cs[j];
            p[0] = Math.max(p[0], 0);
            p[1] = clamp(0, this.state.numLines() - 1, p[1]);
        }
        sortPositions(cs);
        if (cs.length > 1) {
            for (ci = k = ref1 = cs.length - 1; ref1 <= 0 ? k < 0 : k > 0; ci = ref1 <= 0 ? ++k : --k) {
                c = cs[ci];
                p = cs[ci - 1];
                if (c[1] === p[1] && c[0] === p[0]) {
                    cs.splice(ci, 1);
                }
            }
        }
        return cs;
    };

    Do.prototype.text = function() {
        return this.state.text();
    };

    Do.prototype.line = function(i) {
        return this.state.line(i);
    };

    Do.prototype.cursor = function(i) {
        return this.state.cursor(i);
    };

    Do.prototype.highlight = function(i) {
        return this.state.highlight(i);
    };

    Do.prototype.selection = function(i) {
        return this.state.selection(i);
    };

    Do.prototype.lines = function() {
        return this.state.lines();
    };

    Do.prototype.cursors = function() {
        return this.state.cursors();
    };

    Do.prototype.highlights = function() {
        return this.state.highlights();
    };

    Do.prototype.selections = function() {
        return this.state.selections();
    };

    Do.prototype.numLines = function() {
        return this.state.numLines();
    };

    Do.prototype.numCursors = function() {
        return this.state.numCursors();
    };

    Do.prototype.numSelections = function() {
        return this.state.numSelections();
    };

    Do.prototype.numHighlights = function() {
        return this.state.numHighlights();
    };

    Do.prototype.textInRange = function(r) {
        var ref1;
        return (ref1 = this.state.line(r[0])) != null ? ref1.slice(r[1][0], r[1][1]) : void 0;
    };

    Do.prototype.mainCursor = function() {
        return this.state.mainCursor();
    };

    Do.prototype.rangeForLineAtIndex = function(i) {
        return [i, [0, this.line(i).length]];
    };

    return Do;

})();

module.exports = Do;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG8uanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLE1BQW9DLE9BQUEsQ0FBUSxLQUFSLENBQXBDLEVBQUUsaUJBQUYsRUFBUyxpQkFBVCxFQUFnQixlQUFoQixFQUFzQixtQkFBdEIsRUFBOEI7O0FBRTlCLEtBQUEsR0FBUSxPQUFBLENBQVEsU0FBUjs7QUFDUixPQUFBLENBQVEsaUJBQVI7O0FBRU07SUFFQyxZQUFDLE1BQUQ7UUFBQyxJQUFDLENBQUEsU0FBRDtRQUVBLElBQUMsQ0FBQSxLQUFELENBQUE7SUFGRDs7aUJBSUgsR0FBQSxHQUFLLFNBQUEsR0FBQTs7aUJBUUwsS0FBQSxHQUFPLFNBQUE7UUFFSCxJQUFDLENBQUEsVUFBRCxHQUFjO1FBQ2QsSUFBQyxDQUFBLE9BQUQsR0FBVztRQUNYLElBQUMsQ0FBQSxLQUFELEdBQVc7ZUFDWCxJQUFDLENBQUEsS0FBRCxHQUFXO0lBTFI7O2lCQU9QLGNBQUEsR0FBZ0IsU0FBQTtRQUVaLElBQWdCLElBQUMsQ0FBQSxPQUFPLENBQUMsTUFBVCxLQUFtQixDQUFuQztBQUFBLG1CQUFPLE1BQVA7O1FBQ0EsSUFBZ0IsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFDLENBQUEsT0FBVCxDQUFpQixDQUFDLENBQUMsQ0FBQyxLQUFwQixLQUE2QixJQUFDLENBQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBN0Q7QUFBQSxtQkFBTyxNQUFQOztlQUNBLENBQUMsQ0FBQyxLQUFGLENBQVEsSUFBQyxDQUFBLE9BQVQsQ0FBaUIsQ0FBQyxJQUFsQixDQUFBLENBQUEsS0FBNEIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLENBQUE7SUFKaEI7O2lCQVloQixLQUFBLEdBQU8sU0FBQTtRQUVILElBQUMsQ0FBQSxVQUFELElBQWU7UUFDZixJQUFHLElBQUMsQ0FBQSxVQUFELEtBQWUsQ0FBbEI7WUFDSSxJ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QUFDLGFBQVAsQ0FBQTtJQUFIOztpQkFFakIsV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUFPLFlBQUE7NERBQWlCLENBQUUsS0FBbkIsQ0FBeUIsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBOUIsRUFBa0MsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBdkM7SUFBUDs7aUJBQ2IsVUFBQSxHQUFpQixTQUFBO2VBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFQLENBQUE7SUFBSDs7aUJBQ2pCLG1CQUFBLEdBQXFCLFNBQUMsQ0FBRDtlQUFPLENBQUMsQ0FBRCxFQUFJLENBQUMsQ0FBRCxFQUFJLElBQUMsQ0FBQSxJQUFELENBQU0sQ0FBTixDQUFRLENBQUMsTUFBYixDQUFKO0lBQVA7Ozs7OztBQUV6QixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMCAgICAgMDAwMDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDBcbjAwMCAgIDAwMCAgMDAwICAgMDAwXG4wMDAgICAwMDAgIDAwMCAgIDAwMFxuMDAwMDAwMCAgICAgMDAwMDAwMFxuIyMjXG5cbnsgZW1wdHksIGNsYW1wLCBsYXN0LCBrZXJyb3IsIF8gfSA9IHJlcXVpcmUgJ2t4aydcblxuU3RhdGUgPSByZXF1aXJlICcuL3N0YXRlJ1xucmVxdWlyZSAnLi4vdG9vbHMvcmFuZ2VzJ1xuXG5jbGFzcyBEb1xuXG4gICAgQDogKEBlZGl0b3IpIC0+XG5cbiAgICAgICAgQHJlc2V0KClcblxuICAgIGRlbDogLT4gXG5cbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAgICAgMDAwICAwMDAgICAgICAgICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgMDAwMDAwMDAgICAgIDAwMFxuXG4gICAgcmVzZXQ6IC0+XG5cbiAgICAgICAgQGdyb3VwQ291bnQgPSAwXG4gICAgICAgIEBoaXN0b3J5ID0gW11cbiAgICAgICAgQHJlZG9zICAgPSBbXVxuICAgICAgICBAc3RhdGUgICA9IG51bGxcblxuICAgIGhhc0xpbmVDaGFuZ2VzOiAtPlxuXG4gICAgICAgIHJldHVybiBmYWxzZSBpZiBAaGlzdG9yeS5sZW5ndGggPT0gMFxuICAgICAgICByZXR1cm4gZmFsc2UgaWYgXy5maXJzdChAaGlzdG9yeSkucy5saW5lcyA9PSBAZWRpdG9yLnN0YXRlLnMubGluZXNcbiAgICAgICAgXy5maXJzdChAaGlzdG9yeSkudGV4dCgpICE9IEBlZGl0b3IudGV4dCgpXG5cbiAgICAjICAwMDAwMDAwICAwMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDBcbiAgICAjIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgICAgICAwMDBcbiAgICAjICAgICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDBcbiAgICAjIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDBcblxuICAgIHN0YXJ0OiAtPlxuXG4gICAgICAgIEBncm91cENvdW50ICs9IDFcbiAgICAgICAgaWYgQGdyb3VwQ291bnQgPT0gMVxuICAgICAgICAgICAgQHN0YXJ0U3RhdGUgPSBAc3RhdGUgPSBuZXcgU3RhdGUgQGVkaXRvci5zdGF0ZS5zXG4gICAgICAgICAgICBpZiBlbXB0eShAaGlzdG9yeSkgb3IgQHN0YXRlLnMgIT0gbGFzdChAaGlzdG9yeSkuc1xuICAgICAgICAgICAgICAgIEBoaXN0b3J5LnB1c2ggQHN0YXRlXG5cbiAgICBpc0RvaW5nOiAtPiBAZ3JvdXBDb3VudCA+IDBcblxuICAgICMgMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgICAgMDAwIDAwMFxuICAgICMgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAgICAgICAwMDAwMFxuICAgICMgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAgICAgMDAwXG4gICAgIyAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAgIDAwMCAgICAgICAgICAwMDBcblxuICAgIGNoYW5nZTogKGluZGV4LCB0ZXh0KSAtPiBAc3RhdGUgPSBAc3RhdGUuY2hhbmdlTGluZSBpbmRleCwgdGV4dFxuICAgIGluc2VydDogKGluZGV4LCB0ZXh0KSAtPiBAc3RhdGUgPSBAc3RhdGUuaW5zZXJ0TGluZSBpbmRleCwgdGV4dFxuICAgIGRlbGV0ZTogKGluZGV4KSAtPlxuICAgICAgICBpZiBAbnVtTGluZXMoKSA+PSAxIGFuZCAwIDw9IGluZGV4IDwgQG51bUxpbmVzKClcbiAgICAgICAgICAgIEBlZGl0b3IuZW1pdCAnd2lsbERlbGV0ZUxpbmUnIEBsaW5lIGluZGV4XG4gICAgICAgICAgICBAc3RhdGUgPSBAc3RhdGUuZGVsZXRlTGluZSBpbmRleFxuXG4gICAgIyAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwMCAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMDAwMDAgICAwMDAgMCAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgMDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwXG5cbiAgICBlbmQ6IChvcHQpIC0+XG5cbiAgICAgICAgIyAhISEgTk8gbG9nIEhFUkUgISEhXG5cbiAgICAgICAgQHJlZG9zID0gW11cbiAgICAgICAgQGdyb3VwQ291bnQgLT0gMVxuICAgICAgICBpZiBAZ3JvdXBDb3VudCA9PSAwXG4gICAgICAgICAgICBAbWVyZ2UoKVxuICAgICAgICAgICAgY2hhbmdlcyA9IEBjYWxjdWxhdGVDaGFuZ2VzIEBzdGFydFN0YXRlLCBAc3RhdGVcbiAgICAgICAgICAgIEBlZGl0b3Iuc2V0U3RhdGUgQHN0YXRlXG4gICAgICAgICAgICBAZWRpdG9yLmNoYW5nZWQ/IGNoYW5nZXNcblxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgIDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgICAwMDAwMDAwXG5cbiAgICB1bmRvOiAtPlxuXG4gICAgICAgIGlmIEBoaXN0b3J5Lmxlbmd0aFxuXG4gICAgICAgICAgICBpZiBfLmlzRW1wdHkgQHJlZG9zXG4gICAgICAgICAgICAgICAgQHJlZG9zLnVuc2hpZnQgQGVkaXRvci5zdGF0ZVxuXG4gICAgICAgICAgICBAc3RhdGUgPSBAaGlzdG9yeS5wb3AoKVxuICAgICAgICAgICAgQHJlZG9zLnVuc2hpZnQgQHN0YXRlXG5cbiAgICAgICAgICAgIGNoYW5nZXMgPSBAY2FsY3VsYXRlQ2hhbmdlcyBAZWRpdG9yLnN0YXRlLCBAc3RhdGVcbiAgICAgICAgICAgIEBlZGl0b3Iuc2V0U3RhdGUgQHN0YXRlXG4gICAgICAgICAgICBAZWRpdG9yLmNoYW5nZWQ/IGNoYW5nZXNcbiAgICAgICAgICAgIEBlZGl0b3IuZW1pdCAndW5kb25lJ1xuXG4gICAgIyAwMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAwMDAwICAgICAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgICAwMDAwMDAwXG5cbiAgICByZWRvOiAtPlxuXG4gICAgICAgIGlmIEByZWRvcy5sZW5ndGhcblxuICAgICAgICAgICAgaWYgQHJlZG9zLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgICBAaGlzdG9yeS5wdXNoIEByZWRvcy5zaGlmdCgpXG5cbiAgICAgICAgICAgIEBzdGF0ZSA9IF8uZmlyc3QgQHJlZG9zXG4gICAgICAgICAgICBpZiBAcmVkb3MubGVuZ3RoID09IDFcbiAgICAgICAgICAgICAgICBAcmVkb3MgPSBbXVxuXG4gICAgICAgICAgICBjaGFuZ2VzID0gQGNhbGN1bGF0ZUNoYW5nZXMgQGVkaXRvci5zdGF0ZSwgQHN0YXRlXG4gICAgICAgICAgICBAZWRpdG9yLnNldFN0YXRlIEBzdGF0ZVxuICAgICAgICAgICAgQGVkaXRvci5jaGFuZ2VkPyBjaGFuZ2VzXG4gICAgICAgICAgICBAZWRpdG9yLmVtaXQgJ3JlZG9uZSdcblxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAgICAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAgICAwMDAwMDAwICAgMDAwICAgICAgICAgIDAwMFxuICAgICMgICAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMFxuXG4gICAgc2VsZWN0OiAobmV3U2VsZWN0aW9ucykgLT5cblxuICAgICAgICBpZiBuZXdTZWxlY3Rpb25zLmxlbmd0aFxuICAgICAgICAgICAgbmV3U2VsZWN0aW9ucyA9IGNsZWFuUmFuZ2VzIG5ld1NlbGVjdGlvbnNcbiAgICAgICAgICAgIEBzdGF0ZSA9IEBzdGF0ZS5zZXRTZWxlY3Rpb25zIG5ld1NlbGVjdGlvbnNcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHN0YXRlID0gQHN0YXRlLnNldFNlbGVjdGlvbnMgW11cblxuICAgICMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwXG5cbiAgICBzZXRDdXJzb3JzOiAobmV3Q3Vyc29ycywgb3B0KSAtPlxuXG4gICAgICAgIGlmIG5vdCBuZXdDdXJzb3JzPyBvciBuZXdDdXJzb3JzLmxlbmd0aCA8IDFcbiAgICAgICAgICAgIHJldHVybiBrZXJyb3IgXCJEby5zZXRDdXJzb3JzIC0tIGVtcHR5IGN1cnNvcnM/XCJcblxuICAgICAgICBpZiBvcHQ/Lm1haW5cbiAgICAgICAgICAgIHN3aXRjaCBvcHQubWFpblxuICAgICAgICAgICAgICAgIHdoZW4gJ2ZpcnN0JyB0aGVuIG1haW5JbmRleCA9IDBcbiAgICAgICAgICAgICAgICB3aGVuICdsYXN0JyAgdGhlbiBtYWluSW5kZXggPSBuZXdDdXJzb3JzLmxlbmd0aC0xXG4gICAgICAgICAgICAgICAgd2hlbiAnY2xvc2VzdCdcbiAgICAgICAgICAgICAgICAgICAgbWFpbkluZGV4ID0gbmV3Q3Vyc29ycy5pbmRleE9mIHBvc0Nsb3Nlc3RUb1Bvc0luUG9zaXRpb25zIEBlZGl0b3IubWFpbkN1cnNvcigpLCBuZXdDdXJzb3JzXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBtYWluSW5kZXggPSBuZXdDdXJzb3JzLmluZGV4T2Ygb3B0Lm1haW5cbiAgICAgICAgICAgICAgICAgICAgbWFpbkluZGV4ID0gcGFyc2VJbnQgb3B0Lm1haW4gaWYgbWFpbkluZGV4IDwgMFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBtYWluSW5kZXggPSBuZXdDdXJzb3JzLmxlbmd0aC0xXG5cbiAgICAgICAgbWFpbkN1cnNvciA9IG5ld0N1cnNvcnNbbWFpbkluZGV4XVxuICAgICAgICBAY2xlYW5DdXJzb3JzIG5ld0N1cnNvcnNcbiAgICAgICAgbWFpbkluZGV4ID0gbmV3Q3Vyc29ycy5pbmRleE9mIHBvc0Nsb3Nlc3RUb1Bvc0luUG9zaXRpb25zIG1haW5DdXJzb3IsIG5ld0N1cnNvcnNcblxuICAgICAgICBAc3RhdGUgPSBAc3RhdGUuc2V0Q3Vyc29ycyBuZXdDdXJzb3JzXG4gICAgICAgIEBzdGF0ZSA9IEBzdGF0ZS5zZXRNYWluIG1haW5JbmRleFxuXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAwMDAwMDAgIDAwMCAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwXG4gICAgIyAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDBcblxuICAgIGNhbGN1bGF0ZUNoYW5nZXM6IChvbGRTdGF0ZSwgbmV3U3RhdGUpIC0+XG5cbiAgICAgICAgb2kgPSAwICMgaW5kZXggaW4gb2xkU3RhdGVcbiAgICAgICAgbmkgPSAwICMgaW5kZXggaW4gbmV3U3RhdGVcbiAgICAgICAgZGQgPSAwICMgZGVsdGEgZm9yIGRvSW5kZXhcbiAgICAgICAgY2hhbmdlcyA9IFtdXG5cbiAgICAgICAgb2xkTGluZXMgPSBvbGRTdGF0ZS5zLmxpbmVzICMgd2UgYXJlIHdvcmtpbmcgb24gcmF3XG4gICAgICAgIG5ld0xpbmVzID0gbmV3U3RhdGUucy5saW5lcyAjIGltbXV0YWJsZXMgaGVyZSFcblxuICAgICAgICBpbnNlcnRpb25zID0gMCAjIG51bWJlciBvZiBpbnNlcnRpb25zXG4gICAgICAgIGRlbGV0aW9ucyAgPSAwICMgbnVtYmVyIG9mIGRlbGV0aW9uc1xuXG4gICAgICAgIGlmIG9sZExpbmVzICE9IG5ld0xpbmVzXG5cbiAgICAgICAgICAgIG9sID0gb2xkTGluZXNbb2ldXG4gICAgICAgICAgICBubCA9IG5ld0xpbmVzW25pXVxuXG4gICAgICAgICAgICB3aGlsZSBvaSA8IG9sZExpbmVzLmxlbmd0aFxuXG4gICAgICAgICAgICAgICAgaWYgbm90IG5sPyAjIG5ldyBzdGF0ZSBoYXMgbm90IGVub3VnaCBsaW5lcywgbWFyayByZW1haW5pbmcgbGluZXMgaW4gb2xkU3RhdGUgYXMgZGVsZXRlZFxuICAgICAgICAgICAgICAgICAgICBkZWxldGlvbnMgKz0gMVxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLnB1c2ggY2hhbmdlOiAnZGVsZXRlZCcgb2xkSW5kZXg6IG9pLCBkb0luZGV4OiBvaStkZFxuICAgICAgICAgICAgICAgICAgICBvaSArPSAxXG4gICAgICAgICAgICAgICAgICAgIGRkIC09IDFcblxuICAgICAgICAgICAgICAgIGVsc2UgaWYgb2wgPT0gbmwgIyBzYW1lIGxpbmVzIGluIG9sZCBhbmQgbmV3XG4gICAgICAgICAgICAgICAgICAgIG9pICs9IDFcbiAgICAgICAgICAgICAgICAgICAgb2wgPSBvbGRMaW5lc1tvaV1cbiAgICAgICAgICAgICAgICAgICAgbmkgKz0gMVxuICAgICAgICAgICAgICAgICAgICBubCA9IG5ld0xpbmVzW25pXVxuXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRzID0gbmV3TGluZXMuc2xpY2UobmkpLmZpbmRJbmRleCAodikgLT4gdj09b2wgIyBpbnNlcnRpb25cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlcyA9IG9sZExpbmVzLnNsaWNlKG9pKS5maW5kSW5kZXggKHYpIC0+IHY9PW5sICMgZGVsZXRpb25cblxuICAgICAgICAgICAgICAgICAgICBpZiBpbnNlcnRzID4gMCBhbmQgKGRlbGV0ZXMgPD0gMCBvciBpbnNlcnRzIDwgZGVsZXRlcylcblxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgaW5zZXJ0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaCBjaGFuZ2U6ICdpbnNlcnRlZCcgbmV3SW5kZXg6IG5pLCBkb0luZGV4OiBvaStkZCwgYWZ0ZXI6IG5sLnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaSArPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQgKz0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydHMgLT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydGlvbnMgKz0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgbmwgPSBuZXdMaW5lc1tuaV1cblxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIGRlbGV0ZXMgPiAwIGFuZCAoaW5zZXJ0cyA8PSAwIG9yIGRlbGV0ZXMgPCBpbnNlcnRzKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSBkZWxldGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoIGNoYW5nZTogJ2RlbGV0ZWQnIG9sZEluZGV4OiBvaSwgZG9JbmRleDogb2krZGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvaSArPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQgLT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZXMgLT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0aW9ucyArPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICBvbCA9IG9sZExpbmVzW29pXVxuXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgIyBjaGFuZ2VcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoIGNoYW5nZTogJ2NoYW5nZWQnIG9sZEluZGV4OiBvaSwgbmV3SW5kZXg6IG5pLCBkb0luZGV4OiBvaStkZCwgYWZ0ZXI6IG5sLnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIG9pICs9IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sID0gb2xkTGluZXNbb2ldXG4gICAgICAgICAgICAgICAgICAgICAgICBuaSArPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICBubCA9IG5ld0xpbmVzW25pXVxuXG4gICAgICAgICAgICB3aGlsZSBuaSA8IG5ld0xpbmVzLmxlbmd0aCAjIG1hcmsgcmVtYWluZyBsaW5lcyBpbiBuZXdTdGF0ZSBhcyBpbnNlcnRlZFxuXG4gICAgICAgICAgICAgICAgaW5zZXJ0aW9ucyArPSAxXG4gICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoIGNoYW5nZTogJ2luc2VydGVkJyBuZXdJbmRleDogbmksIGRvSW5kZXg6IG5pLCBhZnRlcjogbmwudGV4dFxuICAgICAgICAgICAgICAgIG5pICs9IDFcbiAgICAgICAgICAgICAgICBubCA9IG5ld0xpbmVzW25pXVxuXG4gICAgICAgIGNoYW5nZXM6IGNoYW5nZXNcbiAgICAgICAgaW5zZXJ0czogaW5zZXJ0aW9uc1xuICAgICAgICBkZWxldGVzOiBkZWxldGlvbnNcbiAgICAgICAgY3Vyc29yczogb2xkU3RhdGUucy5jdXJzb3JzICAgICE9IG5ld1N0YXRlLnMuY3Vyc29yc1xuICAgICAgICBzZWxlY3RzOiBvbGRTdGF0ZS5zLnNlbGVjdGlvbnMgIT0gbmV3U3RhdGUucy5zZWxlY3Rpb25zXG5cbiAgICAjIDAwICAgICAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMFxuICAgICMgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAgIDAwMDAgIDAwMDAwMDBcbiAgICAjIDAwMCAwIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMFxuXG4gICAgIyBsb29rcyBhdCBsYXN0IHR3byBhY3Rpb25zIGFuZCBtZXJnZXMgdGhlbVxuICAgICMgICAgICAgd2hlbiB0aGV5IGNvbnRhaW4gbm8gbGluZSBjaGFuZ2VzXG4gICAgIyAgICAgICB3aGVuIHRoZXkgY29udGFpbiBvbmx5IGNoYW5nZXMgb2YgdGhlIHNhbWUgc2V0IG9mIGxpbmVzXG5cbiAgICBtZXJnZTogLT5cblxuICAgICAgICB3aGlsZSBAaGlzdG9yeS5sZW5ndGggPiAxXG4gICAgICAgICAgICBiID0gQGhpc3RvcnlbQGhpc3RvcnkubGVuZ3RoLTJdXG4gICAgICAgICAgICBhID0gbGFzdCBAaGlzdG9yeVxuICAgICAgICAgICAgaWYgYS5zLmxpbmVzID09IGIucy5saW5lc1xuICAgICAgICAgICAgICAgIGlmIEBoaXN0b3J5Lmxlbmd0aCA+IDJcbiAgICAgICAgICAgICAgICAgICAgQGhpc3Rvcnkuc3BsaWNlIEBoaXN0b3J5Lmxlbmd0aC0yLCAxXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIGVsc2UgaWYgQGhpc3RvcnkubGVuZ3RoID4gMlxuICAgICAgICAgICAgICAgIGMgPSBAaGlzdG9yeVtAaGlzdG9yeS5sZW5ndGgtM11cbiAgICAgICAgICAgICAgICBpZiBhLm51bUxpbmVzKCkgPT0gYi5udW1MaW5lcygpID09IGMubnVtTGluZXMoKVxuICAgICAgICAgICAgICAgICAgICBmb3IgbGkgaW4gWzAuLi5hLm51bUxpbmVzKCldXG4gICAgICAgICAgICAgICAgICAgICAgICBsYSA9IGEucy5saW5lc1tsaV1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxiID0gYi5zLmxpbmVzW2xpXVxuICAgICAgICAgICAgICAgICAgICAgICAgbGMgPSBjLnMubGluZXNbbGldXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBsYSA9PSBsYiBhbmQgbGMgIT0gbGIgb3IgbGEgIT0gbGIgYW5kIGxjID09IGxiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIEBoaXN0b3J5LnNwbGljZSBAaGlzdG9yeS5sZW5ndGgtMiwgMVxuICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuXG4gICAgICAgICAgICBlbHNlIHJldHVyblxuXG4gICAgIyAgMDAwMDAwMCAgMDAwICAgICAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwMCAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwIDAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwXG4gICAgIyAgMDAwMDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG5cbiAgICBjbGVhbkN1cnNvcnM6IChjcykgLT5cblxuICAgICAgICBmb3IgcCBpbiBjc1xuICAgICAgICAgICAgcFswXSA9IE1hdGgubWF4IHBbMF0sIDBcbiAgICAgICAgICAgIHBbMV0gPSBjbGFtcCAwLCBAc3RhdGUubnVtTGluZXMoKS0xLCBwWzFdXG5cbiAgICAgICAgc29ydFBvc2l0aW9ucyBjc1xuXG4gICAgICAgIGlmIGNzLmxlbmd0aCA+IDFcbiAgICAgICAgICAgIGZvciBjaSBpbiBbY3MubGVuZ3RoLTEuLi4wXVxuICAgICAgICAgICAgICAgIGMgPSBjc1tjaV1cbiAgICAgICAgICAgICAgICBwID0gY3NbY2ktMV1cbiAgICAgICAgICAgICAgICBpZiBjWzFdID09IHBbMV0gYW5kIGNbMF0gPT0gcFswXVxuICAgICAgICAgICAgICAgICAgICBjcy5zcGxpY2UgY2ksIDFcbiAgICAgICAgY3NcblxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwXG4gICAgIyAwMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMFxuICAgICMgICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMFxuICAgICMgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwXG5cbiAgICB0ZXh0OiAgICAgICAgICAgIC0+IEBzdGF0ZS50ZXh0KClcbiAgICBsaW5lOiAgICAgICAgKGkpIC0+IEBzdGF0ZS5saW5lIGlcbiAgICBjdXJzb3I6ICAgICAgKGkpIC0+IEBzdGF0ZS5jdXJzb3IgaVxuICAgIGhpZ2hsaWdodDogICAoaSkgLT4gQHN0YXRlLmhpZ2hsaWdodCBpXG4gICAgc2VsZWN0aW9uOiAgIChpKSAtPiBAc3RhdGUuc2VsZWN0aW9uIGlcblxuICAgIGxpbmVzOiAgICAgICAgICAgLT4gQHN0YXRlLmxpbmVzKClcbiAgICBjdXJzb3JzOiAgICAgICAgIC0+IEBzdGF0ZS5jdXJzb3JzKClcbiAgICBoaWdobGlnaHRzOiAgICAgIC0+IEBzdGF0ZS5oaWdobGlnaHRzKClcbiAgICBzZWxlY3Rpb25zOiAgICAgIC0+IEBzdGF0ZS5zZWxlY3Rpb25zKClcblxuICAgIG51bUxpbmVzOiAgICAgICAgLT4gQHN0YXRlLm51bUxpbmVzKClcbiAgICBudW1DdXJzb3JzOiAgICAgIC0+IEBzdGF0ZS5udW1DdXJzb3JzKClcbiAgICBudW1TZWxlY3Rpb25zOiAgIC0+IEBzdGF0ZS5udW1TZWxlY3Rpb25zKClcbiAgICBudW1IaWdobGlnaHRzOiAgIC0+IEBzdGF0ZS5udW1IaWdobGlnaHRzKClcblxuICAgIHRleHRJblJhbmdlOiAocikgLT4gQHN0YXRlLmxpbmUoclswXSk/LnNsaWNlIHJbMV1bMF0sIHJbMV1bMV1cbiAgICBtYWluQ3Vyc29yOiAgICAgIC0+IEBzdGF0ZS5tYWluQ3Vyc29yKClcbiAgICByYW5nZUZvckxpbmVBdEluZGV4OiAoaSkgLT4gW2ksIFswLCBAbGluZShpKS5sZW5ndGhdXVxuXG5tb2R1bGUuZXhwb3J0cyA9IERvXG4iXX0=
//# sourceURL=../../coffee/editor/do.coffee