// koffee 1.4.0

/*
0000000    00000000    0000000    0000000  000   000  00000000  000000000   0000000
000   000  000   000  000   000  000       000  000   000          000     000     
0000000    0000000    000000000  000       0000000    0000000      000     0000000 
000   000  000   000  000   000  000       000  000   000          000          000
0000000    000   000  000   000   0000000  000   000  00000000     000     0000000
 */
var Brackets, _, matchr, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), matchr = ref.matchr, _ = ref._;

Brackets = (function() {
    function Brackets(editor) {
        this.editor = editor;
        this.onCursor = bind(this.onCursor, this);
        this.setupConfig = bind(this.setupConfig, this);
        this.editor.on('cursor', this.onCursor);
        this.editor.on('fileTypeChanged', this.setupConfig);
        this.setupConfig();
    }

    Brackets.prototype.setupConfig = function() {
        this.open = this.editor.bracketCharacters.open;
        return this.config = this.editor.bracketCharacters.regexps;
    };

    Brackets.prototype.onCursor = function() {
        var after, before, cp, h, j, len, ref1, ref2;
        if (this.editor.numHighlights()) {
            ref1 = this.editor.highlights();
            for (j = 0, len = ref1.length; j < len; j++) {
                h = ref1[j];
                if (h[2] == null) {
                    return;
                }
            }
        }
        cp = this.editor.cursorPos();
        ref2 = this.beforeAfterForPos(cp), before = ref2[0], after = ref2[1];
        if (after.length || before.length) {
            if (after.length && _.first(after).start === cp[0] && _.first(after).value === 'open') {
                cp[0] += 1;
            }
            if (before.length && _.last(before).start === cp[0] - 1 && _.last(before).value === 'close') {
                cp[0] -= 1;
            }
        }
        if (this.highlightInside(cp)) {
            return;
        }
        this.clear();
        return this.editor.renderHighlights();
    };

    Brackets.prototype.highlightInside = function(pos) {
        var after, before, cnt, firstClose, lastOpen, next, pp, prev, ref1, ref2, stack;
        stack = [];
        pp = pos;
        cnt = 0;
        while (pp[1] >= 0) {
            ref1 = this.beforeAfterForPos(pp), before = ref1[0], after = ref1[1];
            while (before.length) {
                prev = before.pop();
                if (prev.value === 'open') {
                    if (stack.length) {
                        if (this.open[prev.match] === _.last(stack).match) {
                            stack.pop();
                            continue;
                        } else {
                            return;
                        }
                    }
                    lastOpen = prev;
                    break;
                } else {
                    stack.push(prev);
                }
            }
            if (lastOpen != null) {
                break;
            }
            if (pp[1] < 1) {
                return;
            }
            if (cnt++ > 1000) {
                return;
            }
            pp = [this.editor.line(pp[1] - 1).length, pp[1] - 1];
        }
        if (lastOpen == null) {
            return;
        }
        stack = [];
        pp = pos;
        while (pp[1] <= this.editor.numLines()) {
            ref2 = this.beforeAfterForPos(pp), before = ref2[0], after = ref2[1];
            while (after.length) {
                next = after.shift();
                if (next.value === 'close') {
                    if (stack.length) {
                        if (this.open[_.last(stack).match] === next.match) {
                            stack.pop();
                            continue;
                        } else {
                            return;
                        }
                    }
                    firstClose = next;
                    break;
                } else {
                    stack.push(next);
                }
            }
            if (firstClose != null) {
                break;
            }
            if (pp[1] >= this.editor.numLines() - 1) {
                return;
            }
            if (cnt++ > 1000) {
                return;
            }
            pp = [0, pp[1] + 1];
        }
        if (firstClose == null) {
            return;
        }
        if (this.open[lastOpen.match] === firstClose.match) {
            this.highlight(lastOpen, firstClose);
            return true;
        }
    };

    Brackets.prototype.beforeAfterForPos = function(pos) {
        var after, before, cp, firstAfterIndex, fst, i, j, k, len, li, line, lst, r, ref1, rngs;
        cp = pos[0], li = pos[1];
        line = this.editor.line(li);
        rngs = matchr.ranges(this.config, line);
        i = rngs.length - 1;
        while (i >= 0) {
            if (rngs[i].start > 0 && line[rngs[i].start - 1] === '\\') {
                rngs.splice(i, 1);
            }
            i -= 1;
        }
        i = rngs.length - 1;
        while (i > 0) {
            if (rngs[i - 1].value === 'open' && rngs[i].value === 'close' && this.open[rngs[i - 1].match] === rngs[i].match && rngs[i - 1].start === rngs[i].start - 1) {
                rngs.splice(i - 1, 2);
                i -= 1;
            }
            i -= 1;
        }
        if (rngs.length) {
            for (j = 0, len = rngs.length; j < len; j++) {
                r = rngs[j];
                r.line = li;
            }
            lst = _.last(rngs);
            fst = _.first(rngs);
            for (firstAfterIndex = k = 0, ref1 = rngs.length; 0 <= ref1 ? k < ref1 : k > ref1; firstAfterIndex = 0 <= ref1 ? ++k : --k) {
                if (rngs[firstAfterIndex].start >= cp) {
                    break;
                }
            }
            before = rngs.slice(0, firstAfterIndex);
            after = rngs.slice(firstAfterIndex);
            return [before, after];
        }
        return [[], []];
    };

    Brackets.prototype.highlight = function(opn, cls) {
        this.clear();
        opn.clss = 'bracketmatch';
        cls.clss = 'bracketmatch';
        this.editor.addHighlight([opn.line, [opn.start, opn.start + opn.match.length], opn]);
        this.editor.addHighlight([cls.line, [cls.start, cls.start + cls.match.length], cls]);
        return this.editor.renderHighlights();
    };

    Brackets.prototype.clear = function() {
        return this.editor.setHighlights(this.editor.highlights().filter(function(h) {
            var ref1;
            return ((ref1 = h[2]) != null ? ref1.clss : void 0) !== 'bracketmatch';
        }));
    };

    return Brackets;

})();

module.exports = Brackets;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJhY2tldHMuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBLHdCQUFBO0lBQUE7O0FBUUEsTUFBZ0IsT0FBQSxDQUFRLEtBQVIsQ0FBaEIsRUFBRSxtQkFBRixFQUFVOztBQUVKO0lBRUMsa0JBQUMsTUFBRDtRQUFDLElBQUMsQ0FBQSxTQUFEOzs7UUFFQSxJQUFDLENBQUEsTUFBTSxDQUFDLEVBQVIsQ0FBVyxRQUFYLEVBQTZCLElBQUMsQ0FBQSxRQUE5QjtRQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsRUFBUixDQUFXLGlCQUFYLEVBQTZCLElBQUMsQ0FBQSxXQUE5QjtRQUVBLElBQUMsQ0FBQSxXQUFELENBQUE7SUFMRDs7dUJBT0gsV0FBQSxHQUFhLFNBQUE7UUFFVCxJQUFDLENBQUEsSUFBRCxHQUFVLElBQUMsQ0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUM7ZUFDcEMsSUFBQyxDQUFBLE1BQUQsR0FBVSxJQUFDLENBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0lBSDNCOzt1QkFXYixRQUFBLEdBQVUsU0FBQTtBQUVOLFlBQUE7UUFBQSxJQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsYUFBUixDQUFBLENBQUg7QUFDSTtBQUFBLGlCQUFBLHNDQUFBOztnQkFDSSxJQUFjLFlBQWQ7QUFBQSwyQkFBQTs7QUFESixhQURKOztRQUlBLEVBQUEsR0FBSyxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQVIsQ0FBQTtRQUNMLE9BQWtCLElBQUMsQ0FBQSxpQkFBRCxDQUFtQixFQUFuQixDQUFsQixFQUFDLGdCQUFELEVBQVM7UUFFVCxJQUFHLEtBQUssQ0FBQyxNQUFOLElBQWdCLE1BQU0sQ0FBQyxNQUExQjtZQUNJLElBQUcsS0FBSyxDQUFDLE1BQU4sSUFBaUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxLQUFSLENBQWMsQ0FBQyxLQUFmLEtBQXdCLEVBQUcsQ0FBQSxDQUFBLENB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SixHQUFXO1FBQ1gsSUFBQyxDQUFBLE1BQU0sQ0FBQyxZQUFSLENBQXFCLENBQUMsR0FBRyxDQUFDLElBQUwsRUFBVyxDQUFDLEdBQUcsQ0FBQyxLQUFMLEVBQVksR0FBRyxDQUFDLEtBQUosR0FBVSxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQWhDLENBQVgsRUFBb0QsR0FBcEQsQ0FBckI7UUFDQSxJQUFDLENBQUEsTUFBTSxDQUFDLFlBQVIsQ0FBcUIsQ0FBQyxHQUFHLENBQUMsSUFBTCxFQUFXLENBQUMsR0FBRyxDQUFDLEtBQUwsRUFBWSxHQUFHLENBQUMsS0FBSixHQUFVLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBaEMsQ0FBWCxFQUFvRCxHQUFwRCxDQUFyQjtlQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsZ0JBQVIsQ0FBQTtJQVBPOzt1QkFlWCxLQUFBLEdBQU8sU0FBQTtlQUVILElBQUMsQ0FBQSxNQUFNLENBQUMsYUFBUixDQUFzQixJQUFDLENBQUEsTUFBTSxDQUFDLFVBQVIsQ0FBQSxDQUFvQixDQUFDLE1BQXJCLENBQTRCLFNBQUMsQ0FBRDtBQUFPLGdCQUFBO2dEQUFJLENBQUUsY0FBTixLQUFjO1FBQXJCLENBQTVCLENBQXRCO0lBRkc7Ozs7OztBQUlYLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwICAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgICBcbjAwMDAwMDAgICAgMDAwMDAwMCAgICAwMDAwMDAwMDAgIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMDAwMDAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAwMDAgICAwMDAgICAgICAgICAgMDAwICAgICAgICAgIDAwMFxuMDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMCBcbiMjI1xuXG57IG1hdGNociwgXyB9ID0gcmVxdWlyZSAna3hrJ1xuXG5jbGFzcyBCcmFja2V0c1xuICAgIFxuICAgIEA6IChAZWRpdG9yKSAtPlxuICAgICAgICBcbiAgICAgICAgQGVkaXRvci5vbiAnY3Vyc29yJyAgICAgICAgICBAb25DdXJzb3JcbiAgICAgICAgQGVkaXRvci5vbiAnZmlsZVR5cGVDaGFuZ2VkJyBAc2V0dXBDb25maWdcbiAgICAgICAgXG4gICAgICAgIEBzZXR1cENvbmZpZygpXG4gICAgICAgICAgICBcbiAgICBzZXR1cENvbmZpZzogPT4gXG5cbiAgICAgICAgQG9wZW4gICA9IEBlZGl0b3IuYnJhY2tldENoYXJhY3RlcnMub3BlblxuICAgICAgICBAY29uZmlnID0gQGVkaXRvci5icmFja2V0Q2hhcmFjdGVycy5yZWdleHBzXG4gICAgICAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAgICAwMDAgICAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAgIDAwMCAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgIDAwMDAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwICBcbiAgICBcbiAgICBvbkN1cnNvcjogPT4gXG5cbiAgICAgICAgaWYgQGVkaXRvci5udW1IaWdobGlnaHRzKCkgIyBkb24ndCBoaWdobGlnaHQgYnJhY2tldHMgd2hlbiBvdGhlciBoaWdobGlnaHRzIGV4aXN0XG4gICAgICAgICAgICBmb3IgaCBpbiBAZWRpdG9yLmhpZ2hsaWdodHMoKVxuICAgICAgICAgICAgICAgIHJldHVybiBpZiBub3QgaFsyXT9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgY3AgPSBAZWRpdG9yLmN1cnNvclBvcygpXG4gICAgICAgIFtiZWZvcmUsIGFmdGVyXSA9IEBiZWZvcmVBZnRlckZvclBvcyBjcFxuXG4gICAgICAgIGlmIGFmdGVyLmxlbmd0aCBvciBiZWZvcmUubGVuZ3RoXG4gICAgICAgICAgICBpZiBhZnRlci5sZW5ndGggYW5kIF8uZmlyc3QoYWZ0ZXIpLnN0YXJ0ID09IGNwWzBdIGFuZCBfLmZpcnN0KGFmdGVyKS52YWx1ZSA9PSAnb3BlbicgdGhlbiBjcFswXSArPSAxXG4gICAgICAgICAgICBpZiBiZWZvcmUubGVuZ3RoIGFuZCBfLmxhc3QoYmVmb3JlKS5zdGFydCA9PSBjcFswXS0xIGFuZCBfLmxhc3QoYmVmb3JlKS52YWx1ZSA9PSAnY2xvc2UnIHRoZW4gY3BbMF0gLT0gMVxuXG4gICAgICAgIGlmIEBoaWdobGlnaHRJbnNpZGUgY3BcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIEBjbGVhcigpXG4gICAgICAgIEBlZGl0b3IucmVuZGVySGlnaGxpZ2h0cygpXG5cbiAgICAjIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgMDAwIDAgMDAwICAwMDAwMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgMDAwICAwMDAwICAgICAgIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICBcbiAgICBcbiAgICBoaWdobGlnaHRJbnNpZGU6IChwb3MpIC0+XG4gICAgICAgIFxuICAgICAgICBzdGFjayA9IFtdXG4gICAgICAgIHBwICAgID0gcG9zXG4gICAgICAgIGNudCAgID0gMFxuICAgICAgICB3aGlsZSBwcFsxXSA+PSAwICMgZmluZCBsYXN0IG9wZW4gYnJhY2tldCBiZWZvcmVcbiAgICAgICAgICAgIFtiZWZvcmUsIGFmdGVyXSA9IEBiZWZvcmVBZnRlckZvclBvcyBwcFxuICAgICAgICAgICAgd2hpbGUgYmVmb3JlLmxlbmd0aCBcbiAgICAgICAgICAgICAgICBwcmV2ID0gYmVmb3JlLnBvcCgpXG4gICAgICAgICAgICAgICAgaWYgcHJldi52YWx1ZSA9PSAnb3BlbidcbiAgICAgICAgICAgICAgICAgICAgaWYgc3RhY2subGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBAb3BlbltwcmV2Lm1hdGNoXSA9PSBfLmxhc3Qoc3RhY2spLm1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucG9wKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIyBzdGFjayBtaXNtYXRjaFxuICAgICAgICAgICAgICAgICAgICBsYXN0T3BlbiA9IHByZXZcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBlbHNlICMgaWYgcHJldiBpcyAnY2xvc2UnXG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2ggcHJldlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBicmVhayBpZiBsYXN0T3Blbj9cbiAgICAgICAgICAgIHJldHVybiBpZiBwcFsxXSA8IDFcbiAgICAgICAgICAgIHJldHVybiBpZiBjbnQrKyA+IDEwMDAgIyBtYXhpbXVtIG51bWJlciBvZiBsaW5lcyBleGNlZWRlZFxuICAgICAgICAgICAgcHAgPSBbQGVkaXRvci5saW5lKHBwWzFdLTEpLmxlbmd0aCwgcHBbMV0tMV1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgbGFzdE9wZW4/XG4gICAgICAgIFxuICAgICAgICBzdGFjayA9IFtdXG4gICAgICAgIHBwID0gcG9zXG4gICAgICAgIHdoaWxlIHBwWzFdIDw9IEBlZGl0b3IubnVtTGluZXMoKSAjIGZpbmQgZmlyc3QgY2xvc2UgYnJhY2tldCBhZnRlclxuICAgICAgICAgICAgW2JlZm9yZSwgYWZ0ZXJdID0gQGJlZm9yZUFmdGVyRm9yUG9zIHBwXG4gICAgICAgICAgICB3aGlsZSBhZnRlci5sZW5ndGhcbiAgICAgICAgICAgICAgICBuZXh0ID0gYWZ0ZXIuc2hpZnQoKVxuICAgICAgICAgICAgICAgIGlmIG5leHQudmFsdWUgPT0gJ2Nsb3NlJ1xuICAgICAgICAgICAgICAgICAgICBpZiBzdGFjay5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIEBvcGVuW18ubGFzdChzdGFjaykubWF0Y2hdID09IG5leHQubWF0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wb3AoKSAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAjIHN0YWNrIG1pc21hdGNoXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0Q2xvc2UgPSBuZXh0XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgZWxzZSAjIGlmIG5leHQgaXMgJ29wZW4nXG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2ggbmV4dFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgYnJlYWsgaWYgZmlyc3RDbG9zZT9cbiAgICAgICAgICAgIHJldHVybiBpZiBwcFsxXSA+PSBAZWRpdG9yLm51bUxpbmVzKCktMVxuICAgICAgICAgICAgcmV0dXJuIGlmIGNudCsrID4gMTAwMCAjIG1heGltdW0gbnVtYmVyIG9mIGxpbmVzIGV4Y2VlZGVkXG4gICAgICAgICAgICBwcCA9IFswLCBwcFsxXSsxXVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlmIG5vdCBmaXJzdENsb3NlP1xuICAgICAgICBcbiAgICAgICAgaWYgQG9wZW5bbGFzdE9wZW4ubWF0Y2hdID09IGZpcnN0Q2xvc2UubWF0Y2hcbiAgICAgICAgICAgIEBoaWdobGlnaHQgbGFzdE9wZW4sIGZpcnN0Q2xvc2VcbiAgICAgICAgICAgIHRydWVcbiAgICBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAwMDAgICAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAgICAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgIFxuICAgIGJlZm9yZUFmdGVyRm9yUG9zOiAocG9zKSAtPlxuICAgICAgICBcbiAgICAgICAgW2NwLCBsaV0gPSBwb3NcbiAgICAgICAgbGluZSA9IEBlZGl0b3IubGluZShsaSlcbiAgICAgICAgcm5ncyA9IG1hdGNoci5yYW5nZXMgQGNvbmZpZywgbGluZVxuICAgICAgICBcbiAgICAgICAgaSA9IHJuZ3MubGVuZ3RoLTFcbiAgICAgICAgd2hpbGUgaSA+PSAwICMgcmVtb3ZlIGVzY2FwZWRcbiAgICAgICAgICAgIGlmIHJuZ3NbaV0uc3RhcnQgPiAwIGFuZCBsaW5lW3JuZ3NbaV0uc3RhcnQtMV0gPT0gJ1xcXFwnXG4gICAgICAgICAgICAgICAgcm5ncy5zcGxpY2UgaSwgMVxuICAgICAgICAgICAgaSAtPSAxXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBpID0gcm5ncy5sZW5ndGgtMSBcbiAgICAgICAgd2hpbGUgaSA+IDAgIyByZW1vdmUgdHJpdmlhbDogKCksIHt9LCBbXVxuICAgICAgICAgICAgaWYgcm5nc1tpLTFdLnZhbHVlID09ICdvcGVuJyBhbmQgcm5nc1tpXS52YWx1ZSA9PSAnY2xvc2UnIGFuZFxuICAgICAgICAgICAgICAgIEBvcGVuW3JuZ3NbaS0xXS5tYXRjaF0gPT0gcm5nc1tpXS5tYXRjaCBhbmQgXG4gICAgICAgICAgICAgICAgICAgIHJuZ3NbaS0xXS5zdGFydCA9PSBybmdzW2ldLnN0YXJ0IC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgcm5ncy5zcGxpY2UgaS0xLCAyXG4gICAgICAgICAgICAgICAgICAgICAgICBpIC09IDFcbiAgICAgICAgICAgIGkgLT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBpZiBybmdzLmxlbmd0aFxuICAgICAgICAgICAgci5saW5lID0gbGkgZm9yIHIgaW4gcm5nc1xuICAgICAgICAgICAgbHN0ID0gXy5sYXN0IHJuZ3NcbiAgICAgICAgICAgIGZzdCA9IF8uZmlyc3Qgcm5nc1xuICAgICAgICAgICAgZm9yIGZpcnN0QWZ0ZXJJbmRleCBpbiBbMC4uLnJuZ3MubGVuZ3RoXVxuICAgICAgICAgICAgICAgIGJyZWFrIGlmIHJuZ3NbZmlyc3RBZnRlckluZGV4XS5zdGFydCA+PSBjcFxuICAgICAgICAgICAgYmVmb3JlID0gcm5ncy5zbGljZSAwLCBmaXJzdEFmdGVySW5kZXhcbiAgICAgICAgICAgIGFmdGVyICA9IHJuZ3Muc2xpY2UgZmlyc3RBZnRlckluZGV4XG4gICAgICAgICAgICByZXR1cm4gW2JlZm9yZSwgYWZ0ZXJdXG4gICAgICAgIFtbXSxbXV1cbiAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAwMDAgICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbiAgICAjIDAwMDAwMDAwMCAgMDAwICAwMDAgIDAwMDAgIDAwMDAwMDAwMCAgMDAwICAgICAgMDAwICAwMDAgIDAwMDAgIDAwMDAwMDAwMCAgICAgMDAwICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbiAgICBcbiAgICBoaWdobGlnaHQ6IChvcG4sIGNscykgLT5cbiAgICAgICAgXG4gICAgICAgIEBjbGVhcigpXG4gICAgICAgIG9wbi5jbHNzID0gJ2JyYWNrZXRtYXRjaCdcbiAgICAgICAgY2xzLmNsc3MgPSAnYnJhY2tldG1hdGNoJ1xuICAgICAgICBAZWRpdG9yLmFkZEhpZ2hsaWdodCBbb3BuLmxpbmUsIFtvcG4uc3RhcnQsIG9wbi5zdGFydCtvcG4ubWF0Y2gubGVuZ3RoXSwgb3BuXVxuICAgICAgICBAZWRpdG9yLmFkZEhpZ2hsaWdodCBbY2xzLmxpbmUsIFtjbHMuc3RhcnQsIGNscy5zdGFydCtjbHMubWF0Y2gubGVuZ3RoXSwgY2xzXVxuICAgICAgICBAZWRpdG9yLnJlbmRlckhpZ2hsaWdodHMoKVxuXG4gICAgIyAgMDAwMDAwMCAgMDAwICAgICAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjICAwMDAwMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgIFxuICAgIGNsZWFyOiAtPlxuICAgICAgICBcbiAgICAgICAgQGVkaXRvci5zZXRIaWdobGlnaHRzIEBlZGl0b3IuaGlnaGxpZ2h0cygpLmZpbHRlciAoaCkgLT4gaFsyXT8uY2xzcyAhPSAnYnJhY2tldG1hdGNoJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJyYWNrZXRzXG4iXX0=
//# sourceURL=../../coffee/editor/brackets.coffee