// koffee 1.4.0

/*
 0000000  000   000  000   000  000000000   0000000   000   000
000        000 000   0000  000     000     000   000   000 000
0000000     00000    000 0 000     000     000000000    00000
     000     000     000  0000     000     000   000   000 000
0000000      000     000   000     000     000   000  000   000
 */
var Syntax, _, chroma, elem, empty, kerror, klor, kstr, last, matchr, ref;

ref = require('kxk'), matchr = ref.matchr, empty = ref.empty, kstr = ref.kstr, klor = ref.klor, elem = ref.elem, last = ref.last, kerror = ref.kerror, _ = ref._;

chroma = require('chroma-js');

Syntax = (function() {
    function Syntax(name, getLine, getAnsi) {
        this.name = name;
        this.getLine = getLine;
        this.getAnsi = getAnsi;
        this.diss = [];
        this.colors = {};
        this.ansi = new kstr.ansi;
    }

    Syntax.prototype.newDiss = function(li) {
        var ansi, diss, text;
        text = this.getLine(li);
        if (text == null) {
            return kerror("dissForLine -- no line at index " + li + "?");
        }
        if (empty(text)) {
            return [
                {
                    start: 0,
                    length: 0,
                    match: ''
                }
            ];
        }
        if (ansi = this.getAnsi(li)) {
            diss = this.ansi.dissect(ansi)[1];
        } else {
            diss = klor.dissect([text], 'sh')[0];
        }
        return diss;
    };

    Syntax.prototype.getDiss = function(li) {
        if (this.diss[li] == null) {
            this.diss[li] = this.newDiss(li);
        }
        return this.diss[li];
    };

    Syntax.prototype.setDiss = function(li, dss) {
        this.diss[li] = dss;
        return dss;
    };

    Syntax.prototype.fillDiss = function(bot) {
        var i, li, ref1, results;
        results = [];
        for (li = i = 0, ref1 = bot; 0 <= ref1 ? i <= ref1 : i >= ref1; li = 0 <= ref1 ? ++i : --i) {
            results.push(this.getDiss(li));
        }
        return results;
    };

    Syntax.prototype.setLines = function(lines) {};

    Syntax.prototype.changed = function(changeInfo) {
        var ch, change, di, i, len, li, ref1, ref2, results;
        ref1 = changeInfo.changes;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
            change = ref1[i];
            ref2 = [change.doIndex, change.newIndex, change.change], di = ref2[0], li = ref2[1], ch = ref2[2];
            switch (ch) {
                case 'changed':
                    results.push(this.diss[di] = this.newDiss(di));
                    break;
                case 'deleted':
                    results.push(this.diss.splice(di, 1));
                    break;
                case 'inserted':
                    results.push(this.diss.splice(di, 0, this.newDiss(di)));
                    break;
                default:
                    results.push(void 0);
            }
        }
        return results;
    };

    Syntax.prototype.setFileType = function(name) {
        this.name = name;
    };

    Syntax.prototype.clear = function() {
        return this.diss = [];
    };

    Syntax.prototype.colorForClassnames = function(clss) {
        var color, computedStyle, div, opacity;
        if (this.colors[clss] == null) {
            div = elem({
                "class": clss
            });
            document.body.appendChild(div);
            computedStyle = window.getComputedStyle(div);
            color = computedStyle.color;
            opacity = computedStyle.opacity;
            if (opacity !== '1') {
                color = 'rgba(' + color.slice(4, color.length - 2) + ', ' + opacity + ')';
            }
            this.colors[clss] = color;
            div.remove();
        }
        return this.colors[clss];
    };

    Syntax.prototype.colorForStyle = function(styl) {
        var bgcol, div;
        if (this.colors[styl] == null) {
            div = elem('div');
            div.style = styl;
            document.body.appendChild(div);
            bgcol = kstr(window.getComputedStyle(div).backgroundColor);
            if (styl.startsWith('back')) {
                this.colors[styl] = bgcol;
            } else {
                this.colors[styl] = kstr(window.getComputedStyle(div).color);
                if (bgcol !== 'rgba(0, 0, 0, 0)') {
                    this.colors[styl] = chroma.mix(bgcol, this.colors[styl], 0.5, 'hsl').css();
                }
            }
            div.remove();
        }
        return this.colors[styl];
    };

    Syntax.prototype.schemeChanged = function() {
        return this.colors = {};
    };


    /*
     0000000  000000000   0000000   000000000  000   0000000
    000          000     000   000     000     000  000
    0000000      000     000000000     000     000  000
         000     000     000   000     000     000  000
    0000000      000     000   000     000     000   0000000
     */

    Syntax.matchrConfigs = {};

    Syntax.syntaxNames = [];

    Syntax.spanForTextAndSyntax = function(text, n) {
        var clrzd, clss, d, di, diss, i, j, l, ref1, ref2, ref3, sp, spc, style;
        l = "";
        diss = this.dissForTextAndSyntax(text, n);
        if (diss != null ? diss.length : void 0) {
            last = 0;
            for (di = i = 0, ref1 = diss.length; 0 <= ref1 ? i < ref1 : i > ref1; di = 0 <= ref1 ? ++i : --i) {
                d = diss[di];
                style = (d.styl != null) && d.styl.length && (" style=\"" + d.styl + "\"") || '';
                spc = '';
                for (sp = j = ref2 = last, ref3 = d.start; ref2 <= ref3 ? j < ref3 : j > ref3; sp = ref2 <= ref3 ? ++j : --j) {
                    spc += '&nbsp;';
                }
                last = d.start + d.match.length;
                clss = (d.clss != null) && d.clss.length && (" class=\"" + d.clss + "\"") || '';
                clrzd = "<span" + style + clss + ">" + spc + (kstr.encode(d.match)) + "</span>";
                l += clrzd;
            }
        }
        return l;
    };

    Syntax.rangesForTextAndSyntax = function(line, n) {
        return matchr.ranges(Syntax.matchrConfigs[n], line);
    };

    Syntax.dissForTextAndSyntax = function(text, n) {
        return klor.ranges(text, n);
    };

    Syntax.lineForDiss = function(dss) {
        var d, i, l, len;
        l = "";
        for (i = 0, len = dss.length; i < len; i++) {
            d = dss[i];
            l = _.padEnd(l, d.start);
            l += d.match;
        }
        return l;
    };

    Syntax.init = function() {
        return this.syntaxNames = this.syntaxNames.concat(klor.exts);
    };

    return Syntax;

})();

Syntax.init();

module.exports = Syntax;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/editor/syntax.coffee