// koffee 1.3.0

/*
 0000000   0000000  00000000    0000000   000      000      0000000     0000000   00000000
000       000       000   000  000   000  000      000      000   000  000   000  000   000
0000000   000       0000000    000   000  000      000      0000000    000000000  0000000
     000  000       000   000  000   000  000      000      000   000  000   000  000   000
0000000    0000000  000   000   0000000   0000000  0000000  0000000    000   000  000   000
 */
var Scrollbar, clamp, drag, elem, post, ref, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), post = ref.post, stopEvent = ref.stopEvent, elem = ref.elem, clamp = ref.clamp, drag = ref.drag;

Scrollbar = (function() {
    function Scrollbar(scroll) {
        this.scroll = scroll;
        this.update = bind(this.update, this);
        this.clear = bind(this.clear, this);
        this.wheelScroll = bind(this.wheelScroll, this);
        this.onWheel = bind(this.onWheel, this);
        this.onDrag = bind(this.onDrag, this);
        this.onStart = bind(this.onStart, this);
        post.on('scroll', this.update);
        post.on('clearLines', this.clear);
        this.view = this.scroll.view.parentNode;
        this.elem = elem({
            "class": 'scrollbar left'
        });
        this.view.appendChild(this.elem);
        this.handle = elem({
            "class": 'scrollhandle left'
        });
        this.elem.appendChild(this.handle);
        this.scrollX = 0;
        this.scrollY = 0;
        this.drag = new drag({
            target: this.elem,
            onStart: this.onStart,
            onMove: this.onDrag,
            cursor: 'ns-resize'
        });
    }

    Scrollbar.prototype.onStart = function(drag, event) {
        var br, ln, ly, sy;
        br = this.elem.getBoundingClientRect();
        sy = clamp(0, this.scroll.viewHeight, event.clientY - br.top);
        ln = parseInt(this.scroll.numLines * sy / this.scroll.viewHeight);
        ly = (ln - this.scroll.viewLines / 2) * this.scroll.lineHeight;
        return this.scroll.to(ly);
    };

    Scrollbar.prototype.onDrag = function(drag) {
        var delta;
        delta = (drag.delta.y / (this.scroll.viewLines * this.scroll.lineHeight)) * this.scroll.fullHeight;
        return this.scroll.by(delta);
    };

    Scrollbar.prototype.onWheel = function(event) {
        var scrollFactor;
        scrollFactor = function() {
            var f;
            f = 1;
            f *= 1 + 1 * event.shiftKey;
            f *= 1 + 3 * event.ctrlKey;
            return f *= 1 + 7 * event.altKey;
        };
        if (Math.abs(event.deltaX) >= 2 * Math.abs(event.deltaY) || Math.abs(event.deltaY) === 0) {
            this.scrollX += event.deltaX;
        } else {
            this.scrollY += event.deltaY * scrollFactor();
        }
        if (this.scrollX || this.scrollY) {
            window.requestAnimationFrame(this.wheelScroll);
        }
        return stopEvent(event);
    };

    Scrollbar.prototype.wheelScroll = function() {
        this.scroll.by(this.scrollY, this.scrollX);
        return this.scrollX = this.scrollY = 0;
    };

    Scrollbar.prototype.clear = function() {
        this.handle.style.top = "0";
        this.handle.style.height = "0";
        return this.handle.style.width = "0";
    };

    Scrollbar.prototype.update = function() {
        var bh, cf, cs, fadeColor, longColor, scrollHeight, scrollTop, shortColor, vh;
        if (this.scroll.numLines * this.scroll.lineHeight < this.scroll.viewHeight) {
            return this.clear();
        } else {
            bh = this.scroll.numLines * this.scroll.lineHeight;
            vh = Math.min(this.scroll.viewLines * this.scroll.lineHeight, this.scroll.viewHeight);
            scrollTop = parseInt((this.scroll.scroll / bh) * vh);
            scrollHeight = parseInt(((this.scroll.viewLines * this.scroll.lineHeight) / bh) * vh);
            scrollHeight = Math.max(scrollHeight, parseInt(this.scroll.lineHeight / 4));
            scrollTop = Math.min(scrollTop, this.scroll.viewHeight - scrollHeight);
            scrollTop = Math.max(0, scrollTop);
            this.handle.style.top = scrollTop + "px";
            this.handle.style.height = scrollHeight + "px";
            this.handle.style.width = "2px";
            cf = 1 - clamp(0, 1, (scrollHeight - 10) / 200);
            longColor = [94, 94, 94];
            shortColor = [128, 128, 256];
            fadeColor = function(av, bv, f) {
                var fv, i, j;
                fv = [0, 0, 0];
                for (i = j = 0; j < 3; i = ++j) {
                    fv[i] = Math.round((1 - f) * av[i] + f * bv[i]);
                }
                return "rgb(" + fv[0] + ", " + fv[1] + ", " + fv[2] + ")";
            };
            cs = fadeColor(longColor, shortColor, cf);
            return this.handle.style.backgroundColor = cs;
        }
    };

    return Scrollbar;

})();

module.exports = Scrollbar;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/scrollbar.coffee