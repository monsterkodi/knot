
/*
000000000  00000000   0000000  000000000
   000     000       000          000   
   000     0000000   0000000      000   
   000     000            000     000   
   000     00000000  0000000      000
 */
var Buffer, Render, assert, ccc, chai, chr, defAttr, esc, expect, log, parse, prs, rndr;

log = require('../../kxk').log;

parse = require('./parse');

Buffer = require('./buffer');

Render = require('./render');

parse = require('./parse');

assert = require('assert');

chai = require('chai');

expect = chai.expect;

chai.should();

defAttr = (257 << 9) | 256;

rndr = function(line) {
  var buffer, html, i, len, ref;
  buffer = parse(line, new Buffer({
    rows: 100
  }));
  html = [];
  ref = buffer.lines;
  for (i = 0, len = ref.length; i < len; i++) {
    line = ref[i];
    html.push(Render.line(line, buffer));
  }
  return html;
};

describe('render', function() {
  return it('empty', function() {
    var html;
    html = rndr('hello world');
    expect(html[0]).to.eql('<span style="color:#f0f0f0;">hello world</span>');
    html = rndr('hello\nworld');
    expect(html[0]).to.eql('<span style="color:#f0f0f0;">hello</span>');
    expect(html[1]).to.eql('<span style="color:#f0f0f0;">world</span>');
    html = rndr('\r\nhello\r\n');
    log(html);
    expect(html[0]).to.eql('<span> </span>');
    return expect(html[1]).to.eql('<span style="color:#f0f0f0;">hello</span>');
  });
});

ccc = function(buf, line, col, char) {
  return expect(buf.lines[line][col][1]).to.eql(char);
};

chr = function(buf, index, value, char) {
  return expect(buf.lines[0][index]).to.eql([value, char]);
};

esc = function(data) {
  return data.replace(/\^\[/g, '\x1b');
};

prs = function(data) {
  return parse(esc(data), new Buffer());
};

describe('parse', function() {
  it('newline', function() {
    var buf;
    buf = prs("lineA\rlineB");
    ccc(buf, 0, 4, 'B');
    buf = prs("lineA\r\nlineB");
    ccc(buf, 0, 4, 'A');
    return ccc(buf, 1, 4, 'B');
  });
  return it('prompt', function() {
    var buf;
    buf = prs("hello");
    chr(buf, 0, 131840, 'h');
    chr(buf, 1, 131840, 'e');
    chr(buf, 2, 131840, 'l');
    chr(buf, 3, 131840, 'l');
    chr(buf, 4, 131840, 'o');
    buf = prs("^[[0;34;94m[^[[0;33;93m~^[[0;34;94m]^[[0m^[[0K");
    chr(buf, 0, 6400, '[');
    chr(buf, 1, 5888, '~');
    chr(buf, 2, 6400, ']');
    buf = prs("^[[?25l\r^[[0;34;94m[^[[0;33;93m~^[[0;34;94m]^[[0m^[[0K^[[?25h");
    chr(buf, 0, 6400, '[');
    chr(buf, 1, 5888, '~');
    return chr(buf, 2, 6400, ']');
  });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFRRSxNQUFRLE9BQUEsQ0FBUSxXQUFSOztBQUVWLEtBQUEsR0FBUyxPQUFBLENBQVEsU0FBUjs7QUFDVCxNQUFBLEdBQVMsT0FBQSxDQUFRLFVBQVI7O0FBQ1QsTUFBQSxHQUFTLE9BQUEsQ0FBUSxVQUFSOztBQUNULEtBQUEsR0FBUyxPQUFBLENBQVEsU0FBUjs7QUFDVCxNQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVI7O0FBQ1QsSUFBQSxHQUFTLE9BQUEsQ0FBUSxNQUFSOztBQUNULE1BQUEsR0FBUyxJQUFJLENBQUM7O0FBQ2QsSUFBSSxDQUFDLE1BQUwsQ0FBQTs7QUFFQSxPQUFBLEdBQVUsQ0FBQyxHQUFBLElBQU8sQ0FBUixDQUFBLEdBQWE7O0FBRXZCLElBQUEsR0FBTyxTQUFDLElBQUQ7QUFDSCxNQUFBO0VBQUEsTUFBQSxHQUFTLEtBQUEsQ0FBTSxJQUFOLEVBQVksSUFBSSxNQUFKLENBQVc7SUFBQSxJQUFBLEVBQUssR0FBTDtHQUFYLENBQVo7RUFDVCxJQUFBLEdBQU87QUFDUDtBQUFBLE9BQUEscUNBQUE7O0lBQ0ksSUFBSSxDQUFDLElBQUwsQ0FBVSxNQUFNLENBQUMsSUFBUCxDQUFZLElBQVosRUFBa0IsTUFBbEIsQ0FBVjtBQURKO1NBRUE7QUFMRzs7QUFPUCxRQUFBLENBQVMsUUFBVCxFQUFtQixTQUFBO1NBRWYsRUFBQSxDQUFHLE9BQUgsRUFBWSxTQUFBO0FBRVIsUUFBQTtJQUFBLElBQUEsR0FBTyxJQUFBLENBQUssYUFBTDtJQUNQLE1BQUEsQ0FBTyxJQUFLLENBQUEsQ0FBQSxDQUFaLENBQWUsQ0FBQyxFQUFFLENBQUMsR0FBbkIsQ0FBdUIsaURBQXZCO0lBRUEsSUFBQSxHQUFPLElBQUEsQ0FBSyxjQUFMO0lBQ1AsTUFBQSxDQUFPLElBQUssQ0FBQSxDQUFBLENBQVosQ0FBZSxD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bEI7V0FDQSxHQUFBLENBQUksR0FBSixFQUFTLENBQVQsRUFBWSxJQUFaLEVBQWtCLEdBQWxCO0VBakJTLENBQWI7QUFYYyxDQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwMFxuICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgIFxuICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgIFxuICAgMDAwICAgICAwMDAgICAgICAgICAgICAwMDAgICAgIDAwMCAgIFxuICAgMDAwICAgICAwMDAwMDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgIFxuIyMjXG5cbnsgbG9nIH0gPSByZXF1aXJlICcuLi8uLi9reGsnXG5cbnBhcnNlICA9IHJlcXVpcmUgJy4vcGFyc2UnXG5CdWZmZXIgPSByZXF1aXJlICcuL2J1ZmZlcidcblJlbmRlciA9IHJlcXVpcmUgJy4vcmVuZGVyJ1xucGFyc2UgID0gcmVxdWlyZSAnLi9wYXJzZSdcbmFzc2VydCA9IHJlcXVpcmUgJ2Fzc2VydCdcbmNoYWkgICA9IHJlcXVpcmUgJ2NoYWknXG5leHBlY3QgPSBjaGFpLmV4cGVjdFxuY2hhaS5zaG91bGQoKVxuXG5kZWZBdHRyID0gKDI1NyA8PCA5KSB8IDI1NlxuXG5ybmRyID0gKGxpbmUpIC0+IFxuICAgIGJ1ZmZlciA9IHBhcnNlIGxpbmUsIG5ldyBCdWZmZXIgcm93czoxMDBcbiAgICBodG1sID0gW11cbiAgICBmb3IgbGluZSBpbiBidWZmZXIubGluZXNcbiAgICAgICAgaHRtbC5wdXNoIFJlbmRlci5saW5lIGxpbmUsIGJ1ZmZlclxuICAgIGh0bWxcblxuZGVzY3JpYmUgJ3JlbmRlcicsIC0+XG4gICAgXG4gICAgaXQgJ2VtcHR5JywgLT5cbiAgICAgICAgXG4gICAgICAgIGh0bWwgPSBybmRyICdoZWxsbyB3b3JsZCdcbiAgICAgICAgZXhwZWN0KGh0bWxbMF0pLnRvLmVxbCAnPHNwYW4gc3R5bGU9XCJjb2xvcjojZjBmMGYwO1wiPmhlbGxvIHdvcmxkPC9zcGFuPidcblxuICAgICAgICBodG1sID0gcm5kciAnaGVsbG9cXG53b3JsZCdcbiAgICAgICAgZXhwZWN0KGh0bWxbMF0pLnRvLmVxbCAnPHNwYW4gc3R5bGU9XCJjb2xvcjojZjBmMGYwO1wiPmhlbGxvPC9zcGFuPidcbiAgICAgICAgZXhwZWN0KGh0bWxbMV0pLnRvLmVxbCAnPHNwYW4gc3R5bGU9XCJjb2xvcjojZjBmMGYwO1wiPndvcmxkPC9zcGFuPidcblxuICAgICAgICBodG1sID0gcm5kciAnXFxyXFxuaGVsbG9cXHJcXG4nXG4gICAgICAgIGxvZyBodG1sXG4gICAgICAgIGV4cGVjdChodG1sWzBdKS50by5lcWwgJzxzcGFuPiA8L3NwYW4+J1xuICAgICAgICBleHBlY3QoaHRtbFsxXSkudG8uZXFsICc8c3BhbiBzdHlsZT1cImNvbG9yOiNmMGYwZjA7XCI+aGVsbG88L3NwYW4+J1xuICAgICAgICBcbmNjYyA9IChidWYsIGxpbmUsIGNvbCwgY2hhcikgLT4gZXhwZWN0KGJ1Zi5saW5lc1tsaW5lXVtjb2xdWzFdKS50by5lcWwgY2hhclxuY2hyID0gKGJ1ZiwgaW5kZXgsIHZhbHVlLCBjaGFyKSAtPiBleHBlY3QoYnVmLmxpbmVzWzBdW2luZGV4XSkudG8uZXFsIFt2YWx1ZSwgY2hhcl1cbmVzYyA9IChkYXRhKSAtPiBkYXRhLnJlcGxhY2UgL1xcXlxcWy9nLCAnXFx4MWInXG5wcnMgPSAoZGF0YSkgLT4gcGFyc2UgZXNjKGRhdGEpLCBuZXcgQnVmZmVyKClcblxuZGVzY3JpYmUgJ3BhcnNlJywgLT5cbiAgICBcbiAgICBpdCAnbmV3bGluZScsIC0+XG4gICAgICAgIFxuICAgICAgICBidWYgPSBwcnMgXCJsaW5lQVxccmxpbmVCXCJcbiAgICAgICAgY2NjIGJ1ZiwgMCwgNCwgJ0InXG4gICAgICAgIFxuICAgICAgICBidWYgPSBwcnMgXCJsaW5lQVxcclxcbmxpbmVCXCJcbiAgICAgICAgY2NjIGJ1ZiwgMCwgNCwgJ0EnXG4gICAgICAgIGNjYyBidWYsIDEsIDQsICdCJ1xuICAgICAgICBcbiAgICBpdCAncHJvbXB0JywgLT5cblxuICAgICAgICBidWYgPSBwcnMgXCJoZWxsb1wiXG4gICAgICAgIGNociBidWYsIDAsIDEzMTg0MCwgJ2gnXG4gICAgICAgIGNociBidWYsIDEsIDEzMTg0MCwgJ2UnXG4gICAgICAgIGNociBidWYsIDIsIDEzMTg0MCwgJ2wnXG4gICAgICAgIGNociBidWYsIDMsIDEzMTg0MCwgJ2wnXG4gICAgICAgIGNociBidWYsIDQsIDEzMTg0MCwgJ28nXG4gICAgICAgIFxuICAgICAgICBidWYgPSBwcnMgXCJeW1swOzM0Ozk0bVteW1swOzMzOzkzbX5eW1swOzM0Ozk0bV1eW1swbV5bWzBLXCJcbiAgICAgICAgY2hyIGJ1ZiwgMCwgNjQwMCwgJ1snXG4gICAgICAgIGNociBidWYsIDEsIDU4ODgsICd+J1xuICAgICAgICBjaHIgYnVmLCAyLCA2NDAwLCAnXSdcbiAgICAgICAgXG4gICAgICAgIGJ1ZiA9IHBycyBcIl5bWz8yNWxcXHJeW1swOzM0Ozk0bVteW1swOzMzOzkzbX5eW1swOzM0Ozk0bV1eW1swbV5bWzBLXltbPzI1aFwiXG4gICAgICAgIGNociBidWYsIDAsIDY0MDAsICdbJ1xuICAgICAgICBjaHIgYnVmLCAxLCA1ODg4LCAnfidcbiAgICAgICAgY2hyIGJ1ZiwgMiwgNjQwMCwgJ10nXG4gICAgICAgICJdfQ==
//# sourceURL=../coffee/test.coffee